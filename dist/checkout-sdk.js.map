{"version":3,"sources":["webpack://checkoutKit/webpack/bootstrap","webpack://checkoutKit/external \"tslib\"","webpack://checkoutKit/external \"@bigcommerce/data-store\"","webpack://checkoutKit/external \"lodash\"","webpack://checkoutKit/external \"rxjs\"","webpack://checkoutKit/./src/shipping/consignment-actions.ts","webpack://checkoutKit/external \"@bigcommerce/memoize\"","webpack://checkoutKit/./src/customer/customer-strategy-actions.ts","webpack://checkoutKit/./src/payment/payment-strategy-actions.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-actions.ts","webpack://checkoutKit/./src/common/error/errors/missing-data-error.ts","webpack://checkoutKit/./src/checkout/checkout-actions.ts","webpack://checkoutKit/./src/coupon/coupon-actions.ts","webpack://checkoutKit/./src/billing/billing-address-actions.ts","webpack://checkoutKit/./src/order/order-actions.ts","webpack://checkoutKit/./src/payment/payment-method-actions.ts","webpack://checkoutKit/external \"rxjs/operators\"","webpack://checkoutKit/./src/checkout-buttons/checkout-button-actions.ts","webpack://checkoutKit/./src/coupon/gift-certificate-actions.ts","webpack://checkoutKit/./src/payment/instrument/instrument-actions.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout-events.ts","webpack://checkoutKit/./src/common/error/errors/standard-error.ts","webpack://checkoutKit/./src/common/utility/set-prototype-of.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-actions.ts","webpack://checkoutKit/./src/common/error/errors/request-error.ts","webpack://checkoutKit/./src/store-credit/store-credit-actions.ts","webpack://checkoutKit/./src/config/config-actions.ts","webpack://checkoutKit/./src/common/utility/is-plain-object.ts","webpack://checkoutKit/./src/geography/country-actions.ts","webpack://checkoutKit/./src/shipping/shipping-country-actions.ts","webpack://checkoutKit/external \"@bigcommerce/request-sender\"","webpack://checkoutKit/./src/payment/payment-status-types.ts","webpack://checkoutKit/./src/payment/errors/payment-method-client-unavailable-error.ts","webpack://checkoutKit/external \"@bigcommerce/script-loader\"","webpack://checkoutKit/./src/common/http-request/content-type.ts","webpack://checkoutKit/./src/payment/payment-actions.ts","webpack://checkoutKit/./src/common/error/errors/invalid-argument-error.ts","webpack://checkoutKit/./src/payment/payment-method-types.ts","webpack://checkoutKit/./src/embedded-checkout/is-iframe-event.ts","webpack://checkoutKit/external \"shallowequal\"","webpack://checkoutKit/./src/common/utility/is-equal.ts","webpack://checkoutKit/external \"@bigcommerce/form-poster\"","webpack://checkoutKit/external \"local-storage-fallback\"","webpack://checkoutKit/external \"reselect\"","webpack://checkoutKit/./src/embedded-checkout/iframe-event-poster.ts","webpack://checkoutKit/./src/customer/customer-actions.ts","webpack://checkoutKit/./src/order/spam-protection/spam-protection-actions.ts","webpack://checkoutKit/./src/payment/errors/payment-method-invalid-error.ts","webpack://checkoutKit/./src/common/selector/with-memoized-combiner.ts","webpack://checkoutKit/./src/common/error/error-actions.ts","webpack://checkoutKit/./src/payment/payment-method-action-creator.ts","webpack://checkoutKit/./src/payment/payment-method-request-sender.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/embedded-content-events.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-listener.ts","webpack://checkoutKit/./src/checkout/checkout-default-includes.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-items.ts","webpack://checkoutKit/./src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://checkoutKit/./src/common/http-request/internal-api-headers.ts","webpack://checkoutKit/./src/checkout/checkout-params.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-item.ts","webpack://checkoutKit/./src/common/error/errors/not-initialized-error.ts","webpack://checkoutKit/./src/common/error/throw-error-action.ts","webpack://checkoutKit/./src/common/utility/amount-transformer.ts","webpack://checkoutKit/./src/common/url/parse-url.ts","webpack://checkoutKit/./src/common/data-store/cachable-action-decorator.ts","webpack://checkoutKit/./src/common/data-store/is-action-options.ts","webpack://checkoutKit/./src/common/data-store/cache-action.ts","webpack://checkoutKit/./src/common/utility/bind-decorator.ts","webpack://checkoutKit/external \"iframe-resizer\"","webpack://checkoutKit/external \"iframe-resizer/js/iframeResizer.contentWindow\"","webpack://checkoutKit/./src/common/utility/omit-deep.ts","webpack://checkoutKit/./src/checkout/checkout-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-request-sender.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/get-callback-url.ts","webpack://checkoutKit/./src/shipping/map-to-internal-shipping-option.ts","webpack://checkoutKit/./src/common/utility/is-private.ts","webpack://checkoutKit/./src/common/error/errors/unrecoverable-error.ts","webpack://checkoutKit/./src/common/error/errors/map-from-internal-error-response.ts","webpack://checkoutKit/./src/common/error/errors/map-from-payment-error-response.ts","webpack://checkoutKit/./src/common/error/request-error-factory.ts","webpack://checkoutKit/./src/common/error/errors/map-from-storefront-error-response.ts","webpack://checkoutKit/./src/common/error/clear-error-reducer.ts","webpack://checkoutKit/./src/common/utility/replace.ts","webpack://checkoutKit/./src/common/utility/object-set.ts","webpack://checkoutKit/./src/billing/billing-address-state.ts","webpack://checkoutKit/./src/billing/billing-address-reducer.ts","webpack://checkoutKit/./src/common/utility/array-replace.ts","webpack://checkoutKit/./src/common/utility/object-merge.ts","webpack://checkoutKit/./src/cart/cart-state.ts","webpack://checkoutKit/./src/cart/cart-reducer.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-state.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-reducer.ts","webpack://checkoutKit/./src/config/config-state.ts","webpack://checkoutKit/./src/config/config-reducer.ts","webpack://checkoutKit/./src/coupon/coupon-state.ts","webpack://checkoutKit/./src/coupon/coupon-reducer.ts","webpack://checkoutKit/./src/coupon/gift-certificate-state.ts","webpack://checkoutKit/./src/coupon/gift-certificate-reducer.ts","webpack://checkoutKit/./src/customer/customer-state.ts","webpack://checkoutKit/./src/customer/customer-reducer.ts","webpack://checkoutKit/./src/customer/customer-strategy-state.ts","webpack://checkoutKit/./src/customer/customer-strategy-reducer.ts","webpack://checkoutKit/./src/geography/country-state.ts","webpack://checkoutKit/./src/geography/country-reducer.ts","webpack://checkoutKit/./src/order/order-state.ts","webpack://checkoutKit/./src/order/order-reducer.ts","webpack://checkoutKit/./src/payment/payment-reducer.ts","webpack://checkoutKit/./src/payment/payment-method-state.ts","webpack://checkoutKit/./src/payment/payment-method-reducer.ts","webpack://checkoutKit/./src/common/utility/merge-or-push.ts","webpack://checkoutKit/./src/payment/payment-strategy-state.ts","webpack://checkoutKit/./src/payment/payment-strategy-reducer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-state.ts","webpack://checkoutKit/./src/payment/instrument/instrument-reducer.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-state.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-reducer.ts","webpack://checkoutKit/./src/shipping/consignment-state.ts","webpack://checkoutKit/./src/shipping/consignment-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-country-state.ts","webpack://checkoutKit/./src/shipping/shipping-country-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-state.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-reducer.ts","webpack://checkoutKit/./src/store-credit/store-credit-reducer.ts","webpack://checkoutKit/./src/checkout/checkout-state.ts","webpack://checkoutKit/./src/checkout/checkout-reducer.ts","webpack://checkoutKit/./src/common/utility/create-freeze-proxy.ts","webpack://checkoutKit/./src/form/form-selector.ts","webpack://checkoutKit/./src/address/is-address-equal.ts","webpack://checkoutKit/./src/shipping/consignment-selector.ts","webpack://checkoutKit/./src/store-credit/store-credit-state.ts","webpack://checkoutKit/./src/checkout/create-internal-checkout-selectors.ts","webpack://checkoutKit/./src/billing/billing-address-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-selector.ts","webpack://checkoutKit/./src/coupon/coupon-selector.ts","webpack://checkoutKit/./src/customer/customer-selector.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-selector.ts","webpack://checkoutKit/./src/shipping/shipping-address-selector.ts","webpack://checkoutKit/./src/payment/payment-selector.ts","webpack://checkoutKit/./src/cart/cart-selector.ts","webpack://checkoutKit/./src/config/config-selector.ts","webpack://checkoutKit/./src/geography/country-selector.ts","webpack://checkoutKit/./src/customer/customer-strategy-selector.ts","webpack://checkoutKit/./src/coupon/gift-certificate-selector.ts","webpack://checkoutKit/./src/payment/instrument/instrument-selector.ts","webpack://checkoutKit/./src/payment/payment-method-selector.ts","webpack://checkoutKit/./src/payment/payment-strategy-selector.ts","webpack://checkoutKit/./src/shipping/shipping-country-selector.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-selector.ts","webpack://checkoutKit/./src/checkout/checkout-selector.ts","webpack://checkoutKit/./src/order/order-selector.ts","webpack://checkoutKit/./src/store-credit/store-credit-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-store.ts","webpack://checkoutKit/./src/checkout/create-action-transformer.ts","webpack://checkoutKit/./src/common/error/create-request-error-factory.ts","webpack://checkoutKit/./src/checkout/create-checkout-store-reducer.ts","webpack://checkoutKit/./src/checkout/errors/checkout-not-available-error.ts","webpack://checkoutKit/./src/checkout/checkout-request-sender.ts","webpack://checkoutKit/./src/coupon/map-to-internal-coupon.ts","webpack://checkoutKit/./src/address/map-to-internal-address.ts","webpack://checkoutKit/./src/billing/is-billing-address-like.ts","webpack://checkoutKit/./src/common/selector/selector-decorator.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-error-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-status-selector.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-selectors.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/checkout-button-method-type.ts","webpack://checkoutKit/./src/common/dom/is-element-id.ts","webpack://checkoutKit/./src/common/dom/set-unique-element-id.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-registry.ts","webpack://checkoutKit/./src/embedded-checkout/errors/not-embeddable-error.ts","webpack://checkoutKit/./src/common/storage/browser-storage.ts","webpack://checkoutKit/./src/embedded-checkout/errors/invalid-login-token-error.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout.ts","webpack://checkoutKit/./src/embedded-checkout/loading-indicator.ts","webpack://checkoutKit/./src/embedded-checkout/resizable-iframe-creator.ts","webpack://checkoutKit/./src/embedded-checkout/embed-checkout.ts","webpack://checkoutKit/./src/common/utility/cache-key-maps.ts","webpack://checkoutKit/./src/common/utility/cache-key-resolver.ts","webpack://checkoutKit/external \"@bigcommerce/bigpay-client\"","webpack://checkoutKit/external \"messageformat\"","webpack://checkoutKit/./src/common/error/errors/timeout-error.ts","webpack://checkoutKit/./src/common/selector/create-selector.ts","webpack://checkoutKit/./src/common/http-request/join-includes.ts","webpack://checkoutKit/./src/config/config-action-creator.ts","webpack://checkoutKit/./src/config/config-request-sender.ts","webpack://checkoutKit/./src/billing/billing-address-request-sender.ts","webpack://checkoutKit/./src/common/registry/registry.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack://checkoutKit/./src/customer/map-to-internal-customer.ts","webpack://checkoutKit/./src/coupon/map-to-internal-gift-certificate.ts","webpack://checkoutKit/./src/order/map-to-internal-order.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-script-loader.ts","webpack://checkoutKit/./src/common/iframe/iframe-resizer.ts","webpack://checkoutKit/./src/common/error/error-action-creator.ts","webpack://checkoutKit/./src/common/utility/get-environment.ts","webpack://checkoutKit/./src/common/log/console-logger.ts","webpack://checkoutKit/./src/common/log/noop-logger.ts","webpack://checkoutKit/./src/common/log/get-default-logger.ts","webpack://checkoutKit/./src/common/log/create-logger.ts","webpack://checkoutKit/./src/coupon/coupon-action-creator.ts","webpack://checkoutKit/./src/coupon/coupon-request-sender.ts","webpack://checkoutKit/./src/coupon/gift-certificate-action-creator.ts","webpack://checkoutKit/./src/coupon/gift-certificate-request-sender.ts","webpack://checkoutKit/./src/customer/customer-strategy-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-request-sender.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-creator.ts","webpack://checkoutKit/./src/customer/customer-action-creator.ts","webpack://checkoutKit/./src/customer/customer-request-sender.ts","webpack://checkoutKit/./src/common/error/errors/not-implemented-error.ts","webpack://checkoutKit/./src/customer/strategies/amazon/amazon-pay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/braintree/braintree-visacheckout-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/chasepay/chasepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/default/default-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/googlepay/googlepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/masterpass/masterpass-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/square/square-customer-strategy.ts","webpack://checkoutKit/./src/geography/country-action-creator.ts","webpack://checkoutKit/./src/geography/country-request-sender.ts","webpack://checkoutKit/./src/order/order-request-sender.ts","webpack://checkoutKit/./src/order/order-action-creator.ts","webpack://checkoutKit/./src/common/dom/mutation-observer.ts","webpack://checkoutKit/./src/order/spam-protection/errors/spam-protection-failed-error.ts","webpack://checkoutKit/./src/order/spam-protection/errors/spam-protection-not-completed-error.ts","webpack://checkoutKit/./src/order/spam-protection/google-recaptcha.ts","webpack://checkoutKit/./src/order/spam-protection/google-recaptcha-script-loader.ts","webpack://checkoutKit/./src/order/spam-protection/spam-protection-action-creator.ts","webpack://checkoutKit/./src/order/errors/order-finalization-not-required-error.ts","webpack://checkoutKit/./src/payment/payment-strategy-type.ts","webpack://checkoutKit/./src/payment/payment-strategy-action-creator.ts","webpack://checkoutKit/./src/cart/cart-comparator.ts","webpack://checkoutKit/./src/cart/errors/cart-changed-error.ts","webpack://checkoutKit/./src/checkout/checkout-validator.ts","webpack://checkoutKit/./src/store-credit/store-credit-action-creator.ts","webpack://checkoutKit/./src/store-credit/store-credit-request-sender.ts","webpack://checkoutKit/./src/payment/payment-action-creator.ts","webpack://checkoutKit/./src/payment/payment-request-sender.ts","webpack://checkoutKit/./src/payment/is-vaulted-instrument.ts","webpack://checkoutKit/./src/payment/payment-request-transformer.ts","webpack://checkoutKit/./src/order/order-params.ts","webpack://checkoutKit/./src/payment/payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/errors/payment-argument-invalid-error.ts","webpack://checkoutKit/./src/payment/errors/payment-method-cancelled-error.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirm-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirmJs.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirm-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack://checkoutKit/./src/address/is-internal-address-equal.ts","webpack://checkoutKit/./src/common/utility/omit-private.ts","webpack://checkoutKit/./src/address/map-from-internal-address.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/overlay/overlay.ts","webpack://checkoutKit/./src/common/utility/cancellable-promise.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/errors/payment-method-failed-error.ts","webpack://checkoutKit/./src/payment/is-credit-card-like.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/cardinal/cardinal.ts","webpack://checkoutKit/./src/payment/strategies/braintree/is-braintree-error.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/cardinal/cardinal-three-d-secure-flow.ts","webpack://checkoutKit/./src/payment/strategies/cardinal/cardinal-client.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay.ts","webpack://checkoutKit/./src/payment/strategies/cardinal/cardinal-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-form.ts","webpack://checkoutKit/./src/payment/strategies/converge/converge-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/credit-card/credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/cybersource/cybersource-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/legacy/legacy-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/no-payment/no-payment-data-required-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offline/offline-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offsite/offsite-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/sage-pay/sage-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/error/errors/unsupported-browser-error.ts","webpack://checkoutKit/./src/payment/strategies/square/square-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/stripev3/stripev3-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/stripev3/stripev3-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-risk-client.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/errors/payment-method-declined-error.ts","webpack://checkoutKit/./src/payment/strategies/zip/zip-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/zip/zip-script-loader.ts","webpack://checkoutKit/./src/payment/create-payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://checkoutKit/./src/common/data-store/create-data-store-projection.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-creator.ts","webpack://checkoutKit/./src/common/date-time/add-minutes.ts","webpack://checkoutKit/./src/common/date-time/is-future.ts","webpack://checkoutKit/./src/payment/instrument/instrument-response-transformer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-creator.ts","webpack://checkoutKit/./src/shipping/shipping-country-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-action-creator.ts","webpack://checkoutKit/./src/shipping/strategies/amazon/amazon-pay-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/default/default-shipping-strategy.ts","webpack://checkoutKit/./src/common/utility/clone-result.ts","webpack://checkoutKit/./src/common/selector/create-shallow-equal-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-selectors.ts","webpack://checkoutKit/./src/checkout/checkout-store-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-error-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-status-selector.ts","webpack://checkoutKit/./src/common/error/error-message-transformer.ts","webpack://checkoutKit/./src/common/utility/to-single-line.ts","webpack://checkoutKit/./src/checkout/checkout-service.ts","webpack://checkoutKit/./src/checkout/create-checkout-service-error-transformer.ts","webpack://checkoutKit/./src/checkout/create-checkout-service.ts","webpack://checkoutKit/./src/order/spam-protection/create-spam-protection.ts","webpack://checkoutKit/./src/payment/create-payment-client.ts","webpack://checkoutKit/./src/customer/create-customer-strategy-registry.ts","webpack://checkoutKit/./src/shipping/create-shipping-strategy-registry.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/handle-frame-loaded-event.ts","webpack://checkoutKit/./src/common/error/errors/custom-error.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/iframe-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/noop-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/create-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/locale/language-service.ts","webpack://checkoutKit/./src/locale/create-language-service.ts","webpack://checkoutKit/./src/currency/currency-formatter.ts","webpack://checkoutKit/./src/currency/currency-service.ts","webpack://checkoutKit/./src/currency/create-currency-service.ts","webpack://checkoutKit/./src/index.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack://checkoutKit/./src/cart/map-to-internal-cart.ts","webpack://checkoutKit/./src/promotion/map-to-discount-notifications.ts","webpack://checkoutKit/./src/billing/errors/unable-to-continue-as-guest-error.ts","webpack://checkoutKit/./src/billing/billing-address-action-creator.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","ConsignmentActionType","__webpack_exports__","CustomerStrategyActionType","PaymentStrategyActionType","ShippingStrategyActionType","MissingDataErrorType","MissingDataError","_super","subtype","_this","this","type","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentToken","MissingPaymentMethod","MissingShippingAddress","MissingSpamProtectionToken","getErrorMessage","tslib__WEBPACK_IMPORTED_MODULE_0__","_standard_error__WEBPACK_IMPORTED_MODULE_1__","CheckoutActionType","CouponActionType","BillingAddressActionType","OrderActionType","PaymentMethodActionType","CheckoutButtonActionType","GiftCertificateActionType","InstrumentActionType","EmbeddedCheckoutEventType","standard_error_StandardError","StandardError","message","_newTarget","setPrototypeOf","__proto__","Error","captureStackTrace","stack","external_tslib_","RemoteCheckoutActionType","DEFAULT_RESPONSE","body","headers","status","RequestError","response","_a","_b","errors","_c","StoreCreditActionType","ConfigActionType","isPlainObject","lodash__WEBPACK_IMPORTED_MODULE_0__","CountryActionType","ShippingCountryActionType","ACKNOWLEDGE","FINALIZE","PaymentMethodClientUnavailableError","ContentType","PaymentActionType","InvalidArgumentError","HOSTED","OFFLINE","isIframeEvent","isEqual","objectA","objectB","options","Array","isArray","length","index","length_1","isArrayEqual","Date","getTime","isDateEqual","RegExp","toString","isRegExpEqual","filter","keyFilter","keysA","keys","keysB","length_2","isObjectEqual","_common_url__WEBPACK_IMPORTED_MODULE_0__","IframeEventPoster","targetOrigin","_targetWindow","_targetOrigin","origin","post","event","window","postMessage","setTarget","CustomerActionType","SpamProtectionActionType","PaymentMethodInvalidError","withMemoizedCombiner","_bigcommerce_memoize__WEBPACK_IMPORTED_MODULE_0__","creator","args","_i","arguments","combiner","pop","apply","concat","combinerArgs","result","ErrorActionType","PaymentMethodActionCreator","_requestSender","loadPaymentMethods","rxjs__WEBPACK_IMPORTED_MODULE_2__","observer","next","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_1__","_payment_method_actions__WEBPACK_IMPORTED_MODULE_4__","LoadPaymentMethodsRequested","then","meta","deviceSessionId","sessionHash","LoadPaymentMethodsSucceeded","complete","catch","error","LoadPaymentMethodsFailed","loadPaymentMethod","methodId","LoadPaymentMethodRequested","undefined","LoadPaymentMethodSucceeded","LoadPaymentMethodFailed","_common_data_store__WEBPACK_IMPORTED_MODULE_3__","_common_http_request__WEBPACK_IMPORTED_MODULE_0__","_common_http_request__WEBPACK_IMPORTED_MODULE_1__","PaymentMethodRequestSender","timeout","Accept","JsonV1","X-API-INTERNAL","url","EmbeddedContentEventType","IframeEventListener","sourceOrigin","_sourceOrigin","_common_url__WEBPACK_IMPORTED_MODULE_1__","_isListening","_listeners","listen","addEventListener","_handleMessage","stopListen","removeEventListener","addListener","listener","listeners","push","removeListener","indexOf","splice","trigger","forEach","_is_iframe_event__WEBPACK_IMPORTED_MODULE_3__","data","_common_utility__WEBPACK_IMPORTED_MODULE_2__","mapToInternalLineItems","itemMap","decimalPlaces","idKey","reduce","map","item","amountTransformer","amount_transformer","id","imageUrl","amount","amountAfterDiscount","discount","integerAmount","toInteger","integerAmountAfterDiscount","integerDiscount","quantity","sender","recipient","attributes","variantId","mapGiftCertificateToInternalLineItem","map_to_internal_line_item","mapToInternalLineItemType","INTERNAL_USE_ONLY","CheckoutIncludes","_errors__WEBPACK_IMPORTED_MODULE_0__","BraintreeScriptLoader","_scriptLoader","_window","loadClient","loadScript","braintree","client","load3DS","threeDSecure","loadDataCollector","dataCollector","loadPaypal","paypal","loadPaypalCheckout","paypalCheckout","loadVisaCheckout","visaCheckout","loadGooglePayment","googlePayment","BraintreeSDKCreator","_braintreeScriptLoader","_dataCollectors","initialize","clientToken","_clientToken","getClient","_common_error_errors__WEBPACK_IMPORTED_MODULE_1__","PaymentNotInitialized","_client","authorization","getPaypal","_paypal","Promise","all","getPaypalCheckout","_paypalCheckout","get3DS","_3ds","getDataCollector","cacheKey","cached","kount","code","deviceData","teardown","resolve","getVisaCheckout","_visaCheckout","getGooglePaymentComponent","_googlePay","_teardown","default","mod","mapToInternalLineItem","_common_utility__WEBPACK_IMPORTED_MODULE_0__","extendedListPrice","extendedSalePrice","discountAmount","downloadsPageUrl","downloadPageUrl","brand","categoryNames","productId","option","addedByPromotion","NotInitializedErrorType","NotInitializedError","CustomerNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","throwErrorAction","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_0__","rxjs__WEBPACK_IMPORTED_MODULE_1__","action","payload","AmountTransformer","_decimalPlaces","Math","round","pow","parseUrl","_error_errors__WEBPACK_IMPORTED_MODULE_0__","test","anchor","document","createElement","href","hash","hostname","pathname","port","protocol","search","cachableActionDecorator","_","descriptor","memoizedMethods","WeakMap","decorateMethod","method","param","lastArg","useCache","fn","instanceMethods","set","memoize_","external_rxjs_","pipe","operators_","store","bindDecorator","target","bindMethodDecorator","decoratedTarget","class_1","getOwnPropertyNames","getOwnPropertyDescriptor","bindClassDecorator","boundMethod","omitDeep","predicate","CheckoutActionCreator","_checkoutRequestSender","_configActionCreator","loadCheckout","_checkout_actions__WEBPACK_IMPORTED_MODULE_6__","LoadCheckoutRequested","loadConfig","LoadCheckoutSucceeded","rxjs_operators__WEBPACK_IMPORTED_MODULE_3__","_common_error__WEBPACK_IMPORTED_MODULE_4__","LoadCheckoutFailed","loadDefaultCheckout","state","getState","context","config","getContextConfig","checkoutId","_common_error_errors__WEBPACK_IMPORTED_MODULE_5__","sent","updateCheckout","checkout","getCheckout","UpdateCheckoutRequested","UpdateCheckoutSucceeded","UpdateCheckoutFailed","loadCurrentCheckout","ConsignmentActionCreator","_consignmentRequestSender","unassignItemsByAddress","consignment","_common_error_errors__WEBPACK_IMPORTED_MODULE_4__","existingConsignment","consignments","getConsignmentByAddress","shippingAddress","lineItems","_removeLineItems","cart","getCart","updateConsignment","deleteConsignment","assignItemsByAddress","_createOrUpdateConsignment","_addLineItems","selectShippingOption","getConsignments","consignmentUpdateBody","shippingOptionId","consignmentMeta","_consignment_actions__WEBPACK_IMPORTED_MODULE_6__","UpdateShippingOptionRequested","UpdateShippingOptionSucceeded","UpdateShippingOptionFailed","loadShippingOptions","LoadShippingOptionsRequested","params","include","_checkout_checkout_params__WEBPACK_IMPORTED_MODULE_3__","AvailableShippingOptions","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","updateAddress","address","_getConsignmentRequestBody","createConsignments","CreateConsignmentsRequested","CreateConsignmentsSucceeded","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentSucceeded","UpdateConsignmentFailed","consignmentId","DeleteConsignmentRequested","DeleteConsignmentSucceeded","DeleteConsignmentFailed","updateShippingOption","_isUpdateConsignmentRequest","physicalItems","itemId","_hydrateLineItems","lineItemIds","existingItem","sharedItem","find","lineItem","request","DEFAULT_PARAMS","join","ConsignmentRequestSender","put","delete","getCallbackUrl","location","mapToInternalShippingOption","isSelected","description","price","cost","selected","isRecommended","transitTime","isPrivate","UnrecoverableError","request_error","joinErrors","map_from_payment_error_response_joinErrors","RequestErrorFactory","_factoryMethods","register","detail","title","mapFromInternalErrorResponse","mapFromStorefrontErrorResponse","mapFromPaymentErrorResponse","timeout_error","factoryMethod","createError","_getType","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","external_lodash_","split","errorResponse","storefrontErrorResponse","internalErrorResponse","clearErrorReducer","error_actions","ClearError","isClearErrorAction","omit_deep","replace","currentValue","newValue","is_equal","objectSet","DEFAULT_STATE","statuses","billingAddressReducer","data_store_","dataReducer","errorsReducer","statusesReducer","reducer","billing_address_actions","UpdateBillingAddressSucceeded","ContinueAsGuestSucceeded","checkout_actions","order_actions","LoadOrderSucceeded","billingAddress","UpdateBillingAddressRequested","UpdateBillingAddressFailed","ContinueAsGuestRequested","ContinueAsGuestFailed","arrayReplace","currentArray","newArray","matchObject","a","b","sameAsCurrentCount","sameAsNewCount","countSameAsReplaced","replacedValue","newItem","currentItem","is_plain_object","objectMerge","currentObject","newObject","cart_state_DEFAULT_STATE","cartReducer","cart_reducer_dataReducer","cart_reducer_errorsReducer","cart_reducer_statusesReducer","consignment_actions","coupon_actions","ApplyCouponSucceeded","RemoveCouponSucceeded","gift_certificate_actions","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","checkout_button_state_DEFAULT_STATE","DEFAULT_DATA_STATE","initializedContainers","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","checkout_button_reducer_dataReducer","checkout_button_reducer_errorsReducer","checkout_button_reducer_statusesReducer","checkout_button_actions","InitializeButtonSucceeded","containerId","DeinitializeButtonSucceeded","InitializeButtonRequested","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonFailed","config_state_DEFAULT_STATE","configReducer","config_reducer_dataReducer","config_reducer_errorsReducer","config_reducer_statusesReducer","config_actions","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","coupon_state_DEFAULT_STATE","couponReducer","coupon_reducer_dataReducer","coupon_reducer_errorsReducer","coupon_reducer_statusesReducer","coupons","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","gift_certificate_state_DEFAULT_STATE","giftCertificateReducer","gift_certificate_reducer_dataReducer","gift_certificate_reducer_errorsReducer","gift_certificate_reducer_statusesReducer","giftCertificates","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","customer_state_DEFAULT_STATE","customerReducer","customer_reducer_dataReducer","customer","customer_strategy_state_DEFAULT_STATE","customerStrategyReducer","customer_strategy_reducer_dataReducer","customer_strategy_reducer_errorsReducer","customer_strategy_reducer_statusesReducer","customer_strategy_actions","InitializeSucceeded","isInitialized","DeinitializeSucceeded","InitializeRequested","initializeError","initializeMethodId","InitializeFailed","DeinitializeRequested","deinitializeError","deinitializeMethodId","DeinitializeFailed","SignInRequested","SignInSucceeded","signInError","signInMethodId","SignInFailed","SignOutRequested","SignOutSucceeded","signOutError","signOutMethodId","SignOutFailed","WidgetInteractionStarted","WidgetInteractionFinished","widgetInteractionError","widgetInteractionMethodId","WidgetInteractionFailed","isInitializing","isDeinitializing","isSigningIn","isSigningOut","isWidgetInteracting","country_state_DEFAULT_STATE","countryReducer","country_reducer_dataReducer","country_reducer_errorsReducer","country_reducer_statusesReducer","country_actions","LoadCountriesSucceeded","LoadCountriesRequested","LoadCountriesFailed","order_state_DEFAULT_STATE","orderReducer","order_reducer_dataReducer","order_reducer_errorsReducer","metaReducer","order_reducer_statusesReducer","LoadOrderPaymentsSucceeded","FinalizeOrderSucceeded","SubmitOrderSucceeded","callbackUrl","order","orderToken","token","payment","spam_protection_actions","Completed","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","paymentReducer","payment_reducer_dataReducer","payment_actions","SubmitPaymentSucceeded","payment_method_state_DEFAULT_STATE","paymentMethodReducer","payment_method_reducer_dataReducer","payment_method_reducer_errorsReducer","payment_method_reducer_metaReducer","payment_method_reducer_statusesReducer","payment_method_actions","array","defaultPredicate","slice","mergeOrPush","gateway","methodA","methodB","loadMethodId","loadMethodError","isLoadingMethod","payment_strategy_state_DEFAULT_STATE","paymentStrategyReducer","payment_strategy_reducer_dataReducer","payment_strategy_reducer_errorsReducer","payment_strategy_reducer_statusesReducer","payment_strategy_actions","ExecuteRequested","ExecuteSucceeded","executeError","executeMethodId","ExecuteFailed","FinalizeRequested","FinalizeSucceeded","finalizeError","finalizeMethodId","FinalizeFailed","isExecuting","isFinalizing","instrument_state_DEFAULT_STATE","instrumentReducer","instrument_reducer_dataReducer","instrument_reducer_errorsReducer","instrument_reducer_metaReducer","instrument_reducer_statusesReducer","instrument_actions","LoadInstrumentsSucceeded","vaultedInstruments","DeleteInstrumentSucceeded","instrument","bigpayToken","instrumentId","LoadInstrumentsRequested","DeleteInstrumentRequested","deleteError","failedInstrument","LoadInstrumentsFailed","DeleteInstrumentFailed","isDeleting","deletingInstrument","remote_checkout_state_DEFAULT_STATE","remoteCheckoutReducer","remote_checkout_reducer_dataReducer","remote_checkout_actions","InitializeRemoteBillingSucceeded","billing","InitializeRemoteShippingSucceeded","shipping","LoadRemoteSettingsSucceeded","UpdateRemoteCheckout","consignment_state_DEFAULT_STATE","updateShippingOptionError","updateError","isUpdating","isUpdatingShippingOption","consignmentReducer","consignment_reducer_dataReducer","consignment_reducer_errorsReducer","consignment_reducer_statusesReducer","customer_actions","SignOutCustomerSucceeded","_d","_e","_f","shipping_country_state_DEFAULT_STATE","shippingCountryReducer","shipping_country_reducer_dataReducer","shipping_country_reducer_errorsReducer","shipping_country_reducer_statusesReducer","shipping_country_actions","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","shipping_strategy_state_DEFAULT_STATE","shippingStrategyReducer","shipping_strategy_reducer_dataReducer","shipping_strategy_reducer_errorsReducer","shipping_strategy_reducer_statusesReducer","shipping_strategy_actions","UpdateAddressRequested","UpdateAddressSucceeded","updateAddressError","updateAddressMethodId","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","selectOptionError","selectOptionMethodId","SelectOptionFailed","isUpdatingAddress","isSelectingOption","store_credit_reducer_DEFAULT_STATE","storeCreditReducer","store_credit_reducer_errorsReducer","store_credit_reducer_statusesReducer","store_credit_actions","ApplyStoreCreditRequested","ApplyStoreCreditSucceeded","ApplyStoreCreditFailed","checkout_state_DEFAULT_STATE","checkoutReducer","checkout_reducer_dataReducer","checkout_reducer_errorsReducer","checkout_reducer_statusesReducer","orderId","createFreezeProxy","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","charAt","createProxy","createFormSelectorFactory","getShippingAddressFields","create_selector","countries","countryCode","selectedCountry","storeConfig","formFields","shippingAddressFields","field","processField","getBillingAddressFields","billingAddressFields","country","items","label","fieldType","itemtype","processCountry","subdivisions","required","processProvince","hasPostalCodes","Boolean","processsPostCode","normalize","firstName","lastName","company","address1","address2","city","stateOrProvince","postalCode","phone","customFields","createConsignmentSelectorFactory","getConsignmentById","addressA","addressB","getShippingOption","selectedShippingOption","getLoadError","loadError","getCreateError","getLoadShippingOptionsError","loadShippingOptionsError","getUnassignedItems","assignedLineItemIds","itemIds","getUpdateError","getDeleteError","getItemAssignmentError","getUpdateShippingOptionError","isLoading","isLoadingShippingOptions","isCreating","isAssigningItems","store_credit_state_DEFAULT_STATE","createInternalCheckoutSelectorsFactory","getBillingAddress","getContinueAsGuestError","isContinuingAsGuest","getInitializeError","getDeinitializeError","getCoupons","getRemoveError","getApplyError","isApplying","isRemoving","getCustomer","getShippingAddress","getInternalPayment","getGatewayPayment","getHostedPayment","getPaymentId","getPaymentStatus","getPaymentToken","getPaymentRedirectUrl","isPaymentDataRequired","isPaymentDataSubmitted","createBillingAddressSelector","continueAsGuestError","createCartSelector","createCartSelectorFactory","createCheckoutButtonSelector","createConfigSelector","getConfig","getStoreConfig","getExternalSource","externalSource","createConfigSelectorFactory","createCountrySelector","getCountries","createCountrySelectorFactory","createCouponSelector","removeCouponError","applyCouponError","isApplyingCoupon","isRemovingCoupon","createCustomerSelector","createCustomerStrategySelector","getSignInError","getSignOutError","getWidgetInteractionError","createCustomerStrategySelectorFactory","createGiftCertificateSelector","getGiftCertificates","removeGiftCertificateError","applyGiftCertificateError","isApplyingGiftCertificate","isRemovingGiftCertificate","createGiftCertificateSelectorFactory","createInstrumentSelector","getInstruments","instruments","getInstrumentsMeta","createInstrumentSelectorFactory","createFormSelector","createPaymentMethodSelector","getPaymentMethods","paymentMethods","getPaymentMethodsMeta","getPaymentMethod","gatewayId","getLoadMethodError","createPaymentMethodSelectorFactory","createPaymentStrategySelector","getExecuteError","getFinalizeError","getWidgetInteractingError","createPaymentStrategySelectorFactory","createRemoteCheckoutSelector","createShippingAddressSelector","createShippingCountrySelector","getShippingCountries","createShippingCountrySelectorFactory","createShippingStrategySelector","getUpdateAddressError","getSelectOptionError","createShippingStrategySelectorFactory","createConsignmentSelector","createCheckoutSelector","getOutstandingBalance","useStoreCredit","grandTotal","storeCredit","max","outstandingBalance","createCheckoutSelectorFactory","createOrderSelector","getOrder","getOrderMeta","createOrderSelectorFactory","createPaymentSelector","payments","providerId","providerType","payment_method_types","internalPayment","step","redirectUrl","paymentMethod","nonce","payment_status_types","createStoreCreditSelector","applyError","createStoreCreditSelectorFactory","checkoutButton","customerStrategies","form","paymentStrategies","remoteCheckout","shippingCountries","shippingStrategies","selectors","shouldWarnMutation","createCheckoutStore","initialState","requestErrorFactory","factory","actionTransformer","request_error_factory","unrecoverable_error","payment_method_invalid_error","action$","every","createInternalCheckoutSelectors","stateTransformer","CheckoutNotAvailableError","checkout_request_sender_CheckoutRequestSender","CheckoutRequestSender","content_type","join_includes","checkout_default_includes","checkout_not_available_error","mapToInternalCoupon","couponTypes","coupon","displayName","discountType","couponType","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","stateOrProvinceCode","postCode","selectorDecorator","resolver","cache_key_resolver","memoizedMethod","bind_decorator","cachedValue","getUsedCount","is_private","cache","getKey","selectorMethodDecorator","checkout_button_error_selector","CheckoutButtonErrorSelector","_checkoutButton","getInitializeButtonError","getDeinitializeButtonError","checkout_button_status_selector","CheckoutButtonStatusSelector","isInitializingButton","isDeinitializingButton","createCheckoutButtonSelectors","CheckoutButtonMethodType","checkout_button_initializer","CheckoutButtonInitializer","_store","_buttonStrategyActionCreator","_state","subscribe","subscriber","filters","initializeButton","containerIds","selector","idPrefix","containers","querySelectorAll","invalid_argument_error","container","setUniqueElementId","queueId","dispatch","deinitializeButton","deinitialize","CheckoutButtonStrategyActionCreator","_registry","_paymentMethodActionCreator","throw_error_action","checkout_button_method_type","BraintreePaypalButtonStrategy","_checkoutActionCreator","_braintreeSDKCreator","_paypalScriptLoader","_formPoster","_offerCredit","paypalOptions","braintreepaypalcredit","braintreepaypal","_paymentMethod","missing_data_error","allowedSources","disallowedSources","allowCredit","FUNDING","CREDIT","Button","render","env","testMode","commit","shouldProcessPayment","funding","allowed","disallowed","style","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","onError","addresses","not_initialized_error","CheckoutButtonNotInitialized","createPayment","flow","enableShippingAddress","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","currency","offerCredit","tokenizePayment","postForm","payment_type","provider","device_data","shipping_address","JSON","stringify","_mapToLegacyShippingAddress","billing_address","_mapToLegacyBillingAddress","details","recipientName","email","first_name","last_name","phone_number","address_line_1","line1","address_line_2","line2","country_code","postal_code","googlepay_button_strategy","GooglePayButtonStrategy","_googlePayPaymentProcessor","_methodId","_getMethodId","_walletButton","_createSignInButton","parentNode","removeChild","getElementById","googlePayButton","createButton","_handleWalletButtonClick","appendChild","preventDefault","displayWallet","paymentData","handleSuccess","updateShippingAddress","_onPaymentSelectComplete","_onError","Content-Type","masterpass_button_strategy","MasterpassButtonStrategy","_masterpassScriptLoader","initializationData","load","masterpass","_masterpassClient","_signInButton","buttonContainer","button","src","_createMasterpassPayload","allowedCardTypes","cartAmount","cartId","suppressShippingAddress","get_callback_url","PaypalButtonStrategy","_host","merchantId","clientId","actions","internal_api_headers","res","paymentID","payerID","paymentId","payerId","payerInfo","payer","payer_info","createCheckoutButtonInitializer","host","create_checkout_store","requestSender","request_sender_","formPoster","form_poster_","checkout_button_strategy_action_creator","registry","registry_registry","scriptLoader","script_loader_","checkoutActionCreator","checkout_action_creator","checkout_request_sender","config_action_creator","config_request_sender","BRAINTREE_PAYPAL","braintree_paypal_button_strategy","braintree_sdk_creator","braintree_script_loader","paypal_script_loader","BRAINTREE_PAYPAL_CREDIT","MASTERPASS","masterpass_script_loader","GOOGLEPAY_BRAINTREE","create_googlepay_payment_processor","googlepay_braintree_initializer","GOOGLEPAY_STRIPE","googlepay_stripe_initializer","PAYPALEXPRESS","paypal_button_strategy","createCheckoutButtonRegistry","payment_method_action_creator","payment_method_request_sender","NotEmbeddableErrorType","BrowserStorage","_namespace","getItem","rawValue","external_local_storage_fallback_default","withNamespace","parse","removeItem","getItemOnce","setItem","InvalidLoginTokenError","NotEmbeddableError","UnknownError","standard_error","embedded_checkout","EmbeddedCheckout","_iframeCreator","_messageListener","_messagePoster","_loadingIndicator","_storage","_location","_options","_isAttached","onComplete","embedded_checkout_events","CheckoutComplete","CheckoutError","onLoad","CheckoutLoaded","onFrameLoad","FrameLoaded","onSignOut","SignedOut","_configureStyles","attach","show","_allowCookie","_attemptLogin","createFrame","iframe","_iframe","hide","_retryAllowCookie","FrameError","detach","iFrameResizer","close","contentWindow","styles","embedded_content_events","StyleConfigured","parse_url","reject","invalid_login_token_error","encodeURIComponent","visibility","not_embeddable_error","MissingContent","DEFAULT_STYLES","size","color","backgroundColor","ROTATION_ANIMATION","LoadingIndicator","_styles","_defineAnimation","_container","_buildContainer","_indicator","_buildIndicator","parentId","parent_1","opacity","handleTransitionEnd","display","bottom","left","height","width","position","right","top","transition","indicator","borderRadius","border","borderColor","margin","transform","transformStyle","animation","head","sheet","CSSStyleSheet","insertRule","ResizableIframeCreator","MissingContainer","allowPaymentRequest","_toResizableFrame","timeoutInterval","setTimeout","handleMessage","is_iframe_event","contentId","iframes","iframe_resizer","scrolling","sizeWidth","heightCalculationMethod","clearTimeout","embedCheckout","STORAGE_PREFIX","resizable_iframe_creator","iframe_event_listener","iframe_event_poster","loading_indicator","loadingIndicator","browser_storage","isTerminalCacheKeyMap","cache_key_resolver_CacheKeyResolver","CacheKeyResolver","_lastId","_map","maps","_usedMaps","maxSize","external_shallowequal_","onExpire","_resolveMap","parentMap","usedCount","_generateMap","_removeLeastUsedMap","isMatched","mapIndex","unshift","parent","terminalMap","recentlyUsedMap","_removeMap","isRootCacheKeyMap","TimeoutError","reselect__WEBPACK_IMPORTED_MODULE_0__","_with_memoized_combiner__WEBPACK_IMPORTED_MODULE_1__","joinIncludes","includes","ConfigActionCreator","_configRequestSender","_config_actions__WEBPACK_IMPORTED_MODULE_4__","ConfigRequestSender","BillingAddressRequestSender","createAddress","Registry","_factories","_instances","defaultToken","cacheToken","_getInstance","_hasFactory","_error_errors__WEBPACK_IMPORTED_MODULE_1__","_hasInstance","MasterpassScriptLoader","RemoteCheckoutSynchronizationError","GooglePayBraintreeInitializer","hasShippingAddress","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","parseResponse","paymentMethodData","tokenizationData","androidPayCards","cardType","lastFour","lastTwo","binData","platformToken","googlePayBraintreePaymentDataRequest","merchantInfo","authJwt","merchantName","googleMerchantName","googleMerchantId","transactionInfo","currencyCode","totalPriceStatus","totalPrice","toFixed","cardRequirements","billingAddressRequired","billingAddressFormat","shippingAddressRequired","emailRequired","phoneNumberRequired","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","apiVersion","apiVersionMinor","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","billingAddressParameters","format","tokenizationSpecification","braintree:apiVersion","braintree:authorizationFingerprint","paymentMethodTokenizationParameters","braintree:merchantId","braintree:sdkVersion","shippingAddressParameters","GooglePayStripeInitializer","_mapGooglePayStripeDataRequestToGooglePayDataRequestV2","card","last4","err","stripe:version","stripeVersion","stripe:publishableKey","stripePublishableKey","mapToInternalCustomer","_address__WEBPACK_IMPORTED_MODULE_0__","customerId","isGuest","fullName","mapToInternalGiftCertificate","giftCertificate","discountedAmount","used","remainingBalance","remaining","balance","purchaseDate","mapToInternalOrder","_cart__WEBPACK_IMPORTED_MODULE_1__","_coupon__WEBPACK_IMPORTED_MODULE_3__","orderMeta","customerCanBeCreated","mapToInternalOrderPayment","subtotal","baseAmount","sum","discountNotifications","totalDiscountedAmount","appliedGiftCertificates","socialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","mapToStoreCredit","taxes","taxTotal","handling","handlingCostTotal","orderAmount","orderAmountAsInteger","mapToInternalPaymentStatus","isDefaultOrderPayment","helpText","instructions","returnUrl","socialDataObject","digitalItems","socialMedia","image","link","shareText","text","sharingLink","channelName","channel","channelCode","PaypalScriptLoader","iframeResizer","originalIframeResizer","setupContentWindowForIframeResizer","ErrorActionCreator","clearError","getEnvironment","process","NODE_ENV","e","ConsoleLogger","_console","log","messages","_logToConsole","info","warn","debug","NoopLogger","isEnabled","logger","console_logger","console","noop_logger","getDefaultLogger","CouponActionCreator","_couponRequestSender","applyCoupon","removeCoupon","CouponRequestSender","couponCode","checkout_params","GiftCertificateActionCreator","_giftCertificateRequestSender","applyGiftCertificate","removeGiftCertificate","GiftCertificateRequestSender","giftCertificateCode","CustomerStrategyActionCreator","_strategyRegistry","signIn","credentials","signOut","widgetInteraction","AmazonPayScriptLoader","loadWidget","onPaymentReady","region","toLowerCase","_configureWidget","onLoginReady","amazon","Login","setClientId","setUseCookie","onAmazonLoginReady","OffAmazonPayments","onAmazonPaymentsReady","BraintreeVisaCheckoutPaymentProcessor","createInitOptions","settings","locale","collectShipping","paymentRequest","String","braintreeVisaCheckout","tokenize","tokenizedPayload","_toVisaCheckoutAddress","_postForm","userData","cardInformation","userEmail","card_information","_getCardInformation","_getAddress","phoneNumber","streetAddress","extendedAddress","locality","number","createBraintreeVisaCheckoutPaymentProcessor","braintreeScriptLoader","braintreeSDKCreator","braintree_visacheckout_payment_processor","VisaCheckoutScriptLoader","V","payment_method_client_unavailable_error","ChasePayScriptLoader","JPMC","RemoteCheckoutRequestSender","initializeBilling","methodName","initializeShipping","initializePayment","loadSettings","generateToken","trackAuthorizationEvent","RemoteCheckoutActionCreator","_remoteCheckoutRequestSender","InitializeRemoteBillingRequested","InitializeRemoteBillingFailed","InitializeRemoteShippingRequested","InitializeRemoteShippingFailed","InitializeRemotePaymentRequested","InitializeRemotePaymentSucceeded","InitializeRemotePaymentFailed","LoadRemoteSettingsRequested","LoadRemoteSettingsFailed","SignOutRemoteCustomerRequested","SignOutRemoteCustomerSucceeded","SignOutRemoteCustomerFailed","CustomerActionCreator","_customerRequestSender","signInCustomer","SignInCustomerRequested","SignInCustomerSucceeded","SignInCustomerFailed","signOutCustomer","SignOutCustomerRequested","SignOutCustomerFailed","CustomerRequestSender","NotImplementedError","AmazonPayCustomerStrategy","_remoteCheckoutActionCreator","amazonOptions","not_implemented_error","useAmazonAddressBook","_handleAuthorization","authorize","popup","scope","tokenPrefix","BraintreeVisaCheckoutCustomerStrategy","_customerStrategyActionCreator","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","_buttonClassName","visaCheckoutOptions","braintreevisacheckout","initOptions","storeProfile","storeLanguage","signInButton","init","on","paymentSuccessPayload","_paymentInstrumentSelected","buttonClass","querySelector","_insertVisaCheckoutButton","visaCheckoutButton","className","innerHTML","ChasePayCustomerStrategy","_chasePayScriptLoader","chasePayOptions","chasepay","digitalSessionId","ChasePay","configure","language","isChasePayUp","insertButtons","EventType","START_CHECKOUT","sessionId","startCheckout","COMPLETE_CHECKOUT","requestId","merchantRequestId","_setExternalCheckoutData","_reloadPage","sessionToken","sendRequest","fromChasePay","DefaultCustomerStrategy","_customerActionCreator","googlepay_customer_strategy","GooglePayCustomerStrategy","googlePayOptions","_getGooglePayOptions","googlepaybraintree","googlepaystripe","MasterpassCustomerStrategy","masterpassOptions","Masterpass","SquareCustomerStrategy","CountryActionCreator","_countryRequestSender","loadCountries","CountryRequestSender","_config","Accept-Language","OrderRequestSender","loadOrder","submitOrder","finalizeOrder","OrderActionCreator","_orderRequestSender","_checkoutValidator","_spamProtectionActionCreator","loadOrderPayments","loadCurrentOrder","_getCurrentOrderId","SubmitOrderRequested","spamProtectionToken","checkoutSettings","isSpamProtectionEnabled","validate","_mapToOrderRequestBody","customerMessage","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderFailed","executeSpamProtection","execute","MutationObserverFactory","callback","MutationObserver","SpamProtectionFailedError","SpamProtectionNotCompletedError","GoogleRecaptcha","googleRecaptchaScriptLoader","mutationObserverFactory","sitekey","event$","_event$","recaptcha","getResponse","reset","error-callback","spam_protection_failed_error","_recaptcha","_watchRecaptchaChallengeWindow","iframeElement","iframeContainer","parentElement","spam_protection_not_completed_error","observe","attributeFilter","GoogleRecaptchaScriptLoader","_loadPromise","_loadScript","grecaptcha","SpamProtectionActionCreator","_googleRecaptcha","recaptchaSitekey","googleRecaptchaSitekey","SubmitFailed","PaymentStrategyType","OrderFinalizationNotRequiredError","payment_strategy_type","PaymentStrategyActionCreator","_orderActionCreator","strategy","getByMethod","NO_PAYMENT_DATA_REQUIRED","finalize","_loadOrderPaymentsIfNeeded","order_finalization_not_required_error","CartComparator","cartA","cartB","_normalize","sort","itemA","itemB","localeCompare","giftWrapping","CartChangedError","CheckoutValidator","comparator","cart_comparator","_compareCoupons","_compareGiftCertificates","cart_changed_error","couponsA","couponsB","giftCertificatesA","giftCertificatesB","StoreCreditActionCreator","_storeCreditRequestSender","applyStoreCredit","removeStoreCredit","StoreCreditRequestSender","PaymentActionCreator","_paymentRequestSender","_paymentRequestTransformer","submitPayment","SubmitPaymentRequested","SubmitPaymentFailed","initializeOffsitePayment","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","PaymentRequestSender","_transformResponse","statusText","isVaultedInstrument","OrderIncludes","PaymentRequestTransformer","checkoutState","_getPaymentMethod","shippingOption","contextConfig","instrumentMeta","paymentMeta","internalCustomer","map_to_internal_customer","authToken","vaultAccessToken","map_to_internal_address","map_to_internal_shipping_option","map_to_internal_cart","map_to_internal_order","quoteMeta","geoCountryCode","source","paymentMethodSelector","PaymentStrategyRegistry","_getToken","_hasFactoryForMethod","_isLegacyMethod","LEGACY","OFFSITE","CREDIT_CARD","clientSidePaymentProviders","paymentSettings","PaymentArgumentInvalidError","invalidFields","PaymentMethodCancelledError","AffirmPaymentStrategy","_paymentActionCreator","_affirmScriptLoader","publicKey","affirm","_affirm","payment_argument_invalid_error","requestOptions","PhysicalItemsCategories","DigitalItemsCategories","_getCheckoutInformation","open","onFail","failObject","reason","payment_method_cancelled_error","onSuccess","successObject","ui","paymentPayload","checkout_token","_getBillingAddress","merchant","user_confirmation_url","links","checkoutLink","user_cancel_url","user_confirmation_url_action","_getShippingAddress","_getItems","metadata","shipping_type","_getShippingType","platform_type","platform_version","platform_affirm","discounts","_getDiscounts","order_id","shipping_amount","tax_amount","total","first","last","full","zipcode","display_name","sku","unit_price","salePrice","qty","item_image_url","item_url","categories","_getCategories","customItems","_g","listPrice","line","discount_amount","discount_display_name","DISCOUNTED_AMOUNT","categoryTree","category","affirmJs","Function","AffirmScriptLoader","apikey","scriptURI","_getScriptURI","AfterpayPaymentStrategy","_storeCreditActionCreator","_afterpayScriptLoader","storeCountryName","storeCountry","_mapCountryToISO2","_afterpaySdk","_redirectToAfterpay","countryName","redirect","SCRIPTS_DEFAULT","SCRIPTS_US","AfterpayScriptLoader","AfterPay","isInternalAddressEqual","ignoredKeys","mapFromInternalAddress","AmazonPayPaymentStrategy","_billingAddressActionCreator","_walletOptions","_createWallet","referenceId","_getOrderReferenceId","sellerId","_getMerchantId","is3dsEnabled","_processPaymentWith3ds","onPaymentSelect","onReady","walletOptions","amazonOrderReferenceId","design","designMode","orderReference","_synchronizeBillingAddress","_updateOrderReference","widget","Widgets","Wallet","remote_checkout_synchronization_error","remoteAddress","internalBillingAddress","getAmazonOrderReferenceId","initConfirmationFlow","confirmationFlow","success","Overlay","_element","_createElement","_registerClick","remove","_unregisterClick","_removeAfterTransition","element","background","transitionDuration","zIndex","onClick","onClick_1","handeTransition","propertyName","promise","cancellable","cancel","race","BraintreePaymentProcessor","_overlay","_threeDSecureOptions","preloadPaypal","tokenizeCard","requestData","_mapToCreditCard","creditCards","focusWindow","useraction","verifyCard","addFrame","removeFrame","cancelVerifyCard","verification","cancellable_promise","appendSessionId","processedPayment","creditCard","cardholderName","ccName","ccNumber","cvv","ccCvv","expirationDate","ccExpiry","month","year","endpoint","PaymentMethodFailedError","isCreditCardLike","BraintreeCreditCardPaymentStrategy","_braintreePaymentProcessor","_is3dsEnabled","_handleError","orderRequest","_preparePaymentData","payment_method_failed_error","_isUsingVaulting","shouldSaveInstrument","tokenizedCard","CardinalInitializationType","CardinalEventType","CardinalValidatedAction","CardinalPaymentType","CardinalTriggerEvents","CardinalPaymentBrand","CardinalSignatureVerification","BraintreePaypalPaymentStrategy","_credit","braintreeOptions","isBraintreeError","BraintreeVisaCheckoutPaymentStrategy","_paymentStrategyActionCreator","visaInitOptions","CardinalThreeDSecureFlow","_cardinalClient","prepare","start","runBinProcess","_getBinNumber","getThreeDSecureData","three_ds_result","_getOrderData","entry","iin","CardinalSignatureValidationErrors","ChasePayEventType","CardinalClient","_sdk","_getClientSDK","SetupCompleted","off","Validated","ActionCode","ErrorNumber","ErrorDescription","setup","Init","jwt","binNumber","BinProcess","Status","threeDSecureData","orderData","Success","NoAction","Payment","ExtendedData","SignatureVerification","Yes","Failure","continueObject","AcsUrl","acs_url","Payload","merchant_data","partialOrder","_mapToPartialOrder","payer_auth_request","continue","CCA","transactionId","consumer","BillingAddress","_mapToCardinalAddress","Account","_mapToCardinalAccount","Email1","ShippingAddress","Consumer","OrderDetails","OrderNumber","Amount","CurrencyCode","OrderChannel","TransactionId","AccountNumber","Number","ExpirationMonth","ExpirationYear","NameOnAccount","CardCode","cardinalAddress","FirstName","LastName","Address1","City","State","PostalCode","CountryCode","Address2","Phone1","CardinalScriptLoader","Cardinal","CardBrand","DigitalWalletType","chasepay_payment_strategy","ChasePayPaymentStrategy","_wepayRiskClient","_walletEvent$","walletButton","_configureWallet","_chasePayClient","_getPayment","_displayWallet","_createOrder","logoContainer","insertBrandings","CancelCheckout","onCancel","CompleteCheckout","_setSessionToken","showLoadingAnimation","getRiskToken","riskToken","paymentCryptogram","cryptogramId","eci","btoa","reqTokenId","expDate","substr","accountNum","accountMask","extraData","ConvergePaymentStrategy","PaReq","TermUrl","callback_url","MD","CreditCardPaymentStrategy","CyberSourcePaymentStrategy","_threeDSecureFlow","googlepay_payment_strategy","GooglePayPaymentStrategy","_googlePayOptions","statusCode","KlarnaPaymentStrategy","_klarnaScriptLoader","_supportedEUCountries","klarnaCredit","_klarnaCredit","_unsubscribe","_loadWidget","_authorize","authorizationToken","authorization_token","klarna","client_token","_getUpdateSessionData","_mapToKlarnaAddress","klarnaAddress","street_address","given_name","family_name","street_address2","updateSessionData","approved","show_form","KlarnaScriptLoader","Klarna","Credit","LegacyPaymentStrategy","masterpass_payment_strategy","MasterpassPaymentStrategy","NoPaymentDataRequiredPaymentStrategy","OfflinePaymentStrategy","OffsitePaymentStrategy","orderPayload","_shouldSubmitFullPayload","PaypalProPaymentStrategy","_isPaymentAcknowledged","PaypalExpressPaymentStrategy","_useRedirectFlow","paypalexpress","useRedirectFlow","_isInContextEnabled","_paypalSdk","environment","closeFlow","_isAcknowledgedOrFinalized","initXO","startFlow","SagePayPaymentStrategy","UnsupportedBrowserError","SquarePaymentStrategy","_syncPaymentMethod","createSquareForm","_paymentForm","_getFormOptions","build","_getNonceInstrument","_getCountryCode","toUpperCase","_deferredRequestNonce","requestCardNonce","deferred","squareOptions","square","_squareOptions","callbacks","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","none","_handleWalletNonceResponse","_handleCardNonceResponse","createPaymentRequest","_paymentRequestPayload","methodsSupported","methods","_showPaymentMethods","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","unsupported_browser_error","requestShippingAddress","requestBillingInfo","storeName","pending","setPostalCode","masterpassBtn","elementId","SquareScriptLoader","SqPaymentForm","StripeV3PaymentStrategy","_stripeScriptLoader","stripeOptions","stripev3","stripeJs","_stripeV3Client","cardElement","elements","mount","_cardElement","_getStripeJs","handleCardPayment","stripeResponse","paymentIntent","createPaymentMethod","_mapStripePaymentMethodOptions","stripePaymentMethod","stripeCardPaymentOptions","_mapStripeCardPaymentOptions","payment_method","unmount","_mapStripeBillingAddress","_mapStripeShippingAddress","_mapStripeBillingDetails","stripeBillingDetails","_mapStripeShippingDetails","stripeShippingDetails","_getCustomer","shippingDetails","receipt_email","save_payment_method","billing_details","StripeV3ScriptLoader","publishableKey","Stripe","betas","WepayRiskClient","_riskClient","WePay","risk","generate_risk_token","get_risk_token","WepayPaymentStrategy","orderActionCreator","paymentActionCreator","payloadWithToken","credit_card_payment_strategy","PaymentMethodDeclinedError","ZipPaymentStrategy","_zipScriptLoader","zip","_zipClient","zipClient","Checkout","_prepareForReferredRegistration","payment_method_declined_error","onCheckout","openModal","externalId","ZipScriptLoader","Zip","createPaymentStrategyRegistry","paymentClient","spamProtection","payment_strategy_registry","paymentRequestTransformer","payment_request_transformer","paymentRequestSender","payment_request_sender","billingAddressActionCreator","billing_address_action_creator","billing_address_request_sender","braintreePaymentProcessor","overlay","overlay_overlay","braintree_payment_processor","createBraintreePaymentProcessor","checkoutRequestSender","checkoutValidator","checkout_validator","spamProtectionActionCreator","spam_protection_action_creator","order_action_creator","order_request_sender","storeCreditActionCreator","store_credit_action_creator","store_credit_request_sender","payment_action_creator","paymentMethodActionCreator","remoteCheckoutActionCreator","remote_checkout_action_creator","remote_checkout_request_sender","configActionCreator","paymentStrategyActionCreator","payment_strategy_action_creator","AFFIRM","affirm_payment_strategy","affirm_script_loader","AFTERPAY","afterpay_payment_strategy","afterpay_script_loader","AMAZON","amazon_pay_payment_strategy","amazon_pay_script_loader","CYBERSOURCE","cybersource_payment_strategy","cardinal_three_d_secure_flow","cardinal_client","cardinal_script_loader","KLARNA","klarna_payment_strategy","klarna_script_loader","legacy_payment_strategy","offline_payment_strategy","offsite_payment_strategy","PAYPAL","paypal_pro_payment_strategy","PAYPAL_EXPRESS","paypal_express_payment_strategy","PAYPAL_EXPRESS_CREDIT","SAGE_PAY","sage_pay_payment_strategy","SQUARE","square_payment_strategy","square_script_loader","no_payment_data_required_strategy","BRAINTREE","braintree_credit_card_payment_strategy","braintree_paypal_payment_strategy","BRAINTREE_VISA_CHECKOUT","braintree_visacheckout_payment_strategy","visacheckout_script_loader","CHASE_PAY","chasepay_script_loader","wepay_risk_client","BRAINTREE_GOOGLE_PAY","WE_PAY","wepay_payment_strategy","STRIPE_GOOGLE_PAY","ZIP","zip_payment_strategy","zip_script_loader","CONVERGE","converge_payment_strategy","STRIPEV3","stripev3_payment_strategy","stripev3_script_loader","ProjectionActionType","InstrumentActionCreator","_instrumentRequestSender","loadInstruments","session","_getSessionContext","_getCurrentAccessToken","_getValidAccessToken","currentToken","deleteInstrument","_isValidVaultAccessToken","date","newDate","valueOf","now","isFuture","vaultAccessExpiry","setMinutes","getMinutes","getVaultAccessToken","storeId","shopperCurrency","isTransactional","InstrumentResponseTransformer","transformResponse","_transformVaultedInstruments","vaulted_instruments","transformErrorResponse","transformVaultAccessResponse","expires_at","bigpay_token","defaultInstrument","default_instrument","last_4","expiryMonth","expiry_month","expiryYear","expiry_year","trustedShippingAddress","trusted_shipping_address","InstrumentRequestSender","_transformer","instrument_response_transformer","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","loadInstrumentsWithAddress","ShippingCountryActionCreator","_shippingCountryRequestSender","ShippingCountryRequestSender","ShippingStrategyActionCreator","selectOption","mergedOptions","AmazonPayShippingStrategy","_consignmentActionCreator","_createAddressBook","optionId","onAddressSelect","AddressBook","_synchronizeShippingAddress","DefaultShippingStrategy","cloneDeep","input","cloneDeepSafe","cloneResult","createShallowEqualSelector","external_reselect_","create_shallow_equal_selector","with_memoized_combiner","createCheckoutSelectorsFactory","getShippingOptions","getSelectedShippingOption","getBillingCountries","getSelectedPaymentMethod","getError","getSelectShippingOptionError","isPending","isSelectingShippingOption","isCustomerStepPending","isPaymentStepPending","createCheckoutStoreSelector","availableShippingOptions","createCheckoutStoreErrorSelector","getLoadCheckoutError","getUpdateCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getInitializeCustomerError","getUpdateBillingAddressError","getUpdateShippingAddressError","getDeleteConsignmentError","getUpdateConsignmentError","getCreateConsignmentsError","getInitializeShippingError","getApplyStoreCreditError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","createCheckoutStoreStatusSelector","some","isLoadingCheckout","isUpdatingCheckout","isSubmittingOrder","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isInitializingCustomer","isUpdatingBillingAddress","isUpdatingShippingAddress","isUpdatingConsignment","isDeletingConsignment","isCreatingConsignments","isInitializingShipping","isApplyingStoreCredit","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","ErrorMessageTransformer","_messageCustomizer","trim","checkout_service","CheckoutService","_countryActionCreator","_couponActionCreator","_errorActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","isDevelopment","projection","_errorTransformer","error_message_transformer","isCheckoutServiceError","_selectorsFactory","_storeProjection","Synchronize","initial","notifyState","_dispatch","loadCheckoutAction","loadConfigAction","finalizeOrderIfNeeded","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","continueAsGuest","deinitializeShipping","assignItemsToAddress","unassignItemsToAddress","selectConsignmentShippingOption","updateBillingAddress","initializeSpamProtection","createCheckoutService","bigpay_client_","setHost","bigpayBaseUrl","createPaymentClient","orderRequestSender","google_recaptcha","google_recaptcha_script_loader","consignment_action_creator","consignment_request_sender","country_action_creator","country_request_sender","coupon_action_creator","coupon_request_sender","customer_strategy_action_creator","remoteCheckoutRequestSender","amazon_pay_customer_strategy","braintree_visacheckout_customer_strategy","chasepay_customer_strategy","square_customer_strategy","masterpass_customer_strategy","default_customer_strategy","customer_action_creator","customer_request_sender","createCustomerStrategyRegistry","error_action_creator","gift_certificate_action_creator","gift_certificate_request_sender","instrument_action_creator","instrument_request_sender","shipping_country_action_creator","shipping_country_request_sender","shipping_strategy_action_creator","consignmentRequestSender","consignmentActionCreator","amazon_pay_shipping_strategy","default_shipping_strategy","createShippingStrategyRegistry","handleFrameLoadedEvent","hasAttribute","setAttribute","isCustomError","iframe_embedded_checkout_messenger","IframeEmbeddedCheckoutMessenger","_untargetedMessagePoster","_messageHandlers","postComplete","_postMessage","postError","_transformError","postFrameError","untargeted","postFrameLoaded","postLoaded","postSignedOut","receiveStyles","handler","_notifyMessageHandlers","noop_embedded_checkout_messenger","NoopEmbeddedCheckoutMessenger","createEmbeddedCheckoutMessenger","parentWindow","parentOrigin","language_service","LanguageService","_logger","_transformConfig","locales","translations","_locale","_locales","_translations","_formatters","mapKeys","translationKey","KEY_PREFIX","getLocale","_hasTranslations","translate","prefixedKey","messageFormat","external_messageformat_","compile","_transformData","output","defaultTranslations","_flattenObject","parentKey","resultKey","createLanguageService","CurrencyFormatter","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","positiveAmount","abs","_toFixed","decimalAmount","parsedIntegerAmount","precision","currency_service","CurrencyService","_storeConfig","_customerFormatter","currency_formatter","_storeFormatter","toCustomerCurrency","exchangeRate","toStoreCurrency","createCurrencyService","create_checkout_button_initializer","embed_checkout","ButtonType","ButtonColor","GooglePayPaymentProcessor","_googlePayScriptLoader","_googlePayInitializer","_consigmentActionCreator","buttonType","buttonColor","Short","Default","_googlePayClient","loadPaymentData","_getPaymentDataRequest","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","googlePay","paymentDataRequest","_getGooglePayClient","_paymentDataRequest","isReadyToPay","google","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","companyName","address3","administrativeArea","postPaymentData","remoteBillingAddress","googlePayAddressMapped","GooglePayScriptLoader","createGooglePayPaymentProcessor","initializer","googlepay_payment_processor","googlepay_script_loader","mapToInternalCart","promotions","notifications","map_to_internal_line_items","map_to_internal_coupon","promotion","banners","banner","placeholders","messageHtml","certificate","map_to_internal_gift_certificate","isShippingRequired","taxSubtotal","UnableToContinueAsGuestError","billing_address_action_creator_BillingAddressActionCreator","BillingAddressActionCreator","unable_to_continue_as_guest_error","billingAddressRequestBody","existingBillingAddressRequestBody","_createOrUpdateBillingAddress"],"mappings":"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AASvsB,SAASsvC,GAAoBslB,OAAQ,WAC1C,WAAIC,GACAt8D,EACA63D,EACAC,EACA,IAAI8D,GACA57D,EACA83D,EACA4C,EACA,IAAImB,GAAe,IAAIC,GAAqB5nC,QAKxDF,EAASvsB,SAASsvC,GAAoBwlB,eAAgB,WAClD,WAAIC,GACAx8D,EACA63D,EACA,IAAIhjC,GAAA,EAAmBX,MAI/BF,EAASvsB,SAASsvC,GAAoB0lB,sBAAuB,WACzD,WAAID,GACAx8D,EACA63D,EACA,IAAIhjC,GAAA,EAAmBX,MAI/BF,EAASvsB,SAASsvC,GAAoB2lB,SAAU,WAC5C,WAAIC,GACA38D,EACA63D,EACAC,EACAjkC,KAIRG,EAASvsB,SAASsvC,GAAoB6lB,OAAQ,WAC1C,WAAIC,GACA78D,EACAo0B,EACAyjC,EACAC,EACA4C,EACAK,EACApnC,EACA,IAAImpC,GAAmB5oC,MAI/BF,EAASvsB,SAASsvC,GAAoBK,yBAA0B,WAC5D,WAAI2lB,GACA/8D,EACA63D,KAIR7jC,EAASvsB,SAASsvC,GAAoBimB,UAAW,WAC7C,WAAIC,GACAj9D,EACA63D,EACAC,EACA4C,EACAhB,KAIR1lC,EAASvsB,SAASsvC,GAAoBtiB,iBAAkB,WACpD,WAAIyoC,GACAl9D,EACA63D,EACAC,EACA4C,EACAhB,KAIR1lC,EAASvsB,SAASsvC,GAAoBjiB,wBAAyB,WAC3D,WAAIooC,GACAl9D,EACA63D,EACAC,EACA4C,EACAhB,GACA,KAIR1lC,EAASvsB,SAASsvC,GAAoBomB,wBAAyB,WAC3D,WAAIC,GACAp9D,EACAo0B,EACAsmC,EACAK,EACAjD,EACAD,EACAzrB,EAA4ClY,EAAcP,GAC1D,IAAI0pC,EAAyBnpC,MAIrCF,EAASvsB,SAASsvC,GAAoBumB,UAAW,WAC7C,WAAIvQ,GACA/sD,EACAo0B,EACAyjC,EACAC,EACA4C,EACAK,EACApnC,EACA,IAAI4pC,EAAqBrpC,GACzB,IAAIspC,GAAgBtpC,MAI5BF,EAASvsB,SAASsvC,GAAoB0mB,qBAAsB,WACxD,WAAIrO,GACApvD,EAC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","file":"checkout-sdk.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 150);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","module.exports = require(\"rxjs\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","module.exports = require(\"@bigcommerce/memoize\");","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentMethod,\n    MissingPaymentToken,\n    MissingShippingAddress,\n    MissingSpamProtectionToken,\n}\n\n/**\n * Throw this error when data that is expected to exist is missing. Usually it\n * is due to the fact that certain data has not been retrieved from or saved to\n * the server yet. And such data is required to perform certain actions.\n */\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingBillingAddress:\n        return 'Unable to proceed because billing address data is unavailable.';\n\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentToken:\n        return 'Unable to proceed because the token required to submit a payment is missing.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    case MissingDataErrorType.MissingShippingAddress:\n        return 'Unable to proceed because shipping address data is unavailable.';\n\n    case MissingDataErrorType.MissingSpamProtectionToken:\n        return 'Unable to proceed because spam protection token is not provided.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config/config-actions';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","module.exports = require(\"rxjs/operators\");","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { VaultAccessToken } from './instrument';\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction =\n    LoadInstrumentsAction |\n    DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    LoadInstrumentsRequestedAction |\n    LoadInstrumentsSucceededAction |\n    LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    DeleteInstrumentRequestedAction |\n    DeleteInstrumentSucceededAction |\n    DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction extends Action<InstrumentsResponseBody, VaultAccessToken> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction extends Action<InstrumentsResponseBody, VaultAccessToken & { instrumentId: string }> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","import EmbeddedCheckoutError from './embedded-checkout-error';\nimport EmbeddedContentOptions from './iframe-content/embedded-content-options';\n\nexport enum EmbeddedCheckoutEventType {\n    CheckoutComplete = 'CHECKOUT_COMPLETE',\n    CheckoutError = 'CHECKOUT_ERROR',\n    CheckoutLoaded = 'CHECKOUT_LOADED',\n    FrameError = 'FRAME_ERROR',\n    FrameLoaded = 'FRAME_LOADED',\n    SignedOut = 'SIGNED_OUT',\n}\n\nexport interface EmbeddedCheckoutEventMap {\n    [EmbeddedCheckoutEventType.CheckoutComplete]: EmbeddedCheckoutCompleteEvent;\n    [EmbeddedCheckoutEventType.CheckoutError]: EmbeddedCheckoutErrorEvent;\n    [EmbeddedCheckoutEventType.CheckoutLoaded]: EmbeddedCheckoutLoadedEvent;\n    [EmbeddedCheckoutEventType.FrameError]: EmbeddedCheckoutFrameErrorEvent;\n    [EmbeddedCheckoutEventType.FrameLoaded]: EmbeddedCheckoutFrameLoadedEvent;\n    [EmbeddedCheckoutEventType.SignedOut]: EmbeddedCheckoutSignedOutEvent;\n}\n\nexport type EmbeddedCheckoutEvent = (\n    EmbeddedCheckoutCompleteEvent |\n    EmbeddedCheckoutErrorEvent |\n    EmbeddedCheckoutFrameErrorEvent |\n    EmbeddedCheckoutFrameLoadedEvent |\n    EmbeddedCheckoutLoadedEvent |\n    EmbeddedCheckoutSignedOutEvent\n);\n\nexport interface EmbeddedCheckoutCompleteEvent {\n    type: EmbeddedCheckoutEventType.CheckoutComplete;\n}\n\nexport interface EmbeddedCheckoutErrorEvent {\n    type: EmbeddedCheckoutEventType.CheckoutError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutLoadedEvent {\n    type: EmbeddedCheckoutEventType.CheckoutLoaded;\n}\n\nexport interface EmbeddedCheckoutFrameErrorEvent {\n    type: EmbeddedCheckoutEventType.FrameError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutFrameLoadedEvent {\n    type: EmbeddedCheckoutEventType.FrameLoaded;\n    payload?: EmbeddedContentOptions;\n}\n\nexport interface EmbeddedCheckoutSignedOutEvent {\n    type: EmbeddedCheckoutEventType.SignedOut;\n}\n","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\n/**\n * This error type should not be constructed directly. It is a base class for\n * all custom errors thrown in this library.\n */\nexport default abstract class StandardError extends Error implements CustomError {\n    name = 'StandardError';\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction = InitializeRemoteBillingAction |\n    InitializeRemoteShippingAction |\n    InitializeRemotePaymentAction |\n    SignOutRemoteCustomerAction |\n    LoadRemoteSettingsAction |\n    UpdateRemoteCheckoutAction;\n\nexport type InitializeRemoteBillingAction = InitializeRemoteBillingSucceededAction |\n    InitializeRemoteBillingFailedAction |\n    InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction = InitializeRemoteShippingSucceededAction |\n    InitializeRemoteShippingFailedAction |\n    InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction = InitializeRemotePaymentSucceededAction |\n    InitializeRemotePaymentFailedAction |\n    InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction = SignOutRemoteCustomerSucceededAction |\n    SignOutRemoteCustomerFailedAction |\n    SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction = LoadRemoteSettingsSucceededAction |\n    LoadRemoteSettingsRequestedAction |\n    LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\n/**\n * Throw this error if we are unable to make a request to the server. It wraps\n * any server response into a JS error object.\n */\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        { message, errors }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {}\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum StoreCreditActionType {\n    ApplyStoreCreditRequested = 'APPLY_STORE_CREDIT_REQUESTED',\n    ApplyStoreCreditSucceeded = 'APPLY_STORE_CREDIT_SUCCEEDED',\n    ApplyStoreCreditFailed = 'APPLY_STORE_CREDIT_FAILED',\n}\n\nexport type StoreCreditAction =\n    ApplyStoreCreditAction;\n\nexport type ApplyStoreCreditAction =\n    ApplyStoreCreditRequestedAction |\n    ApplyStoreCreditSucceededAction |\n    ApplyStoreCreditFailedAction;\n\nexport interface ApplyStoreCreditRequestedAction extends Action {\n    type: StoreCreditActionType.ApplyStoreCreditRequested;\n}\n\nexport interface ApplyStoreCreditSucceededAction extends Action<Checkout> {\n    type: StoreCreditActionType.ApplyStoreCreditSucceeded;\n}\n\nexport interface ApplyStoreCreditFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: StoreCreditActionType.ApplyStoreCreditFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { isPlainObject as lodashIsPlainObject } from 'lodash';\n\n// We need this wrapper because Lodash's version doesn't act as a type guard\nexport default function isPlainObject(value: any): value is object {\n    return lodashIsPlainObject(value);\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    LoadCountriesRequestedAction |\n    LoadCountriesSucceededAction |\n    LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction = LoadShippingCountriesRequestedAction |\n    LoadShippingCountriesSucceededAction |\n    LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the client library of a payment method fails\n * to load, or for some reason, it is inaccessible.\n */\nexport default class PaymentMethodClientUnavailableError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed because the client library of a payment method is not loaded or ready to be used.');\n\n        this.name = 'PaymentMethodClientUnavailableError';\n        this.type = 'payment_method_client_unavailable';\n    }\n}\n","module.exports = require(\"@bigcommerce/script-loader\");","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import StandardError from './standard-error';\n\n/**\n * This error should be thrown when a method is unable to proceed because the\n * caller has not provided all the arguments according to their requirements,\n * i.e.: if an argument is missing or it is not the expected data type.\n */\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType\n): object is TEvent {\n    return object.type === type;\n}\n","module.exports = require(\"shallowequal\");","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","module.exports = require(\"@bigcommerce/form-poster\");","module.exports = require(\"local-storage-fallback\");","module.exports = require(\"reselect\");","import { parseUrl } from '../common/url';\n\nexport default class IframeEventPoster<TEvent> {\n    private _targetOrigin: string;\n\n    constructor(\n        targetOrigin: string,\n        private _targetWindow?: Window\n    ) {\n        this._targetOrigin = targetOrigin === '*' ? '*' : parseUrl(targetOrigin).origin;\n    }\n\n    post(event: TEvent): void {\n        if (window === this._targetWindow) {\n            return;\n        }\n\n        if (!this._targetWindow) {\n            throw new Error('Unable to post message becauset target window is not set.');\n        }\n\n        this._targetWindow.postMessage(event, this._targetOrigin);\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum SpamProtectionActionType {\n    InitializeFailed = 'SPAM_PROTECTION_INITIALIZE_FAILED',\n    InitializeSucceeded = 'SPAM_PROTECTION_INITIALIZE_SUCCEEDED',\n    InitializeRequested = 'SPAM_PROTECTION_INITIALIZE_REQUESTED',\n    ExecuteRequested = 'SPAM_PROTECTION_EXECUTE_REQUESTED',\n    Completed = 'SPAM_PROTECTION_COMPLETED',\n    SubmitFailed = 'SPAM_PROTECTION_SUBMIT_FAILED',\n}\n\nexport type SpamProtectionAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction |\n    ExecuteRequestedAction |\n    CompletedAction |\n    SubmitFailedAction;\n\nexport interface InitializeRequestedAction extends Action {\n    type: SpamProtectionActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: SpamProtectionActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.InitializeFailed;\n}\n\nexport interface ExecuteRequestedAction extends Action {\n    type: SpamProtectionActionType.ExecuteRequested;\n}\n\nexport interface CompletedAction extends Action<string> {\n    type: SpamProtectionActionType.Completed;\n}\n\nexport interface SubmitFailedAction extends Action {\n    type: SpamProtectionActionType.SubmitFailed;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are unable to successfully submit a server request\n * using a payment method because the method has invalid configuration or is in\n * an invalid state.\n */\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, { message: 'There is a problem processing your payment. Please try again later.' });\n\n        this.name = 'PaymentMethodInvalidError';\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { memoize } from '@bigcommerce/memoize';\nimport { createSelector as defaultSelectorCreator } from 'reselect';\n\n/**\n * Decorate selector creators with the ability to memoize the return value of\n * their combiner if it is a function (which effectively works as a partially\n * applied combiner).\n */\nexport default function withMemoizedCombiner<T extends typeof defaultSelectorCreator>(\n    creator: T\n): T {\n    return ((...args: any[]) => {\n        const combiner = args.pop();\n\n        // Reselect's default `createSelector` has many overloads. To avoid having\n        // to redefine all of them, we're using `any` to bypass the typechecker.\n        return (creator as any)(...args, (...combinerArgs: any[]) => {\n            // Although there are many overloads, all of them have the last argument\n            // as the combiner.\n            const result = combiner(...combinerArgs);\n\n            if (typeof result === 'function') {\n                return memoize(result);\n            }\n\n            return result;\n        });\n    }) as T;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    @cachableAction\n    loadPaymentMethod(methodId: string, options?: RequestOptions & ActionOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import EmbeddedCheckoutStyles from '../embedded-checkout-styles';\n\nexport enum EmbeddedContentEventType {\n    StyleConfigured = 'STYLE_CONFIGURED',\n}\n\nexport interface EmbeddedContentEventMap {\n    [EmbeddedContentEventType.StyleConfigured]: EmbeddedContentStyleConfiguredEvent;\n}\n\nexport type EmbeddedContentEvent = (\n    EmbeddedContentStyleConfiguredEvent\n);\n\nexport interface EmbeddedContentStyleConfiguredEvent {\n    type: EmbeddedContentEventType.StyleConfigured;\n    payload: EmbeddedCheckoutStyles;\n}\n","import { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<TEventMap extends IframeEventMap<keyof TEventMap>> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap>;\n    private _sourceOrigin: string;\n\n    constructor(\n        sourceOrigin: string\n    ) {\n        this._sourceOrigin = parseUrl(sourceOrigin).origin;\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        listeners.push(listener);\n    }\n\n    removeListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType]): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach(listener => listener(event));\n    }\n\n    @bind\n    private _handleMessage(event: MessageEvent): void {\n        if ((event.origin !== this._sourceOrigin) || !isIframeEvent(event.data, event.data.type)) {\n            return;\n        }\n\n        this.trigger(event.data);\n    }\n}\n\ntype EventListeners<TEventMap> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[keyof TEventMap]) => void>;\n};\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[];\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport { GooglePayCreator } from '../googlepay';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/google-payment.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVisaCheckout,\n    GooglePayBraintreeSDK,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>;\n        paypal?: Promise<BraintreeDataCollector>;\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n            this._teardown(this._googlePay),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\n/**\n * Throw this error if a method requires a certain initialization call to be\n * made first. Some objects can be constructed but they cannot be used until a\n * separate initialization call is made.\n */\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.SpamProtectionNotInitialized:\n        return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","export default class AmountTransformer {\n    constructor(private _decimalPlaces: number) {}\n\n    toInteger(amount: number): number {\n        return Math.round(amount * Math.pow(10, this._decimalPlaces));\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Url from './url';\n\nexport default function parseUrl(url: string): Url {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    return {\n        hash: anchor.hash,\n        hostname: anchor.hostname,\n        href: anchor.href,\n        origin: anchor.origin,\n        pathname: anchor.pathname,\n        port: anchor.port,\n        protocol: anchor.protocol,\n        search: anchor.search,\n    };\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    _: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                return descriptor.value;\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from '@bigcommerce/memoize';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(\n    fn: TFunction\n): TFunction {\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize(store => from(action(store)).pipe(shareReplay()));\n        }\n\n        return action;\n    }\n\n    return memoize(decoratedFn as TFunction);\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nexport default function bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nexport default function bindDecorator<T extends Constructor<object>>(target: T): T;\nexport default function bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(_: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this);\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","module.exports = require(\"iframe-resizer\");","module.exports = require(\"iframe-resizer/js/iframeResizer.contentWindow\");","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {});\n    }\n\n    return object;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\n        return concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig({ ...options, useCache: true }),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig(),\n            defer(async () => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                const { body } = await this._checkoutRequestSender.loadCheckout(context.checkoutId, options);\n\n                return createAction(CheckoutActionType.LoadCheckoutSucceeded, body);\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options);\n        };\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { CheckoutIncludes } from '../checkout/checkout-params';\nimport CheckoutRequestSender from '../checkout/checkout-request-sender';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentsRequestBody,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentUpdateRequestBody\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart()\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment({\n                id: existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems,\n            }, options)(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._addLineItems(\n                    consignment.lineItems,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: [CheckoutIncludes.AvailableShippingOptions],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getConsignmentRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getConsignmentRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return {\n            shippingAddress,\n            lineItems: (cart.lineItems && cart.lineItems.physicalItems || [])\n                .map(item => ({\n                    itemId: item.id,\n                    quantity: item.quantity,\n                })\n            ),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart).map(existingItem => {\n            const sharedItem = lineItems.find(lineItem => lineItem.itemId === existingItem.itemId);\n\n            return {\n                ...existingItem,\n                quantity: sharedItem ? (existingItem.quantity - sharedItem.quantity) : existingItem.quantity,\n            };\n        }).filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map(itemId => {\n            const item = cart.lineItems.physicalItems.find(lineItem => lineItem.id === itemId );\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(checkoutId: string, consignments: ConsignmentsRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: consignments, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateConsignment(checkoutId: string, consignment: ConsignmentUpdateRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n\n    deleteConsignment(checkoutId: string, consignmentId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, { params: DEFAULT_PARAMS, headers, timeout });\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if there is an unexpected error and it is not possible to\n * recover from unless the shopper creates a new checkout session.\n */\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, {\n            message: message || 'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.name = 'UnrecoverableError';\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length ?\n            errors.map(message => ({ code: body.type, message })) :\n            [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors.reduce((result: string[], error) => {\n        if (error) {\n            return [...result, error];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string; message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody, {\n    InternalErrorResponseBody,\n    StorefrontErrorResponseBody\n} from './error-response-body';\nimport { RequestError, TimeoutError } from './errors';\nimport mapFromInternalErrorResponse from './errors/map-from-internal-error-response';\nimport mapFromPaymentErrorResponse from './errors/map-from-payment-error-response';\nimport mapFromStorefrontErrorResponse from './errors/map-from-storefront-error-response';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) => mapFromInternalErrorResponse(response, message));\n        this.register('storefront', (response, message) => mapFromStorefrontErrorResponse(response, message));\n        this.register('payment', (response, message) => mapFromPaymentErrorResponse(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): RequestError {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ?\n                internalType :\n                'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && error.code && this._factoryMethods[error.code]) {\n            return error.code;\n        }\n\n        return 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string';\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string\n): RequestError<StorefrontErrorResponseBody> {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [{\n            code: body.code || body.type,\n            message: body.detail || body.title,\n        }],\n    });\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<TState extends { [key: string]: any }, TAction extends Action>(\n    state: TState,\n    action: TAction\n): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, value => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","import isEqual from './is-equal';\n\n/**\n * Replace the current value with a new value if the former is different to the\n * latter.\n */\nexport default function replace<T>(currentValue: T, newValue?: T): T {\n    if (newValue === undefined || isEqual(currentValue, newValue)) {\n        return currentValue;\n    }\n\n    return newValue;\n}\n","import isEqual from './is-equal';\n\n/**\n * Set a new value to an object under a key if the new value is different to the\n * current value of the key.\n */\nexport default function objectSet<T extends { [key: string]: any }, K extends keyof T>(\n    object: T | undefined,\n    key: K,\n    value: T[K]\n): T {\n    if (object && object.hasOwnProperty(key) && isEqual(object[key], value)) {\n        return object;\n    }\n\n    return {\n        ...object as any,\n        [key]: value,\n    };\n}\n","import BillingAddress from './billing-address';\n\nexport default interface BillingAddressState {\n    data?: BillingAddress;\n    errors: BillingAddressErrorsState;\n    statuses: BillingAddressStatusesState;\n}\n\nexport interface BillingAddressErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n    continueAsGuestError?: Error;\n}\n\nexport interface BillingAddressStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n    isContinuingAsGuest?: boolean;\n}\n\nexport const DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet, replace } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState, DEFAULT_STATE } from './billing-address-state';\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return replace(data, action.payload && action.payload.billingAddress);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(errors, 'continueAsGuestError', undefined);\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return objectSet(errors, 'continueAsGuestError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n        return objectSet(statuses, 'isContinuingAsGuest', true);\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(statuses, 'isContinuingAsGuest', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { isArray } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\nimport replace from './replace';\n\nexport interface ArrayReplaceOptions {\n    matchObject(objectA: any, objectB: any): boolean;\n}\n\nexport default function arrayReplace<T>(currentArray: T[] | undefined, newArray: T[], options?: ArrayReplaceOptions): T[];\nexport default function arrayReplace<T>(currentArray: T[], newArray?: T[], options?: ArrayReplaceOptions): undefined;\nexport default function arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined;\nexport default function arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined {\n    const { matchObject = (a: any, b: any) => a.id === b.id } = options || {};\n\n    // Return the new array if the current array does not exist\n    if (!currentArray) {\n        return newArray;\n    }\n\n    // If the new array does not exist, or the current array is strictly equal\n    // to the new array, exit early and return the current array so that the\n    // object reference doesn't change\n    if (!newArray || currentArray === newArray) {\n        return currentArray;\n    }\n\n    // Otherwise, try to replace the items of the current array with the new\n    // array. If the item from the two arrays are the same, keep the current\n    // one. Do it recursively until all arrays are replaced.\n    let sameAsCurrentCount = 0;\n    let sameAsNewCount = 0;\n\n    const countSameAsReplaced = <T>(replacedValue: T, currentValue: T, newValue: T): T => {\n        sameAsCurrentCount += replacedValue === currentValue ? 1 : 0;\n        sameAsNewCount += replacedValue === newValue ? 1 : 0;\n\n        return replacedValue;\n    };\n\n    const result = newArray.map((newItem, index) => {\n        const currentItem = currentArray && currentArray[index];\n\n        if (isPlainObject(currentItem) && isPlainObject(newItem)) {\n            if (matchObject(currentItem, newItem)) {\n                return countSameAsReplaced(\n                    objectMerge(currentItem, newItem),\n                    currentItem,\n                    newItem\n                );\n            }\n\n            return countSameAsReplaced(\n                replace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        if (isArray(currentItem) && isArray(newItem)) {\n            return countSameAsReplaced(\n                arrayReplace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        return countSameAsReplaced(\n            replace(currentItem, newItem),\n            currentItem,\n            newItem\n        );\n    }) as T[];\n\n    // If all items in the result are identical to the current array, and the\n    // current array and the new array have the same size, simply return the\n    // current array instead of the result.\n    if (sameAsCurrentCount === newArray.length && (currentArray && currentArray.length === newArray.length)) {\n        return currentArray;\n    }\n\n    // If all items in the result are identical to the new array, simply return\n    // the new array.\n    if (sameAsNewCount === newArray.length) {\n        return newArray;\n    }\n\n    return result;\n}\n","import { isArray } from 'lodash';\n\nimport arrayReplace from './array-replace';\nimport isPlainObject from './is-plain-object';\nimport objectSet from './object-set';\n\nexport default function objectMerge<T extends object>(currentObject: T, newObject?: Partial<T>): T;\nexport default function objectMerge<T extends object>(currentObject: T | undefined, newObject: Partial<T>): Partial<T>;\nexport default function objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | undefined;\nexport default function objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | Partial<T> | undefined {\n    if (!currentObject) {\n        return newObject;\n    }\n\n    // If the new object does not exist but the current object does, or the new\n    // object is strictly equal to the current object, return the current object\n    if (!newObject || currentObject === newObject) {\n        return currentObject;\n    }\n\n    // If both objects exist, but some values might be different, perform a merge.\n    // Retain values that are equal and only replace them with the new values if\n    // they are different.\n    return (Object.keys(newObject) as Array<keyof T>)\n        .reduce((result, key) => {\n            const currentValue = result[key];\n            const newValue = newObject[key];\n\n            if (isPlainObject(currentValue) && isPlainObject(newValue)) {\n                return objectSet(result, key, objectMerge(currentValue, newValue));\n            }\n\n            if (isArray(currentValue) && isArray(newValue)) {\n                return objectSet(result, key, arrayReplace(currentValue, newValue) as any);\n            }\n\n            return objectSet(result, key, newValue as any);\n        }, currentObject);\n}\n","import Cart from './cart';\n\nexport default interface CartState {\n    data?: Cart;\n    errors: CartErrorsState;\n    statuses: CartStatusesState;\n}\n\nexport interface CartErrorsState {\n    loadError?: Error;\n}\n\nexport interface CartStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing/billing-address-actions';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType } from '../coupon/coupon-actions';\nimport { GiftCertificateAction, GiftCertificateActionType } from '../coupon/gift-certificate-actions';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState, DEFAULT_STATE } from './cart-state';\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectMerge(data, action.payload && action.payload.cart);\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n","import { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonState {\n    data: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonDataState | undefined\n    };\n    errors: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonErrorsState | undefined\n    };\n    statuses: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonStatusesState | undefined\n    };\n}\n\nexport interface CheckoutButtonDataState {\n    initializedContainers: {\n        [key: string]: boolean;\n    };\n}\n\nexport interface CheckoutButtonErrorsState {\n    initializeError?: Error;\n    deinitializeError?: Error;\n}\n\nexport interface CheckoutButtonStatusesState {\n    isInitializing?: boolean;\n    isDeinitializing?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonDataState, CheckoutButtonErrorsState, CheckoutButtonStatusesState, DEFAULT_STATE } from './checkout-button-state';\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonDataState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        if (!action.meta || !action.meta.containerId) {\n            return data;\n        }\n\n        return objectMerge(data, {\n            initializedContainers: {\n                [action.meta.containerId]: true,\n            },\n        });\n\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(data, 'initializedContainers', {});\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return objectSet(errors, 'initializeError', undefined);\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return objectSet(errors, 'initializeError', action.payload);\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(errors, 'deinitializeError', undefined);\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return objectSet(errors, 'deinitializeError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return objectSet(statuses, 'isInitializing', true);\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return objectSet(statuses, 'isInitializing', false);\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return objectSet(statuses, 'isDeinitializing', true);\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(statuses, 'isDeinitializing', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Config from './config';\n\nexport default interface ConfigState {\n    data?: Config;\n    meta?: ConfigMetaState;\n    errors: ConfigErrorsState;\n    statuses: ConfigStatusesState;\n}\n\nexport interface ConfigMetaState {\n    externalSource?: string;\n}\n\nexport interface ConfigErrorsState {\n    loadError?: Error;\n}\n\nexport interface ConfigStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState, DEFAULT_STATE } from './config-state';\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case ConfigActionType.LoadConfigFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport Coupon from './coupon';\n\nexport default interface CouponState {\n    data?: Coupon[];\n    errors: CouponErrorsState;\n    statuses: CouponStatusesState;\n}\n\nexport interface CouponErrorsState {\n    applyCouponError?: RequestError<StorefrontErrorResponseBody>;\n    removeCouponError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface CouponStatusesState {\n    isApplyingCoupon?: boolean;\n    isRemovingCoupon?: boolean;\n}\n\nexport const DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState, DEFAULT_STATE } from './coupon-state';\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return arrayReplace(data, action.payload && action.payload.coupons);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return objectSet(errors, 'applyCouponError', undefined);\n\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(errors, 'applyCouponError', action.payload);\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return objectSet(errors, 'removeCouponError', undefined);\n\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(errors, 'removeCouponError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return objectSet(statuses, 'isApplyingCoupon', true);\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(statuses, 'isApplyingCoupon', false);\n\n    case CouponActionType.RemoveCouponRequested:\n        return objectSet(statuses, 'isRemovingCoupon', true);\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(statuses, 'isRemovingCoupon', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport GiftCertificate from './gift-certificate';\n\nexport default interface GiftCertificateState {\n    data?: GiftCertificate[];\n    errors: GiftCertificateErrorsState;\n    statuses: GiftCertificateStatusesState;\n}\n\nexport interface GiftCertificateErrorsState {\n    applyGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n    removeGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface GiftCertificateStatusesState {\n    isApplyingGiftCertificate?: boolean;\n    isRemovingGiftCertificate?: boolean;\n}\n\nexport const DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { DEFAULT_STATE, GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return arrayReplace(data, action.payload && action.payload.giftCertificates);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return objectSet(errors, 'applyGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(errors, 'applyGiftCertificateError', action.payload);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectSet(errors, 'removeGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(errors, 'removeGiftCertificateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return objectSet(statuses, 'isApplyingGiftCertificate', true);\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(statuses, 'isApplyingGiftCertificate', false);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return objectSet(statuses, 'isRemovingGiftCertificate', true);\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(statuses, 'isRemovingGiftCertificate', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Customer from './customer';\n\nexport default interface CustomerState {\n    data?: Customer;\n}\n\nexport const DEFAULT_STATE: CustomerState = {};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { objectMerge } from '../common/utility';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectMerge(data, action.payload && action.payload.customer);\n\n    default:\n        return data;\n    }\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyDataState, CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction\n): CustomerStrategyDataState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return objectMerge(errors, {\n            signInError: undefined,\n            signInMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignInFailed:\n        return objectMerge(errors, {\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return objectMerge(errors, {\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return objectMerge(errors, {\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignInRequested:\n        return objectMerge(statuses, {\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return objectMerge(statuses, {\n            isSigningIn: false,\n            signInMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return objectMerge(statuses, {\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return objectMerge(statuses, {\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         });\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         });\n\n    default:\n        return statuses;\n    }\n}\n","import Country from './country';\n\nexport default interface CountryState {\n    data?: Country[];\n    errors: CountryErrorsState;\n    statuses: CountryStatusesState;\n}\n\nexport interface CountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface CountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, { CountryErrorsState, CountryStatusesState, DEFAULT_STATE } from './country-state';\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesSucceeded:\n        return arrayReplace(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction\n): CountryErrorsState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n    case CountryActionType.LoadCountriesSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CountryActionType.LoadCountriesFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction\n): CountryStatusesState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CountryActionType.LoadCountriesSucceeded:\n    case CountryActionType.LoadCountriesFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport { InternalOrderMeta, InternalOrderPayment } from './internal-order';\nimport Order from './order';\n\nexport default interface OrderState {\n    data?: OrderDataState;\n    meta?: OrderMetaState;\n    errors: OrderErrorsState;\n    statuses: OrderStatusesState;\n}\n\nexport type OrderDataState = Omit<Order, 'billingAddress' | 'coupons'>;\n\nexport interface OrderMetaState extends InternalOrderMeta {\n    token?: string;\n    orderToken?: string;\n    callbackUrl?: string;\n    payment?: InternalOrderPayment;\n    spamProtectionToken?: string;\n}\n\nexport interface OrderErrorsState {\n    loadError?: Error;\n    submitError?: Error;\n    finalizeError?: Error;\n}\n\nexport interface OrderStatusesState {\n    isLoading?: boolean;\n    isSubmitting?: boolean;\n    isFinalizing?: boolean;\n}\n\nexport const DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { DEFAULT_STATE, OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\nimport { SpamProtectionAction, SpamProtectionActionType } from './spam-protection';\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return objectMerge(data, omit(action.payload, ['billingAddress', 'coupons'])) as OrderDataState;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction | SpamProtectionAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectMerge(meta, {\n            ...action.meta,\n            callbackUrl: action.payload && action.payload.order.callbackUrl,\n            orderToken: action.payload && action.payload.order.token,\n            payment: action.payload && action.payload.order && action.payload.order.payment,\n        });\n\n    case SpamProtectionActionType.Completed:\n        return objectSet(meta, 'spamProtectionToken', action.payload);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport default interface PaymentMethodState {\n    data?: PaymentMethod[];\n    meta?: PaymentMethodMeta;\n    errors: PaymentMethodErrorsState;\n    statuses: PaymentMethodStatusesState;\n}\n\nexport interface PaymentMethodErrorsState {\n    loadMethodId?: string;\n    loadError?: Error;\n    loadMethodError?: Error;\n}\n\nexport interface PaymentMethodStatusesState {\n    loadMethodId?: string;\n    isLoading?: boolean;\n    isLoadingMethod?: boolean;\n}\n\nexport const DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, mergeOrPush, objectMerge, objectSet } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE, PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return mergeOrPush(data || [], action.payload, action.payload && {\n            id: action.payload.id,\n            gateway: action.payload.gateway,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return arrayReplace(data, action.payload, {\n            matchObject: (methodA, methodB) => (\n                methodA.id === methodB.id && methodA.gateway === methodB.gateway\n            ),\n        });\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return objectMerge(meta, action.meta);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return objectMerge(errors, {\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return objectMerge(errors, {\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return objectMerge(statuses, {\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return objectMerge(statuses, {\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { findIndex, pick, pickBy } from 'lodash';\n\nimport { PartialDeep } from '../types';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(\n    array: T[],\n    item?: T,\n    predicate?: ((item: T) => boolean) | PartialDeep<T>\n): T[] {\n    if (!item) {\n        return array;\n    }\n\n    const defaultPredicate = pick(item, 'id');\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : (predicate || defaultPredicate));\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        const existingItem = array[index];\n\n        newArray[index] = isPlainObject(existingItem) && isPlainObject(item) ?\n            objectMerge(existingItem, item) :\n            item;\n    }\n\n    return newArray;\n}\n","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyDataState, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction\n): PaymentStrategyDataState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return objectMerge(errors, {\n            executeError: undefined,\n            executeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return objectMerge(errors, {\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return objectMerge(errors, {\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return objectMerge(errors, {\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return objectMerge(statuses, {\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return objectMerge(statuses, {\n            isExecuting: false,\n            executeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return objectMerge(statuses, {\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return objectMerge(statuses, {\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import Instrument, { VaultAccessToken } from './instrument';\n\nexport default interface InstrumentState {\n    data?: Instrument[];\n    meta?: InstrumentMeta;\n    errors: InstrumentErrorState;\n    statuses: InstrumentStatusState;\n}\n\nexport interface InstrumentErrorState {\n    deleteError?: Error;\n    failedInstrument?: string;\n    loadError?: Error;\n    vaultError?: Error;\n}\n\nexport interface InstrumentStatusState {\n    isDeleting?: boolean;\n    isLoading?: boolean;\n    isVaulting?: boolean;\n    deletingInstrument?: string;\n}\n\nexport type InstrumentMeta = VaultAccessToken;\n\nexport const DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../../common/utility';\n\nimport Instrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, { DEFAULT_STATE, InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Instrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction\n): Instrument[] {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return arrayReplace(data, action.payload && action.payload.vaultedInstruments || []);\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return arrayReplace(data, data.filter(instrument =>\n            instrument.bigpayToken !== (action.meta && action.meta.instrumentId)\n        ));\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction\n): InstrumentMeta | undefined {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return objectMerge(meta, action.meta);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction\n): InstrumentErrorState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return objectMerge(errors, {\n            deleteError: undefined,\n            failedInstrument: undefined,\n        });\n\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return objectMerge(errors, {\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction\n): InstrumentStatusState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n        return objectMerge(statuses, {\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        });\n\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return objectMerge(statuses, {\n            isDeleting: false,\n            deletingInstrument: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { AmazonPayRemoteCheckout } from './methods';\n\nexport default interface RemoteCheckoutState {\n    data: RemoteCheckoutStateData;\n}\n\nexport interface RemoteCheckoutStateData {\n    amazon?: AmazonPayRemoteCheckout;\n}\n\nexport const DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, { DEFAULT_STATE, RemoteCheckoutStateData } from './remote-checkout-state';\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout,\n    action: RemoteCheckoutAction\n): RemoteCheckout {\n    switch (action.type) {\n    case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n        return objectSet(data, 'billing' as any, action.payload && action.payload.billing);\n\n    case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n        return objectSet(data, 'shipping' as any, action.payload && action.payload.shipping);\n\n    case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n        return objectSet(data, 'settings', action.payload);\n\n    case RemoteCheckoutActionType.UpdateRemoteCheckout:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n","import Consignment from './consignment';\n\nexport default interface ConsignmentState {\n    data?: Consignment[];\n    errors: ConsignmentErrorsState;\n    statuses: ConsignmentStatusesState;\n}\n\nexport interface ConsignmentErrorsState {\n    loadError?: Error;\n    loadShippingOptionsError?: Error;\n    createError?: Error;\n    updateError: { [key: string]: Error | undefined };\n    deleteError: { [key: string]: Error | undefined };\n    updateShippingOptionError: { [key: string]: Error | undefined };\n}\n\nexport interface ConsignmentStatusesState {\n    isLoading?: boolean;\n    isLoadingShippingOptions?: boolean;\n    isCreating?: boolean;\n    isUpdating: { [key: string]: boolean };\n    isDeleting: { [key: string]: boolean };\n    isUpdatingShippingOption: { [key: string]: boolean };\n}\n\nexport const DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState, DEFAULT_STATE } from './consignment-state';\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CouponAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n        return arrayReplace(data, action.payload && action.payload.consignments);\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return arrayReplace(data, []);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return objectSet(errors, 'createError', undefined);\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return objectSet(errors, 'createError', action.payload);\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(errors, {\n                deleteError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                deleteError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateShippingOptionError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateShippingOptionError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return objectSet(statuses, 'isLoadingShippingOptions', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return objectSet(statuses, 'isLoadingShippingOptions', false);\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return objectSet(statuses, 'isCreating', true);\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return objectSet(statuses, 'isCreating', false);\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdating: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdating: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isDeleting: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isDeleting: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdatingShippingOption: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdatingShippingOption: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { Country } from '../geography';\n\nexport default interface ShippingCountryState {\n    data?: Country[];\n    errors: ShippingCountryErrorsState;\n    statuses: ShippingCountryStatusesState;\n}\n\nexport interface ShippingCountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface ShippingCountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, { DEFAULT_STATE, ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return arrayReplace(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction\n): ShippingCountryErrorsState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction\n): ShippingCountryStatusesState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyDataState, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction\n): ShippingStrategyDataState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return objectMerge(errors, {\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return objectMerge(errors, {\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return objectMerge(errors, {\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return objectMerge(errors, {\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return objectMerge(statuses, {\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return objectMerge(statuses, {\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return objectMerge(statuses, {\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return objectMerge(statuses, {\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet } from '../common/utility';\n\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\nimport StoreCreditState, { StoreCreditErrorsState, StoreCreditStatusesState } from './store-credit-state';\n\nconst DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function storeCreditReducer(\n    state: StoreCreditState = DEFAULT_STATE,\n    action: Action\n): StoreCreditState {\n    const reducer = combineReducers<StoreCreditState>({\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: StoreCreditErrorsState = DEFAULT_STATE.errors,\n    action: StoreCreditAction\n): StoreCreditErrorsState {\n    switch (action.type) {\n    case StoreCreditActionType.ApplyStoreCreditRequested:\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n        return objectSet(errors, 'applyError', undefined);\n\n    case StoreCreditActionType.ApplyStoreCreditFailed:\n        return objectSet(errors, 'applyError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: StoreCreditStatusesState = DEFAULT_STATE.statuses,\n    action: StoreCreditAction\n): StoreCreditStatusesState {\n    switch (action.type) {\n    case StoreCreditActionType.ApplyStoreCreditRequested:\n        return objectSet(statuses, 'isApplying', true);\n\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n    case StoreCreditActionType.ApplyStoreCreditFailed:\n        return objectSet(statuses, 'isApplying', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport Checkout from './checkout';\n\nexport default interface CheckoutState {\n    data?: CheckoutDataState;\n    errors: CheckoutErrorsState;\n    statuses: CheckoutStatusesState;\n}\n\nexport type CheckoutDataState = Omit<Checkout, 'billingAddress' | 'cart' | 'consignments' | 'coupons' | 'giftCertificates'>;\n\nexport interface CheckoutErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n}\n\nexport interface CheckoutStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\nimport { StoreCreditAction, StoreCreditActionType } from '../store-credit/store-credit-actions';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState, DEFAULT_STATE } from './checkout-state';\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction |\n        GiftCertificateAction | OrderAction | StoreCreditAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectMerge(data, omit(action.payload, [\n            'billingAddress',\n            'cart',\n            'consignments',\n            'customer',\n            'coupons',\n            'giftCertificates',\n        ])) as CheckoutDataState;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectSet(data, 'orderId', action.payload && action.payload.order.orderId) ;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends { [key: string]: object }>(map: T): T {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as T);\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { createSelector } from '../common/selector';\nimport { ConfigState } from '../config';\nimport { DEFAULT_STATE } from '../config/config-state';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\nexport default interface FormSelector {\n    getShippingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n    getBillingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n}\n\nexport type FormSelectorFactory = (state: ConfigState) => FormSelector;\n\nexport function createFormSelectorFactory(): FormSelectorFactory {\n    const getShippingAddressFields = createSelector(\n        (state: ConfigState) => state.data,\n        config => (countries: Country[] = [], countryCode: string) => {\n            const selectedCountry = find(countries, { code: countryCode });\n            const fields = config ? config.storeConfig.formFields.shippingAddressFields : [];\n\n            return fields.map((field: any) => processField(field, countries, selectedCountry));\n        }\n    );\n\n    const getBillingAddressFields = createSelector(\n        (state: ConfigState) => state.data,\n        config => (countries: Country[] = [], countryCode: string) => {\n            const selectedCountry = find(countries, { code: countryCode });\n            const fields = config ? config.storeConfig.formFields.billingAddressFields : [];\n\n            return fields.map((field: any) => processField(field, countries, selectedCountry));\n        }\n    );\n\n    function processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    function processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [] } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: false,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: true,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n\n    return memoizeOne((\n        state: ConfigState = DEFAULT_STATE\n    ): FormSelector => {\n        return {\n            getShippingAddressFields: getShippingAddressFields(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n        };\n    });\n}\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { createSelector } from '../common/selector';\n\nimport Consignment from './consignment';\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\nimport ShippingOption from './shipping-option';\n\nexport default interface ConsignmentSelector {\n    getConsignments(): Consignment[] | undefined;\n    getConsignmentById(id: string): Consignment | undefined;\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined;\n    getShippingOption(): ShippingOption | undefined;\n    getLoadError(): Error | undefined;\n    getCreateError(): Error | undefined;\n    getLoadShippingOptionsError(): Error | undefined;\n    getUnassignedItems(): PhysicalItem[];\n    getUpdateError(consignmentId?: string): Error | undefined;\n    getDeleteError(consignmentId?: string): Error | undefined;\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined;\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingShippingOptions(): boolean;\n    isCreating(): boolean;\n    isUpdating(consignmentId?: string): boolean;\n    isDeleting(consignmentId?: string): boolean;\n    isAssigningItems(address: AddressRequestBody): boolean;\n    isUpdatingShippingOption(consignmentId?: string): boolean;\n}\n\nexport type ConsignmentSelectorFactory = (\n    state: ConsignmentState,\n    cart: CartSelector\n) => ConsignmentSelector;\n\ninterface ConsignmentSelectorDependencies {\n    cart: CartSelector;\n}\n\nexport function createConsignmentSelectorFactory(): ConsignmentSelectorFactory {\n    const getConsignments = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => consignments\n    );\n\n    const getConsignmentById = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => (id: string) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, { id });\n        }\n    );\n\n    const getConsignmentByAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => (address: AddressRequestBody) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, consignment =>\n                isAddressEqual(consignment.shippingAddress, address)\n            );\n        }\n    );\n\n    const getShippingOption = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => {\n            if (consignments && consignments.length) {\n                return consignments[0].selectedShippingOption;\n            }\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: ConsignmentState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getCreateError = createSelector(\n        (state: ConsignmentState) => state.errors.createError,\n        error => () => error\n    );\n\n    const getLoadShippingOptionsError = createSelector(\n        (state: ConsignmentState) => state.errors.loadShippingOptionsError,\n        error => () => error\n    );\n\n    const getUnassignedItems = createSelector(\n        getConsignments,\n        (_: ConsignmentState, { cart }: ConsignmentSelectorDependencies) => cart.getCart,\n        (getConsignments, getCart) => () => {\n            const cart = getCart();\n\n            if (!cart) {\n                return [];\n            }\n\n            const assignedLineItemIds = (getConsignments() || []).reduce(\n                (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n                [] as string[]\n            );\n\n            return (cart.lineItems.physicalItems || []).filter(\n                item => assignedLineItemIds.indexOf(item.id as string) < 0\n            );\n        }\n    );\n\n    const getUpdateError = createSelector(\n        (state: ConsignmentState) => state.errors.updateError,\n        updateError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateError[consignmentId];\n            }\n\n            return find(updateError);\n        }\n    );\n\n    const getDeleteError = createSelector(\n        (state: ConsignmentState) => state.errors.deleteError,\n        deleteError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return deleteError[consignmentId];\n            }\n\n            return find(deleteError);\n        }\n    );\n\n    const getItemAssignmentError = createSelector(\n        getConsignmentByAddress,\n        getUpdateError,\n        getCreateError,\n        (getConsignmentByAddress, getUpdateError, getCreateError) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? getUpdateError(consignment.id) : getCreateError();\n        }\n    );\n\n    const getUpdateShippingOptionError = createSelector(\n        (state: ConsignmentState) => state.errors.updateShippingOptionError,\n        updateShippingOptionError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateShippingOptionError[consignmentId];\n            }\n\n            return find(updateShippingOptionError);\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoading,\n        isLoading => () => isLoading === true\n    );\n\n    const isLoadingShippingOptions = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoadingShippingOptions,\n        isLoadingShippingOptions => () => isLoadingShippingOptions === true\n    );\n\n    const isCreating = createSelector(\n        (state: ConsignmentState) => state.statuses.isCreating,\n        isCreating => () => isCreating === true\n    );\n\n    const isUpdating = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdating,\n        isUpdating => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdating[consignmentId] === true;\n            }\n\n            return find(isUpdating) === true;\n        }\n    );\n\n    const isDeleting = createSelector(\n        (state: ConsignmentState) => state.statuses.isDeleting,\n        isDeleting => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isDeleting[consignmentId] === true;\n            }\n\n            return find(isDeleting) === true;\n        }\n    );\n\n    const isAssigningItems = createSelector(\n        getConsignmentByAddress,\n        isUpdating,\n        isCreating,\n        (getConsignmentByAddress, isUpdating, isCreating) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? isUpdating(consignment.id) : isCreating();\n        }\n    );\n\n    const isUpdatingShippingOption = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdatingShippingOption,\n        isUpdatingShippingOption => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdatingShippingOption[consignmentId] === true;\n            }\n\n            return find(isUpdatingShippingOption) === true;\n        }\n    );\n\n    return memoizeOne((\n        state: ConsignmentState = DEFAULT_STATE,\n        cart: CartSelector\n    ): ConsignmentSelector => {\n        return {\n            getConsignments: getConsignments(state),\n            getConsignmentById: getConsignmentById(state),\n            getConsignmentByAddress: getConsignmentByAddress(state),\n            getShippingOption: getShippingOption(state),\n            getLoadError: getLoadError(state),\n            getCreateError: getCreateError(state),\n            getLoadShippingOptionsError: getLoadShippingOptionsError(state),\n            getUnassignedItems: getUnassignedItems(state, { cart }),\n            getUpdateError: getUpdateError(state),\n            getDeleteError: getDeleteError(state),\n            getItemAssignmentError: getItemAssignmentError(state),\n            getUpdateShippingOptionError: getUpdateShippingOptionError(state),\n            isLoading: isLoading(state),\n            isLoadingShippingOptions: isLoadingShippingOptions(state),\n            isCreating: isCreating(state),\n            isUpdating: isUpdating(state),\n            isDeleting: isDeleting(state),\n            isAssigningItems: isAssigningItems(state),\n            isUpdatingShippingOption: isUpdatingShippingOption(state),\n        };\n    });\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport default interface StoreCreditState {\n    errors: StoreCreditErrorsState;\n    statuses: StoreCreditStatusesState;\n}\n\nexport interface StoreCreditErrorsState {\n    applyError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface StoreCreditStatusesState {\n    isApplying?: boolean;\n}\n\nexport const DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n","import { createBillingAddressSelectorFactory } from '../billing';\nimport { createCartSelectorFactory } from '../cart/cart-selector';\nimport { createCheckoutButtonSelectorFactory } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { createConfigSelectorFactory } from '../config';\nimport { createCouponSelectorFactory, createGiftCertificateSelectorFactory } from '../coupon';\nimport { createCustomerSelectorFactory, createCustomerStrategySelectorFactory } from '../customer';\nimport { createFormSelectorFactory } from '../form';\nimport { createCountrySelectorFactory } from '../geography';\nimport { createOrderSelectorFactory } from '../order';\nimport { createPaymentMethodSelectorFactory, createPaymentSelectorFactory, createPaymentStrategySelectorFactory } from '../payment';\nimport { createInstrumentSelectorFactory } from '../payment/instrument';\nimport { createRemoteCheckoutSelectorFactory } from '../remote-checkout';\nimport { createConsignmentSelectorFactory, createShippingAddressSelectorFactory, createShippingCountrySelectorFactory, createShippingStrategySelectorFactory } from '../shipping';\nimport { createStoreCreditSelectorFactory } from '../store-credit/store-credit-selector';\n\nimport { createCheckoutSelectorFactory } from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport type InternalCheckoutSelectorsFactory = (\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n) => InternalCheckoutSelectors;\n\nexport function createInternalCheckoutSelectorsFactory(): InternalCheckoutSelectorsFactory {\n    const createBillingAddressSelector = createBillingAddressSelectorFactory();\n    const createCartSelector = createCartSelectorFactory();\n    const createCheckoutButtonSelector = createCheckoutButtonSelectorFactory();\n    const createConfigSelector = createConfigSelectorFactory();\n    const createCountrySelector = createCountrySelectorFactory();\n    const createCouponSelector = createCouponSelectorFactory();\n    const createCustomerSelector = createCustomerSelectorFactory();\n    const createCustomerStrategySelector = createCustomerStrategySelectorFactory();\n    const createGiftCertificateSelector = createGiftCertificateSelectorFactory();\n    const createInstrumentSelector = createInstrumentSelectorFactory();\n    const createFormSelector = createFormSelectorFactory();\n    const createPaymentMethodSelector = createPaymentMethodSelectorFactory();\n    const createPaymentStrategySelector = createPaymentStrategySelectorFactory();\n    const createRemoteCheckoutSelector = createRemoteCheckoutSelectorFactory();\n    const createShippingAddressSelector = createShippingAddressSelectorFactory();\n    const createShippingCountrySelector = createShippingCountrySelectorFactory();\n    const createShippingStrategySelector = createShippingStrategySelectorFactory();\n    const createConsignmentSelector = createConsignmentSelectorFactory();\n    const createCheckoutSelector = createCheckoutSelectorFactory();\n    const createOrderSelector = createOrderSelectorFactory();\n    const createPaymentSelector = createPaymentSelectorFactory();\n    const createStoreCreditSelector = createStoreCreditSelectorFactory();\n\n    return (state, options = {}) => {\n        const billingAddress = createBillingAddressSelector(state.billingAddress);\n        const cart = createCartSelector(state.cart);\n        const checkoutButton = createCheckoutButtonSelector(state.checkoutButton);\n        const config = createConfigSelector(state.config);\n        const countries = createCountrySelector(state.countries);\n        const coupons = createCouponSelector(state.coupons);\n        const customer = createCustomerSelector(state.customer);\n        const customerStrategies = createCustomerStrategySelector(state.customerStrategies);\n        const form = createFormSelector(state.config);\n        const giftCertificates = createGiftCertificateSelector(state.giftCertificates);\n        const instruments = createInstrumentSelector(state.instruments);\n        const paymentMethods = createPaymentMethodSelector(state.paymentMethods);\n        const paymentStrategies = createPaymentStrategySelector(state.paymentStrategies);\n        const remoteCheckout = createRemoteCheckoutSelector(state.remoteCheckout);\n        const shippingAddress = createShippingAddressSelector(state.consignments);\n        const shippingCountries = createShippingCountrySelector(state.shippingCountries);\n        const shippingStrategies = createShippingStrategySelector(state.shippingStrategies);\n        const storeCredit = createStoreCreditSelector(state.storeCredit);\n\n        // Compose selectors\n        const consignments = createConsignmentSelector(state.consignments, cart);\n        const checkout = createCheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n        const order = createOrderSelector(state.order, billingAddress, coupons);\n        const payment = createPaymentSelector(checkout, order);\n\n        const selectors = {\n            billingAddress,\n            cart,\n            checkout,\n            checkoutButton,\n            config,\n            consignments,\n            countries,\n            coupons,\n            customer,\n            customerStrategies,\n            form,\n            giftCertificates,\n            instruments,\n            order,\n            payment,\n            paymentMethods,\n            paymentStrategies,\n            remoteCheckout,\n            shippingAddress,\n            shippingCountries,\n            shippingStrategies,\n            storeCredit,\n        };\n\n        return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n    };\n}\n\nexport default function createInternalCheckoutSelectors(\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n): InternalCheckoutSelectors {\n    return createInternalCheckoutSelectorsFactory()(state, options);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState, { DEFAULT_STATE } from './billing-address-state';\n\nexport default interface BillingAddressSelector {\n    getBillingAddress(): BillingAddress | undefined;\n    getUpdateError(): Error | undefined;\n    getContinueAsGuestError(): Error | undefined;\n    getLoadError(): Error | undefined;\n    isUpdating(): boolean;\n    isContinuingAsGuest(): boolean;\n    isLoading(): boolean;\n}\n\nexport type BillingAddressSelectorFactory = (state: BillingAddressState) => BillingAddressSelector;\n\nexport function createBillingAddressSelectorFactory(): BillingAddressSelectorFactory {\n    const getBillingAddress = createSelector(\n        (state: BillingAddressState) => state.data,\n        data => () => data\n    );\n\n    const getUpdateError = createSelector(\n        (state: BillingAddressState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const getContinueAsGuestError = createSelector(\n        (state: BillingAddressState) => state.errors.continueAsGuestError,\n        error => () => error\n    );\n\n    const getLoadError = createSelector(\n        (state: BillingAddressState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isUpdating = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isUpdating,\n        status => () => status\n    );\n\n    const isContinuingAsGuest = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isContinuingAsGuest,\n        status => () => status\n    );\n\n    const isLoading = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: BillingAddressState = DEFAULT_STATE\n    ): BillingAddressSelector => {\n        return {\n            getBillingAddress: getBillingAddress(state),\n            getUpdateError: getUpdateError(state),\n            getContinueAsGuestError: getContinueAsGuestError(state),\n            getLoadError: getLoadError(state),\n            isUpdating: isUpdating(state),\n            isContinuingAsGuest: isContinuingAsGuest(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoize, memoizeOne } from '@bigcommerce/memoize';\nimport { find, some, values } from 'lodash';\n\nimport { createSelector } from '../common/selector';\n\nimport CheckoutButtonState, { DEFAULT_STATE } from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonSelector {\n    getState(): CheckoutButtonState;\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean;\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean;\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean;\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n}\n\nexport type CheckoutButtonSelectorFactory = (state: CheckoutButtonState) => CheckoutButtonSelector;\n\nexport function createCheckoutButtonSelectorFactory(): CheckoutButtonSelectorFactory {\n    const getState = createSelector(\n        (state: CheckoutButtonState) => state,\n        state => () => state\n    );\n\n    const isInitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        statuses => memoize((methodId?: CheckoutButtonMethodType) => {\n            if (methodId) {\n                const method = statuses[methodId];\n\n                return (method && method.isInitializing) === true;\n            }\n\n            return some(statuses, { isInitializing: true });\n        })\n    );\n\n    const isInitialized = createSelector(\n        (state: CheckoutButtonState) => state.data,\n        data => memoize((methodId: CheckoutButtonMethodType, containerId?: string) => {\n            const method = data[methodId];\n\n            if (!method) {\n                return false;\n            }\n\n            if (!containerId) {\n                return some(method.initializedContainers, isInitialized => isInitialized === true);\n            }\n\n            return method.initializedContainers[containerId] === true;\n        })\n    );\n\n    const isDeinitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        statuses => memoize((methodId?: CheckoutButtonMethodType) => {\n            if (methodId) {\n                const method = statuses[methodId];\n\n                return (method && method.isDeinitializing) === true;\n            }\n\n            return some(statuses, { isDeinitializing: true });\n        })\n    );\n\n    const getInitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        errors => memoize((methodId?: CheckoutButtonMethodType) => {\n            const method = methodId ?\n                errors[methodId] :\n                find(values(errors), method => !!(method && method.initializeError));\n\n            return method && method.initializeError;\n        })\n    );\n\n    const getDeinitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        errors => memoize((methodId?: CheckoutButtonMethodType) => {\n            const method = methodId ?\n                errors[methodId] :\n                find(values(errors), method => !!(method && method.deinitializeError));\n\n            return method && method.deinitializeError;\n        })\n    );\n\n    return memoizeOne((\n        state: CheckoutButtonState = DEFAULT_STATE\n    ): CheckoutButtonSelector => {\n        return {\n            getState: getState(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isDeinitializing: isDeinitializing(state),\n            getInitializeError: getInitializeError(state),\n            getDeinitializeError: getDeinitializeError(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport Coupon from './coupon';\nimport CouponState, { DEFAULT_STATE } from './coupon-state';\n\nexport default interface CouponSelector {\n    getCoupons(): Coupon[] | undefined;\n    getRemoveError(): RequestError | undefined;\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type CouponSelectorFactory = (state: CouponState) => CouponSelector;\n\nexport function createCouponSelectorFactory(): CouponSelectorFactory {\n    const getCoupons = createSelector(\n        (state: CouponState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: CouponState) => state.errors.removeCouponError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: CouponState) => state.errors.applyCouponError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: CouponState) => !!state.statuses.isApplyingCoupon,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: CouponState) => !!state.statuses.isRemovingCoupon,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CouponState = DEFAULT_STATE\n    ): CouponSelector => {\n        return {\n            getCoupons: getCoupons(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default interface CustomerSelector {\n    getCustomer(): Customer | undefined;\n}\n\nexport type CustomerSelectorFactory = (state: CustomerState) => CustomerSelector;\n\nexport function createCustomerSelectorFactory(): CustomerSelectorFactory {\n    const getCustomer = createSelector(\n        (state: CustomerState) => state.data,\n        customer => () => customer\n    );\n\n    return memoizeOne((\n        state: CustomerState = DEFAULT_STATE\n    ): CustomerSelector => {\n        return {\n            getCustomer: getCustomer(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport RemoteCheckoutState, { DEFAULT_STATE, RemoteCheckoutStateData } from './remote-checkout-state';\n\nexport default interface RemoteCheckoutSelector {\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined;\n}\n\nexport type RemoteCheckoutSelectorFactory = (state: RemoteCheckoutState) => RemoteCheckoutSelector;\n\nexport function createRemoteCheckoutSelectorFactory(): RemoteCheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: RemoteCheckoutState) => state.data,\n        data => <TMethodId extends keyof RemoteCheckoutStateData>(methodId: TMethodId) => {\n            return data[methodId];\n        }\n    );\n\n    return memoizeOne((\n        state: RemoteCheckoutState = DEFAULT_STATE\n    ): RemoteCheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { Address } from '../address';\nimport { createSelector } from '../common/selector';\n\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\n\nexport default interface ShippingAddressSelector {\n    getShippingAddress(): Address | undefined;\n}\n\nexport type ShippingAddressSelectorFactory = (state: ConsignmentState) => ShippingAddressSelector;\n\nexport function createShippingAddressSelectorFactory(): ShippingAddressSelectorFactory {\n    const getShippingAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => {\n            if (!consignments || !consignments[0]) {\n                return;\n            }\n\n            return consignments[0].shippingAddress;\n        }\n    );\n\n    return memoizeOne((\n        state: ConsignmentState = DEFAULT_STATE\n    ): ShippingAddressSelector => {\n        return {\n            getShippingAddress: getShippingAddress(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { CheckoutSelector } from '../checkout';\nimport { createSelector } from '../common/selector';\nimport { GatewayOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\nexport default interface PaymentSelector {\n    getPaymentId(): { providerId: string; gatewayId?: string } | undefined;\n    getPaymentStatus(): string | undefined;\n    getPaymentToken(): string | undefined;\n    getPaymentRedirectUrl(): string | undefined;\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean;\n}\n\nexport type PaymentSelectorFactory = (\n    checkout: CheckoutSelector,\n    order: OrderSelector\n) => PaymentSelector;\n\ninterface PaymentSelectorDependencies {\n    checkout: CheckoutSelector;\n    order: OrderSelector;\n}\n\nexport function createPaymentSelectorFactory(): PaymentSelectorFactory {\n    const getInternalPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        getOrderMeta => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.payment;\n        }\n    );\n\n    const getGatewayPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrder,\n        getOrder => () => {\n            const order = getOrder();\n\n            return find(order && order.payments, ({ providerId }) =>\n                providerId !== 'giftcertificate' && providerId !== 'storecredit'\n            ) as GatewayOrderPayment;\n        }\n    );\n\n    const getHostedPayment = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getCheckout,\n        getCheckout => () => {\n            const checkout = getCheckout();\n\n            return find(checkout && checkout.payments, ({ providerType }) =>\n                providerType === HOSTED\n            );\n        }\n    );\n\n    const getPaymentId = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.id) {\n                return {\n                    providerId: internalPayment.id,\n                    gatewayId: internalPayment.gateway,\n                };\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment && payment.providerId) {\n                return {\n                    providerId: payment.providerId,\n                    gatewayId: payment.gatewayId,\n                };\n            }\n        }\n    );\n\n    const getPaymentStatus = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.status) {\n                return internalPayment.status.replace('PAYMENT_STATUS_', '');\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment) {\n                return payment.detail.step;\n            }\n        }\n    );\n\n    const getPaymentToken = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        getOrderMeta => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.token;\n        }\n    );\n\n    const getPaymentRedirectUrl = createSelector(\n        getInternalPayment,\n        getInternalPayment => () => {\n            const payment = getInternalPayment();\n\n            return payment && payment.redirectUrl;\n        }\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getOutstandingBalance,\n        getOutstandingBalance => (useStoreCredit: boolean = false) => {\n            const grandTotal = getOutstandingBalance(useStoreCredit);\n\n            return grandTotal ? grandTotal > 0 : false;\n        }\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        getPaymentStatus,\n        getPaymentStatus => (paymentMethod?: PaymentMethod) => {\n            if (paymentMethod && paymentMethod.nonce) {\n                return true;\n            }\n\n            return getPaymentStatus() === ACKNOWLEDGE || getPaymentStatus() === FINALIZE;\n        }\n    );\n\n    return memoizeOne((\n        checkout: CheckoutSelector,\n        order: OrderSelector\n    ): PaymentSelector => {\n        return {\n            getPaymentId: getPaymentId({ checkout, order }),\n            getPaymentStatus: getPaymentStatus({ checkout, order }),\n            getPaymentToken: getPaymentToken({ checkout, order }),\n            getPaymentRedirectUrl: getPaymentRedirectUrl({ checkout, order }),\n            isPaymentDataRequired: isPaymentDataRequired({ checkout, order }),\n            isPaymentDataSubmitted: isPaymentDataSubmitted({ checkout, order }),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Cart from './cart';\nimport CartState, { DEFAULT_STATE } from './cart-state';\n\nexport default interface CartSelector {\n    getCart(): Cart | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CartSelectorFactory = (state: CartState) => CartSelector;\n\nexport function createCartSelectorFactory() {\n    const getCart = createSelector(\n        (state: CartState) => state.data,\n        cart => () => cart\n    );\n\n    const getLoadError = createSelector(\n        (state: CartState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CartState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CartState = DEFAULT_STATE\n    ): CartSelector => {\n        return {\n            getCart: getCart(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState, { DEFAULT_STATE } from './config-state';\n\nexport default interface ConfigSelector {\n    getConfig(): Config | undefined;\n    getStoreConfig(): StoreConfig | undefined;\n    getContextConfig(): ContextConfig | undefined;\n    getExternalSource(): string | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ConfigSelectorFactory = (state: ConfigState) => ConfigSelector;\n\nexport function createConfigSelectorFactory(): ConfigSelectorFactory {\n\n    const getConfig = createSelector(\n        (state: ConfigState) => state.data,\n        data => () => data\n    );\n\n    const getStoreConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.storeConfig,\n        data => () => data\n    );\n\n    const getContextConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.context,\n        data => () => data\n    );\n\n    const getExternalSource = createSelector(\n        (state: ConfigState) => state.meta && state.meta.externalSource,\n        data => () => data\n    );\n\n    const getLoadError = createSelector(\n        (state: ConfigState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: ConfigState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: ConfigState = DEFAULT_STATE\n    ): ConfigSelector => {\n        return {\n            getConfig: getConfig(state),\n            getStoreConfig: getStoreConfig(state),\n            getContextConfig: getContextConfig(state),\n            getExternalSource: getExternalSource(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport Country from './country';\nimport CountryState, { DEFAULT_STATE } from './country-state';\n\nexport default interface CountrySelector {\n    getCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CountrySelectorFactory = (state: CountryState) => CountrySelector;\n\nexport function createCountrySelectorFactory(): CountrySelectorFactory {\n    const getCountries = createSelector(\n        (state: CountryState) => state.data,\n        countries => () => countries\n    );\n\n    const getLoadError = createSelector(\n        (state: CountryState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CountryState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CountryState = DEFAULT_STATE\n    ): CountrySelector => {\n        return {\n            getCountries: getCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport CustomerStrategyState, { DEFAULT_STATE } from './customer-strategy-state';\n\nexport default interface CustomerStrategySelector {\n    getSignInError(methodId?: string): Error | undefined;\n    getSignOutError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isSigningIn(methodId?: string): boolean;\n    isSigningOut(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type CustomerStrategySelectorFactory = (state: CustomerStrategyState) => CustomerStrategySelector;\n\nexport function createCustomerStrategySelectorFactory(): CustomerStrategySelectorFactory {\n    const getSignInError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signInMethodId,\n        (state: CustomerStrategyState) => state.errors.signInError,\n        (signInMethodId, signInError) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return;\n            }\n\n            return signInError;\n        }\n    );\n\n    const getSignOutError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signOutMethodId,\n        (state: CustomerStrategyState) => state.errors.signOutError,\n        (signOutMethodId, signOutError) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return;\n            }\n\n            return signOutError;\n        }\n    );\n\n    const getInitializeError = createSelector(\n        (state: CustomerStrategyState) => state.errors.initializeMethodId,\n        (state: CustomerStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: CustomerStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isSigningIn = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signInMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningIn,\n        (signInMethodId, isSigningIn) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningIn;\n        }\n    );\n\n    const isSigningOut = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signOutMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningOut,\n        (signOutMethodId, isSigningOut) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningOut;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: CustomerStrategyState) => state.statuses.initializeMethodId,\n        (state: CustomerStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: CustomerStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: CustomerStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: CustomerStrategyState = DEFAULT_STATE\n    ): CustomerStrategySelector => {\n        return {\n            getSignInError: getSignInError(state),\n            getSignOutError: getSignOutError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isSigningIn: isSigningIn(state),\n            isSigningOut: isSigningOut(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState, { DEFAULT_STATE } from './gift-certificate-state';\n\nexport default interface GiftCertificateSelector {\n    getGiftCertificates(): GiftCertificate[] | undefined;\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type GiftCertificateSelectorFactory = (state: GiftCertificateState) => GiftCertificateSelector;\n\nexport function createGiftCertificateSelectorFactory(): GiftCertificateSelectorFactory {\n    const getGiftCertificates = createSelector(\n        (state: GiftCertificateState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: GiftCertificateState) => state.errors.removeGiftCertificateError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: GiftCertificateState) => state.errors.applyGiftCertificateError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isApplyingGiftCertificate,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isRemovingGiftCertificate,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: GiftCertificateState = DEFAULT_STATE\n    ): GiftCertificateSelector => {\n        return {\n            getGiftCertificates: getGiftCertificates(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../../common/selector';\n\nimport Instrument from './instrument';\nimport InstrumentState, { DEFAULT_STATE, InstrumentMeta } from './instrument-state';\n\nexport default interface InstrumentSelector {\n    getInstruments(): Instrument[] | undefined;\n    getInstrumentsMeta(): InstrumentMeta | undefined;\n    getLoadError(): Error | undefined;\n    getDeleteError(instrumentId?: string): Error | undefined;\n    isLoading(): boolean ;\n    isDeleting(instrumentId?: string): boolean;\n}\n\nexport type InstrumentSelectorFactory = (state: InstrumentState) => InstrumentSelector;\n\nexport function createInstrumentSelectorFactory(): InstrumentSelectorFactory {\n    const getInstruments = createSelector(\n        (state: InstrumentState) => state.data,\n        instruments => () => instruments\n    );\n\n    const getInstrumentsMeta = createSelector(\n        (state: InstrumentState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: InstrumentState) => state.errors.loadError,\n        loadError => () => loadError\n    );\n\n    const getDeleteError = createSelector(\n        (state: InstrumentState) => state.errors.failedInstrument,\n        (state: InstrumentState) => state.errors.deleteError,\n        (failedInstrument, deleteError) => (instrumentId?: string) => {\n            if (instrumentId && failedInstrument !== instrumentId) {\n                return;\n            }\n\n            return deleteError;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: InstrumentState) => state.statuses.isLoading,\n        isLoading => () => !!isLoading\n    );\n\n    const isDeleting = createSelector(\n        (state: InstrumentState) => state.statuses.deletingInstrument,\n        (state: InstrumentState) => state.statuses.isDeleting,\n        (deletingInstrument, isDeleting) => (instrumentId?: string) => {\n            if (instrumentId && deletingInstrument !== instrumentId) {\n                return false;\n            }\n\n            return !!isDeleting;\n        }\n    );\n\n    return memoizeOne((\n        state: InstrumentState = DEFAULT_STATE\n    ): InstrumentSelector => {\n        return {\n            getInstruments: getInstruments(state),\n            getInstrumentsMeta: getInstrumentsMeta(state),\n            getLoadError: getLoadError(state),\n            getDeleteError: getDeleteError(state),\n            isLoading: isLoading(state),\n            isDeleting: isDeleting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\nimport { find } from 'lodash';\n\nimport { createSelector } from '../common/selector';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE } from './payment-method-state';\n\nexport default interface PaymentMethodSelector {\n    getPaymentMethods(): PaymentMethod[] | undefined;\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined;\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n    getLoadError(): Error | undefined;\n    getLoadMethodError(methodId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingMethod(methodId?: string): boolean;\n}\n\nexport type PaymentMethodSelectorFactory = (state: PaymentMethodState) => PaymentMethodSelector;\n\nexport function createPaymentMethodSelectorFactory(): PaymentMethodSelectorFactory {\n    const getPaymentMethods = createSelector(\n        (state: PaymentMethodState) => state.data,\n        paymentMethods => () => paymentMethods\n    );\n\n    const getPaymentMethodsMeta = createSelector(\n        (state: PaymentMethodState) => state.meta,\n        meta => () => meta\n    );\n\n    const getPaymentMethod = createSelector(\n        (state: PaymentMethodState) => state.data,\n        paymentMethods => (methodId: string, gatewayId?: string) => {\n            return gatewayId ?\n                find(paymentMethods, { id: methodId, gateway: gatewayId }) :\n                find(paymentMethods, { id: methodId });\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadError,\n        loadError => () => loadError\n    );\n\n    const getLoadMethodError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadMethodId,\n        (state: PaymentMethodState) => state.errors.loadMethodError,\n        (loadMethodId, loadMethodError) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return;\n            }\n\n            return loadMethodError;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: PaymentMethodState) => state.statuses.isLoading,\n        isLoading => () => !!isLoading\n    );\n\n    const isLoadingMethod = createSelector(\n        (state: PaymentMethodState) => state.statuses.loadMethodId,\n        (state: PaymentMethodState) => state.statuses.isLoadingMethod,\n        (loadMethodId, isLoadingMethod) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isLoadingMethod;\n        }\n    );\n\n    return memoizeOne((\n        state: PaymentMethodState = DEFAULT_STATE\n    ): PaymentMethodSelector => {\n        return {\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethodsMeta: getPaymentMethodsMeta(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getLoadError: getLoadError(state),\n            getLoadMethodError: getLoadMethodError(state),\n            isLoading: isLoading(state),\n            isLoadingMethod: isLoadingMethod(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\nexport default interface PaymentStrategySelector {\n    getInitializeError(methodId?: string): Error | undefined;\n    getExecuteError(methodId?: string): Error | undefined;\n    getFinalizeError(methodId?: string): Error | undefined;\n    getWidgetInteractingError(methodId?: string): Error | undefined;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isExecuting(methodId?: string): boolean;\n    isFinalizing(methodId?: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type PaymentStrategySelectorFactory = (state: PaymentStrategyState) => PaymentStrategySelector;\n\nexport function createPaymentStrategySelectorFactory(): PaymentStrategySelectorFactory {\n    const getInitializeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.initializeMethodId,\n        (state: PaymentStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getExecuteError = createSelector(\n        (state: PaymentStrategyState) => state.errors.executeMethodId,\n        (state: PaymentStrategyState) => state.errors.executeError,\n        (executeMethodId, executeError) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return;\n            }\n\n            return executeError;\n        }\n    );\n\n    const getFinalizeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.finalizeMethodId,\n        (state: PaymentStrategyState) => state.errors.finalizeError,\n        (finalizeMethodId, finalizeError) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return;\n            }\n\n            return finalizeError;\n        }\n    );\n\n    const getWidgetInteractingError = createSelector(\n        (state: PaymentStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.initializeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: PaymentStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isExecuting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.executeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isExecuting,\n        (executeMethodId, isExecuting) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isExecuting;\n        }\n    );\n\n    const isFinalizing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.finalizeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isFinalizing,\n        (finalizeMethodId, isFinalizing) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isFinalizing;\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: PaymentStrategyState = DEFAULT_STATE\n    ): PaymentStrategySelector => {\n        return {\n            getInitializeError: getInitializeError(state),\n            getExecuteError: getExecuteError(state),\n            getFinalizeError: getFinalizeError(state),\n            getWidgetInteractingError: getWidgetInteractingError(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isExecuting: isExecuting(state),\n            isFinalizing: isFinalizing(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\nimport { Country } from '../geography';\n\nimport ShippingCountryState, { DEFAULT_STATE } from './shipping-country-state';\n\nexport default interface ShippingCountrySelector {\n    getShippingCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ShippingCountrySelectorFactory = (state: ShippingCountryState) => ShippingCountrySelector;\n\nexport function createShippingCountrySelectorFactory(): ShippingCountrySelectorFactory {\n    const getShippingCountries = createSelector(\n        (state: ShippingCountryState) => state.data,\n        data => () => data\n    );\n\n    const getLoadError = createSelector(\n        (state: ShippingCountryState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: ShippingCountryState) => state.statuses.isLoading,\n        status => () => !!status\n    );\n\n    return memoizeOne((\n        state: ShippingCountryState = DEFAULT_STATE\n    ): ShippingCountrySelector => {\n        return {\n            getShippingCountries: getShippingCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector } from '../common/selector';\n\nimport ShippingStrategyState, { DEFAULT_STATE } from './shipping-strategy-state';\n\nexport default interface ShippingStrategySelector {\n    getUpdateAddressError(methodId?: string): Error | undefined;\n    getSelectOptionError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    isUpdatingAddress(methodId?: string): boolean;\n    isSelectingOption(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n}\n\nexport type ShippingStrategySelectorFactory = (state: ShippingStrategyState) => ShippingStrategySelector;\n\nexport function createShippingStrategySelectorFactory(): ShippingStrategySelectorFactory {\n    const getUpdateAddressError = createSelector(\n        (state: ShippingStrategyState) => state.errors.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.errors.updateAddressError,\n        (updateAddressMethodId, updateAddressError) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return;\n            }\n\n            return updateAddressError;\n        }\n    );\n\n    const getSelectOptionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.errors.selectOptionError,\n        (selectOptionMethodId, selectOptionError) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return;\n            }\n\n            return selectOptionError;\n        }\n    );\n\n    const getInitializeError = createSelector(\n        (state: ShippingStrategyState) => state.errors.initializeMethodId,\n        (state: ShippingStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const isUpdatingAddress = createSelector(\n        (state: ShippingStrategyState) => state.statuses.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.statuses.isUpdatingAddress,\n        (updateAddressMethodId, isUpdatingAddress) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isUpdatingAddress;\n        }\n    );\n\n    const isSelectingOption = createSelector(\n        (state: ShippingStrategyState) => state.statuses.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isSelectingOption,\n        (selectOptionMethodId, isSelectingOption) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSelectingOption;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: ShippingStrategyState) => state.statuses.initializeMethodId,\n        (state: ShippingStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: ShippingStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: ShippingStrategyState = DEFAULT_STATE\n    ): ShippingStrategySelector => {\n        return {\n            getUpdateAddressError: getUpdateAddressError(state),\n            getSelectOptionError: getSelectOptionError(state),\n            getInitializeError: getInitializeError(state),\n            isUpdatingAddress: isUpdatingAddress(state),\n            isSelectingOption: isSelectingOption(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { createSelector } from '../common/selector';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState, { DEFAULT_STATE } from './checkout-state';\n\nexport default interface CheckoutSelector {\n    getCheckout(): Checkout | undefined;\n    getOutstandingBalance(useStoreCredit?: boolean): number | undefined;\n    getLoadError(): Error | undefined;\n    getUpdateError(): Error | undefined;\n    isLoading(): boolean;\n    isUpdating(): boolean;\n}\n\nexport type CheckoutSelectorFactory = (\n    state: CheckoutState,\n    billingAddress: BillingAddressSelector,\n    cart: CartSelector,\n    consignments: ConsignmentSelector,\n    coupons: CouponSelector,\n    customer: CustomerSelector,\n    giftCertificates: GiftCertificateSelector\n) => CheckoutSelector;\n\ninterface CheckoutSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    cart: CartSelector;\n    consignments: ConsignmentSelector;\n    coupons: CouponSelector;\n    customer: CustomerSelector;\n    giftCertificates: GiftCertificateSelector;\n}\n\nexport function createCheckoutSelectorFactory(): CheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: CheckoutState) => state.data,\n        (_: CheckoutState, { billingAddress }: CheckoutSelectorDependencies) => billingAddress.getBillingAddress,\n        (_: CheckoutState, { cart }: CheckoutSelectorDependencies) => cart.getCart,\n        (_: CheckoutState, { customer }: CheckoutSelectorDependencies) => customer.getCustomer,\n        (_: CheckoutState, { consignments }: CheckoutSelectorDependencies) => consignments.getConsignments,\n        (_: CheckoutState, { coupons }: CheckoutSelectorDependencies) => coupons.getCoupons,\n        (_: CheckoutState, { giftCertificates }: CheckoutSelectorDependencies) => giftCertificates.getGiftCertificates,\n        (data, getBillingAddress, getCart, getCustomer, getConsignments, getCoupons, getGiftCertificates) => () => {\n            const billingAddress = getBillingAddress();\n            const cart = getCart();\n            const customer = getCustomer();\n            const consignments = getConsignments() || [];\n            const coupons = getCoupons() || [];\n            const giftCertificates = getGiftCertificates() || [];\n\n            if (!data || !cart || !customer) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                cart,\n                customer,\n                consignments,\n                coupons,\n                giftCertificates,\n            };\n        }\n    );\n\n    const getOutstandingBalance = createSelector(\n        getCheckout,\n        getCheckout => (useStoreCredit?: boolean) => {\n            const checkout = getCheckout();\n\n            if (!checkout) {\n                return;\n            }\n\n            const grandTotal = checkout.grandTotal || 0;\n            const storeCredit = checkout.customer.storeCredit || 0;\n\n            return useStoreCredit ? Math.max(grandTotal - storeCredit, 0) : checkout.outstandingBalance;\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: CheckoutState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getUpdateError = createSelector(\n        (state: CheckoutState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CheckoutState) => state.statuses.isLoading,\n        isLoading => () => isLoading === true\n    );\n\n    const isUpdating = createSelector(\n        (state: CheckoutState) => state.statuses.isUpdating,\n        isUpdating => () => isUpdating === true\n    );\n\n    return memoizeOne((\n        state: CheckoutState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        cart: CartSelector,\n        consignments: ConsignmentSelector,\n        coupons: CouponSelector,\n        customer: CustomerSelector,\n        giftCertificates: GiftCertificateSelector\n    ): CheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getOutstandingBalance: getOutstandingBalance(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getLoadError: getLoadError(state),\n            getUpdateError: getUpdateError(state),\n            isLoading: isLoading(state),\n            isUpdating: isUpdating(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { BillingAddressSelector } from '../billing';\nimport { createSelector } from '../common/selector';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { DEFAULT_STATE, OrderMetaState } from './order-state';\n\nexport default interface OrderSelector {\n    getOrder(): Order | undefined;\n    getOrderMeta(): OrderMetaState | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type OrderSelectorFactory = (\n    state: OrderState,\n    billingAddress: BillingAddressSelector,\n    coupons: CouponSelector\n) => OrderSelector;\n\ninterface OrderSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    coupons: CouponSelector;\n}\n\nexport function createOrderSelectorFactory(): OrderSelectorFactory {\n    const getOrder = createSelector(\n        (state: OrderState) => state.data,\n        (_: OrderState, { billingAddress }: OrderSelectorDependencies) => billingAddress.getBillingAddress(),\n        (_: OrderState, { coupons }: OrderSelectorDependencies) => coupons.getCoupons(),\n        (data, billingAddress, coupons = []) => () => {\n            if (!data || !billingAddress) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                coupons,\n            };\n        }\n    );\n\n    const getOrderMeta = createSelector(\n        (state: OrderState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: OrderState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: OrderState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: OrderState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        coupons: CouponSelector\n    ): OrderSelector => {\n        return {\n            getOrder: getOrder(state, { billingAddress, coupons }),\n            getOrderMeta: getOrderMeta(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\n\nimport StoreCreditState, { DEFAULT_STATE } from './store-credit-state';\n\nexport default interface StoreCreditSelector {\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n}\n\nexport type StoreCreditSelectorFactory = (state: StoreCreditState) => StoreCreditSelector;\n\nexport function createStoreCreditSelectorFactory(): StoreCreditSelectorFactory {\n    const getApplyError = createSelector(\n        (state: StoreCreditState) => state.errors.applyError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: StoreCreditState) => !!state.statuses.isApplying,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: StoreCreditState = DEFAULT_STATE\n    ): StoreCreditSelector => {\n        return {\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n        };\n    });\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport { createInternalCheckoutSelectorsFactory } from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const createInternalCheckoutSelectors = createInternalCheckoutSelectorsFactory();\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            const message = action.payload.body && action.payload.body.detail;\n\n            throw { ...action, payload: requestErrorFactory.createError(action.payload, message) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\nimport { storeCreditReducer } from '../store-credit';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n        storeCredit: storeCreditReducer,\n    });\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error when we are unable to retrieve a checkout object from the\n * server using the provided ID. It could be because the shopper does not have\n * permission to view the object, or the ID itself is invalid.\n */\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'CheckoutNotAvailableError';\n        this.type = 'checkout_not_available';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        }).catch(error => {\n            if (error.status >= 400 && error.status < 500) {\n                throw new CheckoutNotAvailableError(error);\n            }\n\n            throw error;\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","import { isBillingAddressLike } from '../billing';\nimport BillingAddress from '../billing/billing-address';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalAddress(address: Address | BillingAddress, consignments?: Consignment[]): InternalAddress {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import Address from '../address/address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","import { memoize } from '@bigcommerce/memoize';\n\nimport { bindDecorator, isEqual, isPrivate, CacheKeyResolver } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method);\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method);\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\n@bind\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId) ?\n            [options.containerId] :\n            setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map(containerId => {\n                const action = this._buttonStrategyActionCreator.initialize({ ...options, containerId });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            })\n        )\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId })\n            .then(() => this.getState());\n    }\n}\n","enum CheckoutButtonMethodType {\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    GOOGLEPAY_BRAINTREE = 'googlepaybraintree',\n    GOOGLEPAY_STRIPE = 'googlepaystripe',\n    MASTERPASS = 'masterpass',\n    PAYPALEXPRESS = 'paypalexpress',\n}\n\nexport default CheckoutButtonMethodType;\n","export default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(`Unable to find any element with the specified selector: ${selector}`);\n    }\n\n    return Array.prototype.slice.call(containers)\n        .map((container: HTMLElement) => {\n            if (!container.id) {\n                container.id = uniqueId(idPrefix);\n            }\n\n            return container.id;\n        });\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId, containerId: options.containerId };\n\n            if (store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n                this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, { timeout: options.timeout, useCache: true }),\n                defer(() => this._registry.get(options.methodId).initialize(options)\n                    .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n            );\n        };\n    }\n\n    deinitialize(options: CheckoutButtonOptions): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId };\n\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n                defer(() => this._registry.get(options.methodId).deinitialize()\n                    .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n            );\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { BraintreeAddress, BraintreeError, BraintreePaypalCheckout, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = (this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal) || {};\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(onError?: (error: BraintreeError | StandardError) => void): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const address = customer && customer.addresses && customer.addresses[0];\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: address ? this._mapToBraintreeAddress(address) : undefined,\n                    amount: checkout.outstandingBalance,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: shippingAddress && shippingAddress.phone || payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: billingAddress.firstName || payload.details.firstName,\n                last_name: billingAddress.lastName || payload.details.lastName,\n                phone_number: billingAddress.phone || payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeAddress {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(() => this._googlePayPaymentProcessor.initialize(this._getMethodId()))\n            .then(() => {\n                this._walletButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { getCallbackUrl, Masterpass, MasterpassCheckoutOptions, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._masterpassScriptLoader.load(paymentMethod.config.testMode);\n            })\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport { PaypalActions, PaypalAuthorizeData, PaypalClientToken, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = ''\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        return this._paypalScriptLoader.loadPaypal()\n            .then(paypal => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env,\n                    client: clientToken,\n                    commit: paypalOptions.shouldProcessPayment,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: (_, actions) => this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                    onAuthorize: (data, actions) => this._tokenizePayment(data, actions, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(merchantId: string, actions?: PaypalActions, onError?: (error: StandardError) => void): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(`${this._host}/api/storefront/payment/paypalexpress`, { merchantId, cartId }, {\n                    headers: {\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                    },\n                });\n            })\n            .then(res => res.id)\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        _onError?: (error: StandardError) => void // FIXME: This parameter seems to be unused\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then(payload => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const host = options && options.host;\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender, formPoster, host),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { BraintreePaypalButtonStrategy } from './strategies/braintree';\nimport { GooglePayButtonStrategy } from './strategies/googlepay';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    host?: string\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            true\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.MASTERPASS, () =>\n        new MasterpassButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        ));\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_STRIPE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALEXPRESS, () =>\n        new PaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            host\n        )\n    );\n\n    return registry;\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport enum NotEmbeddableErrorType {\n    MissingContainer = 'missing_container',\n    MissingContent = 'missing_content',\n    UnknownError = 'unknown_error',\n}\n\n/**\n * Throw this error if we are not able to embed the checkout form as an iframe.\n * This can be due to the fact that the provided container ID is invalid, or the\n * checkout form fails to load inside the iframe. It can also be due to an\n * unknown reason.\n */\nexport default class NotEmbeddableError extends StandardError {\n    constructor(\n        message?: string,\n        public subtype: NotEmbeddableErrorType = NotEmbeddableErrorType.UnknownError\n    ) {\n        super(message || 'Unable to embed the checkout form.');\n\n        this.name = 'NotEmbeddableError';\n        this.type = 'not_embeddable';\n    }\n}\n","import { default as storage } from 'local-storage-fallback';\n\nexport default class BrowserStorage {\n    constructor(\n        private _namespace: string\n    ) {}\n\n    getItem<TValue = any>(key: string): TValue | null {\n        const rawValue = storage.getItem(this.withNamespace(key));\n\n        if (rawValue === null) {\n            return null;\n        }\n\n        try {\n            return JSON.parse(rawValue);\n        } catch (error) {\n            // Clean up invalid values\n            this.removeItem(this.withNamespace(key));\n\n            return null;\n        }\n    }\n\n    getItemOnce<TValue = any>(key: string): TValue | null {\n        const value = this.getItem(key);\n\n        this.removeItem(key);\n\n        return value;\n    }\n\n    setItem<TValue = any>(key: string, value: TValue): void {\n        return storage.setItem(this.withNamespace(key), JSON.stringify(value));\n    }\n\n    removeItem(key: string): void {\n        return storage.removeItem(this.withNamespace(key));\n    }\n\n    private withNamespace(key: string): string {\n        return `${this._namespace}.${key}`;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\n/**\n * Throw this error we are not able to sign in a shopper because the provided\n * login token is invalid.\n */\nexport default class InvalidLoginTokenError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'InvalidLoginTokenError';\n        this.type = 'invalid_login_token';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { IFrameComponent } from '../common/iframe';\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport EmbeddedCheckoutError from './embedded-checkout-error';\nimport { EmbeddedCheckoutEventMap, EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { InvalidLoginTokenError, NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport { EmbeddedContentEvent, EmbeddedContentEventType } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst CAN_RETRY_ALLOW_COOKIE = 'canRetryAllowCookie';\nconst IS_COOKIE_ALLOWED_KEY = 'isCookieAllowed';\n\n@bind\nexport default class EmbeddedCheckout {\n    private _iframe?: IFrameComponent;\n    private _isAttached: boolean;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _iframeCreator: ResizableIframeCreator,\n        private _messageListener: IframeEventListener<EmbeddedCheckoutEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedContentEvent>,\n        private _loadingIndicator: LoadingIndicator,\n        private _requestSender: RequestSender,\n        private _storage: BrowserStorage,\n        private _location: Location,\n        private _options: EmbeddedCheckoutOptions\n    ) {\n        this._isAttached = false;\n\n        if (this._options.onComplete) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutComplete, this._options.onComplete);\n        }\n\n        if (this._options.onError) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutError, this._options.onError);\n        }\n\n        if (this._options.onLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutLoaded, this._options.onLoad);\n        }\n\n        if (this._options.onFrameLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, this._options.onFrameLoad);\n        }\n\n        if (this._options.onSignOut) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.SignedOut, this._options.onSignOut);\n        }\n\n        this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, () => this._configureStyles());\n    }\n\n    attach(): Promise<this> {\n        if (this._isAttached) {\n            return Promise.resolve(this);\n        }\n\n        this._isAttached = true;\n        this._messageListener.listen();\n        this._loadingIndicator.show(this._options.containerId);\n\n        return this._allowCookie()\n            .then(() => this._attemptLogin())\n            .then(url => this._iframeCreator.createFrame(url, this._options.containerId))\n            .then(iframe => {\n                this._iframe = iframe;\n\n                this._configureStyles();\n                this._loadingIndicator.hide();\n            })\n            .catch(error => {\n                this._isAttached = false;\n\n                return this._retryAllowCookie(error)\n                    .catch(() => {\n                        this._messageListener.trigger({\n                            type: EmbeddedCheckoutEventType.FrameError,\n                            payload: error,\n                        });\n\n                        this._loadingIndicator.hide();\n\n                        throw error;\n                    });\n            })\n            .then(() => this);\n    }\n\n    detach(): void {\n        if (!this._isAttached) {\n            return;\n        }\n\n        this._isAttached = false;\n        this._messageListener.stopListen();\n\n        if (this._iframe && this._iframe.parentNode) {\n            this._iframe.parentNode.removeChild(this._iframe);\n            this._iframe.iFrameResizer.close();\n        }\n    }\n\n    private _configureStyles(): void {\n        if (!this._iframe || !this._iframe.contentWindow || !this._options.styles) {\n            return;\n        }\n\n        this._messagePoster.setTarget(this._iframe.contentWindow);\n\n        this._messagePoster.post({\n            type: EmbeddedContentEventType.StyleConfigured,\n            payload: this._options.styles,\n        });\n    }\n\n    private _attemptLogin(): Promise<string> {\n        if (!/^\\/login\\/token/.test(parseUrl(this._options.url).pathname)) {\n            return Promise.resolve(this._options.url);\n        }\n\n        return this._requestSender.post(this._options.url)\n            .then(({ body: { redirectUrl } }) => redirectUrl)\n            .catch(response => Promise.reject(new InvalidLoginTokenError(response)));\n    }\n\n    /**\n     * This workaround is required for certain browsers (namely Safari) that\n     * prevent session cookies to be set for a third party website unless the\n     * user has recently visited such website. Therefore, before we attempt to\n     * login or set an active cart in the session, we need to first redirect the\n     * user to the domain of Embedded Checkout.\n     */\n    private _allowCookie(): Promise<void> {\n        if (this._storage.getItem(IS_COOKIE_ALLOWED_KEY)) {\n            // It could be possible that the flag is set to true but the browser\n            // has already removed the permission to store cookie. In that case,\n            // we should try to redirect the user again.\n            this._storage.setItem(CAN_RETRY_ALLOW_COOKIE, true);\n\n            return Promise.resolve();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.setItem(IS_COOKIE_ALLOWED_KEY, true);\n\n        const { origin } = parseUrl(this._options.url);\n        const redirectUrl = `${origin}/embedded-checkout/allow-cookie?returnUrl=${encodeURIComponent(this._location.href)}`;\n\n        document.body.style.visibility = 'hidden';\n        this._location.replace(redirectUrl);\n\n        return new Promise<never>(() => {});\n    }\n\n    private _retryAllowCookie(error: EmbeddedCheckoutError): Promise<void> {\n        const canRetry = (\n            this._storage.getItem(CAN_RETRY_ALLOW_COOKIE) &&\n            error instanceof NotEmbeddableError &&\n            error.subtype === NotEmbeddableErrorType.MissingContent\n        );\n\n        if (!canRetry) {\n            return Promise.reject();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.removeItem(IS_COOKIE_ALLOWED_KEY);\n\n        return this._allowCookie();\n    }\n}\n","import { LoadingIndicatorStyles } from './embedded-checkout-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\nexport default class LoadingIndicator {\n    private _container: HTMLElement;\n    private _indicator: HTMLElement;\n    private _styles: LoadingIndicatorStyles;\n\n    constructor(\n        options?: { styles?: LoadingIndicatorStyles }\n    ) {\n        this._styles = { ...DEFAULT_STYLES, ...options && options.styles };\n\n        this._defineAnimation();\n\n        this._container = this._buildContainer();\n        this._indicator = this._buildIndicator();\n\n        this._container.appendChild(this._indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error('Unable to attach the loading indicator because the parent ID is not valid.');\n            }\n\n            parent.appendChild(this._container);\n        }\n\n        this._container.style.visibility = 'visible';\n        this._container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this._container.style.visibility = 'hidden';\n\n            this._container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this._container.addEventListener('transitionend', handleTransitionEnd);\n\n        this._container.style.opacity = '0';\n    }\n\n    private _buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        return container;\n    }\n\n    private _buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this._styles.size}px`;\n        indicator.style.height = `${this._styles.size}px`;\n        indicator.style.borderRadius = `${this._styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this._styles.backgroundColor} ${this._styles.backgroundColor} ${this._styles.color} ${this._styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private _defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        document.head.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            style.sheet.insertRule(`\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `);\n        }\n    }\n}\n","import { iframeResizer, IFrameComponent } from '../common/iframe';\nimport { parseUrl } from '../common/url';\n\nimport { EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport { NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class ResizableIframeCreator {\n    constructor(\n        private _options?: { timeout: number }\n    ) {}\n\n    createFrame(src: string, containerId: string): Promise<IFrameComponent> {\n        const container = document.getElementById(containerId);\n        const { timeout = 60000 } = this._options || {};\n\n        if (!container) {\n            throw new NotEmbeddableError(\n                'Unable to embed the iframe because the container element could not be found.',\n                NotEmbeddableErrorType.MissingContainer\n            );\n        }\n\n        const iframe = document.createElement('iframe');\n\n        iframe.src = src;\n        iframe.style.border = 'none';\n        iframe.style.display = 'none';\n        iframe.style.width = '100%';\n        iframe.allowPaymentRequest = true;\n\n        container.appendChild(iframe);\n\n        return this._toResizableFrame(iframe, timeout)\n            .catch(error => {\n                container.removeChild(iframe);\n\n                throw error;\n            });\n    }\n\n    private _toResizableFrame(iframe: HTMLIFrameElement, timeoutInterval: number): Promise<IFrameComponent> {\n        // Can't simply listen to `load` event because it always gets triggered even if there's an error.\n        // Instead, listen to the `load` inside the iframe and let the parent frame know when it happens.\n        return new Promise((resolve, reject) => {\n            const timeout = window.setTimeout(() => {\n                reject(new NotEmbeddableError('Unable to embed the iframe because the content could not be loaded.'));\n            }, timeoutInterval);\n\n            const handleMessage = (event: MessageEvent) => {\n                if (event.origin !== parseUrl(iframe.src).origin) {\n                    return;\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameError)) {\n                    teardown();\n                    reject(new NotEmbeddableError(event.data.payload.message, NotEmbeddableErrorType.MissingContent));\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameLoaded)) {\n                    iframe.style.display = '';\n\n                    const contentId = event.data.payload && event.data.payload.contentId;\n                    const iframes = iframeResizer({\n                        scrolling: false,\n                        sizeWidth: false,\n                        heightCalculationMethod: contentId ? 'taggedElement' : 'lowestElement',\n                    }, iframe);\n\n                    teardown();\n                    resolve(iframes[iframes.length - 1]);\n                }\n            };\n\n            const teardown = () => {\n                window.removeEventListener('message', handleMessage);\n                window.clearTimeout(timeout);\n            };\n\n            window.addEventListener('message', handleMessage);\n        });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckout from './embedded-checkout';\nimport { EmbeddedCheckoutEventMap } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { EmbeddedContentEvent } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst STORAGE_PREFIX = 'BigCommerce.EmbeddedCheckout';\n\n/**\n * Embed the checkout form in an iframe.\n *\n * @remarks\n * Once the iframe is embedded, it will automatically resize according to the\n * size of the checkout form. It will also notify the parent window when certain\n * events have occurred. i.e.: when the form is loaded and ready to be used.\n *\n * ```js\n * embedCheckout({\n *     url: 'https://checkout/url',\n *     containerId: 'container-id',\n * });\n * ```\n *\n * @param options - Options for embedding the checkout form.\n * @returns A promise that resolves to an instance of `EmbeddedCheckout`.\n */\nexport default function embedCheckout(options: EmbeddedCheckoutOptions): Promise<EmbeddedCheckout> {\n    const origin = parseUrl(options.url).origin;\n    const embeddedCheckout = new EmbeddedCheckout(\n        new ResizableIframeCreator(),\n        new IframeEventListener<EmbeddedCheckoutEventMap>(origin),\n        new IframeEventPoster<EmbeddedContentEvent>(origin),\n        new LoadingIndicator({ styles: options.styles && options.styles.loadingIndicator }),\n        createRequestSender(),\n        new BrowserStorage(STORAGE_PREFIX),\n        window.location,\n        options\n    );\n\n    return embeddedCheckout.attach();\n}\n","export interface RootCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n}\n\nexport interface IntermediateCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    usedCount: number;\n    value: any;\n}\n\nexport interface TerminalCacheKeyMap extends IntermediateCacheKeyMap {\n    cacheKey: string;\n}\n\nexport type ChildCacheKeyMap = IntermediateCacheKeyMap | TerminalCacheKeyMap;\n\nexport function isTerminalCacheKeyMap(map: ChildCacheKeyMap): map is TerminalCacheKeyMap {\n    return map.hasOwnProperty('cacheKey');\n}\n\nexport function isRootCacheKeyMap(map: RootCacheKeyMap | ChildCacheKeyMap): map is RootCacheKeyMap {\n    return map.hasOwnProperty('parentMap');\n}\n","import { noop } from 'lodash';\nimport * as shallowEqual from 'shallowequal';\n\nimport { isRootCacheKeyMap, isTerminalCacheKeyMap, ChildCacheKeyMap, IntermediateCacheKeyMap, RootCacheKeyMap, TerminalCacheKeyMap } from './cache-key-maps';\n\nexport interface CacheKeyResolverOptions {\n    maxSize?: number;\n    onExpire?(key: string): void;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    map?: TerminalCacheKeyMap;\n}\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _map: RootCacheKeyMap = { maps: [] };\n    private _usedMaps: TerminalCacheKeyMap[] = [];\n    private _options: Required<CacheKeyResolverOptions>;\n\n    constructor(options?: CacheKeyResolverOptions) {\n        this._options = {\n            maxSize: 0,\n            isEqual: shallowEqual,\n            onExpire: noop,\n            ...options,\n        };\n    }\n\n    getKey(...args: any[]): string {\n        const result = this._resolveMap(...args);\n        const { index, parentMap } = result;\n        let { map } = result;\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n        } else {\n            map = this._generateMap(parentMap, args.slice(index));\n        }\n\n        // Keep track of the least used map so we can remove it if the size of\n        // the stack exceeds the maximum size.\n        this._removeLeastUsedMap(map);\n\n        return map.cacheKey;\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMap = this._map;\n\n        // Traverse the tree to find the linked list of maps that match the\n        // arguments of the call. Each intermediate or terminal map contains a\n        // value that could be used to match with the arguments. The last map in\n        // the list (the terminal) should contain a cache key. If it can does\n        // not exist, we will return a falsy value so that the caller could\n        // handle and generate a new cache key.\n        while (parentMap.maps.length) {\n            let isMatched = false;\n\n            for (let mapIndex = 0; mapIndex < parentMap.maps.length; mapIndex++) {\n                const map = parentMap.maps[mapIndex];\n\n                if (!this._options.isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                // Move the most recently used map to the top of the stack for\n                // quicker access\n                parentMap.maps.unshift(...parentMap.maps.splice(mapIndex, 1));\n\n                if ((args.length === 0 || index === args.length - 1) && isTerminalCacheKeyMap(map)) {\n                    return { index, map, parentMap };\n                }\n\n                isMatched = true;\n                parentMap = map;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMap };\n    }\n\n    private _generateMap(parent: RootCacheKeyMap | IntermediateCacheKeyMap, args: any[]): TerminalCacheKeyMap {\n        let index = 0;\n        let parentMap = parent;\n        let map: IntermediateCacheKeyMap;\n\n        do {\n            map = {\n                maps: [],\n                parentMap,\n                usedCount: 1,\n                value: args[index],\n            };\n\n            // Continue to build the tree of maps so that it could be resolved\n            // next time when the function is called with the same set of\n            // arguments.\n            parentMap.maps.unshift(map);\n\n            parentMap = map;\n            index++;\n        } while (index < args.length);\n\n        const terminalMap = map as TerminalCacheKeyMap;\n\n        terminalMap.cacheKey = `${++this._lastId}`;\n\n        return terminalMap;\n    }\n\n    private _removeLeastUsedMap(recentlyUsedMap: TerminalCacheKeyMap): void {\n        if (!this._options.maxSize) {\n            return;\n        }\n\n        const index = this._usedMaps.indexOf(recentlyUsedMap);\n\n        this._usedMaps.splice(\n            index === -1 ? 0 : index,\n            index === -1 ? 0 : 1,\n            recentlyUsedMap\n        );\n\n        if (this._usedMaps.length <= this._options.maxSize) {\n            return;\n        }\n\n        const map = this._usedMaps.pop();\n\n        if (!map) {\n            return;\n        }\n\n        this._removeMap(map);\n        this._options.onExpire(map.cacheKey);\n    }\n\n    private _removeMap(map: ChildCacheKeyMap): void {\n        if (!map.parentMap) {\n            return;\n        }\n\n        map.parentMap.maps.splice(map.parentMap.maps.indexOf(map), 1);\n\n        if (isRootCacheKeyMap(map.parentMap)) {\n            return;\n        }\n\n        this._removeMap(map.parentMap);\n    }\n}\n","module.exports = require(\"@bigcommerce/bigpay-client\");","module.exports = require(\"messageformat\");","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\n/**\n * Throw this error if a request fails to complete within its required timeframe\n * because of a network issue.\n */\nexport default class TimeoutError extends RequestError<{}> {\n    constructor(response?: Response) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.name = 'TimeoutError';\n        this.type = 'timeout';\n    }\n}\n","import { createSelector as defaultSelectorCreator } from 'reselect';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\n/**\n * This is a decorated version of Reselect's default `createSelector` function.\n * If the return value of the combiner function is a function, it will create a\n * memorized version of that function and return it instead.\n */\nexport default withMemoizedCombiner(defaultSelectorCreator);\n","import { uniq } from 'lodash';\n\nexport default function joinIncludes(includes: string[]): string {\n    return uniq(includes).join(',');\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._options.defaultToken,\n                cacheToken || token || this._options.defaultToken\n            );\n        } catch (error) {\n            return this._getInstance(\n                this._options.defaultToken,\n                cacheToken || this._options.defaultToken\n            );\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are unable to synchronize the checkout details of a\n * shopper with a hosted / remote checkout provider (i.e.: Amazon).\n */\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.name = 'RemoteCheckoutSynchronizationError';\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\nimport { GooglePayBraintreeDataRequest, GooglePayBraintreePaymentDataRequestV1 } from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token).androidPayCards[0];\n\n        return {\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        };\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.googleMerchantName,\n                merchantId: initializationData.googleMerchantId,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.outstandingBalance, 2).toFixed(2),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(googlePayBraintreePaymentDataRequest)\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.merchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'braintree',\n                        'braintree:apiVersion': 'v1',\n                        'braintree:authorizationFingerprint': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:authorizationFingerprint'],\n                        'braintree:merchantId': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:merchantId'],\n                        'braintree:sdkVersion': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:sdkVersion'],\n                    },\n                },\n            }],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return {\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            };\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'stripe',\n                        'stripe:version': initializationData.stripeVersion,\n                        'stripe:publishableKey': initializationData.stripePublishableKey,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { mapToInternalLineItems, LineItem } from '../cart';\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInternalOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        taxTotal: {\n            amount: order.taxTotal,\n            integerAmount: amountTransformer.toInteger(order.taxTotal),\n        },\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInternalOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && lineItem.socialMedia.find(item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadPaypal(): Promise<PaypalSDK> {\n        return this._scriptLoader\n            .loadScript('//www.paypalobjects.com/api/checkout.min.js')\n            .then(() => {\n                if (!this._window.paypal) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.paypal;\n            });\n    }\n}\n","import { IFrameComponent, IFrameOptions } from 'iframe-resizer';\n\nexport {\n    HeightCalculationMethod,\n    IFrameComponent,\n    IFrameMessageData,\n    IFrameObject,\n    IFrameOptions,\n    IFramePage,\n    IFramePageOptions,\n    IFrameResizedData,\n    IFrameScrollData,\n    PageInfo,\n    WidthCalculationMethod,\n} from 'iframe-resizer';\n\n// The reason why we are wrapping the original `iframeResizer` function imported\n// from the package is because the package sets up event listeners (window\n// resize etc...) as soon as the package is imported. Therefore, to defer the\n// side effect from happening until the function is actually being used, we are\n// importing the package inside this function. To minimise the chance of\n// importing the original package inadvertently, we are also re-exporting all of\n// its public interfaces. The re-exports do not cause any side effect because\n// they are plain TypeScript interfaces; meaning they are only used for type\n// checks rather than for code output.\nexport function iframeResizer(options: IFrameOptions, target: string | HTMLElement): IFrameComponent[] {\n    const { iframeResizer: originalIframeResizer } = require('iframe-resizer');\n\n    return originalIframeResizer(options, target);\n}\n\n// We also need to wrap the original `iframeResizer.contentWindow` because\n// similarly the package sets up event listeners as soon as the package gets\n// imported. Another reason is that if it is imported at the top level using a\n// regular import statement, it will be stripped out by Webpack as it is\n// considered as \"unused\", unless we explicitly mark it as a package that\n// produces side effects.\nexport function setupContentWindowForIframeResizer(): void {\n    require('iframe-resizer/js/iframeResizer.contentWindow');\n}\n","import { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default class ErrorActionCreator {\n    clearError(error: Error): ClearErrorAction {\n        return {\n            type: ErrorActionType.ClearError,\n            payload: error,\n        };\n    }\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console?: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutIncludes, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable ,  Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport {\n    CustomerStrategyActionType,\n    CustomerStrategyDeinitializeAction,\n    CustomerStrategyInitializeAction,\n    CustomerStrategySignInAction,\n    CustomerStrategySignOutAction,\n    CustomerStrategyWidgetAction,\n} from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): ThunkAction<CustomerStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): ThunkAction<CustomerStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && !state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<Event> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport {\n    VisaCheckoutAddress,\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            },\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport { ChasePayHostWindow, JPMC } from '../chasepay/chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params?: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteBillingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteShippingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params?: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemotePaymentFailed, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.LoadRemoteSettingsFailed, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.SignOutRemoteCustomerFailed, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(RemoteCheckoutActionType.UpdateRemoteCheckout, data, { methodId });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if we try to call a method that is only a stub and has not\n * been fully implemented.\n */\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.name = 'NotImplementedError';\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport AmazonPayCustomerInitializeOptions from './amazon-pay-customer-initialize-options';\n\nexport default class AmazonPayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor, VisaCheckoutScriptLoader } from '../../../payment/strategies/braintree';\nimport { VisaCheckoutPaymentSuccessPayload } from '../../../payment/strategies/braintree/visacheckout';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategyActionCreator from '../../customer-strategy-action-creator';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (_, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n\n        return visaCheckoutButton;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { ChasePayScriptLoader, ChasePaySuccessPayload } from '../../../payment/strategies/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class ChasePayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        ChasePay.configure({\n                            language: storeConfig.storeProfile.storeLanguage,\n                        });\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: {\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            },\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport CustomerActionCreator from '../../customer-action-creator';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class DefaultCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport GooglePayCustomerInitializeOptions from './googlepay-customer-initialize-options';\n\nexport default class GooglePayCustomerStrategy implements CustomerStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId }  = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._googlePayPaymentProcessor.initialize(methodId)\n            .then(() => {\n                this._walletButton = this._createSignInButton(googlePayOptions.container);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _getGooglePayOptions(options: CustomerInitializeOptions): GooglePayCustomerInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError\n} from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { getCallbackUrl, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class MasterpassCustomerStrategy implements CustomerStrategy {\n    private _signInButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { masterpass: masterpassOptions, methodId } = options;\n\n        if (!masterpassOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.masterpass\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const cart = state.cart.getCart();\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                const { container } = masterpassOptions;\n\n                const payload = {\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                    allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n                    amount: cart.cartAmount.toString(),\n                    currency: cart.currency.code,\n                    cartId: cart.id,\n                    suppressShippingAddress: false,\n                    callbackUrl: getCallbackUrl('checkout'),\n                };\n\n                return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(Masterpass => {\n                        this._signInButton = this._createSignInButton(container);\n\n                        this._signInButton.addEventListener('click', () => {\n                            Masterpass.checkout(payload);\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        container.appendChild(button);\n\n        return button;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { NotImplementedError } from '../../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class SquareCustomerStrategy implements CustomerStrategy {\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {}\n\n    signIn(): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport { CountryActionType } from './country-actions';\nimport CountryRequestSender from './country-request-sender';\n\nexport default class CountryActionCreator {\n    constructor(\n        private _countryRequestSender: CountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(CountryActionType.LoadCountriesRequested));\n\n            this._countryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(CountryActionType.LoadCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CountryActionType.LoadCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\nimport OrderParams from './order-params';\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout, params }: RequestOptions<OrderParams> = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const include = [\n            'payments',\n            'lineItems.physicalItems.socialMedia',\n            'lineItems.physicalItems.options',\n            'lineItems.digitalItems.socialMedia',\n            'lineItems.digitalItems.options',\n        ];\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...include,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, from, of, Observable, Observer } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutValidator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\nimport { SpamProtectionAction, SpamProtectionActionCreator } from './spam-protection';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction | SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const externalSource = state.config.getExternalSource();\n                const checkout = state.checkout.getCheckout();\n                const orderMeta = state.order.getOrderMeta();\n                const storeConfig = state.config.getStoreConfig();\n                const spamProtectionToken = orderMeta && orderMeta.spamProtectionToken;\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { isSpamProtectionEnabled } = storeConfig.checkoutSettings;\n\n                if (isSpamProtectionEnabled && !spamProtectionToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingSpamProtectionToken);\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(this._mapToOrderRequestBody(\n                            payload,\n                            checkout.customerMessage,\n                            externalSource,\n                            spamProtectionToken\n                        ), options))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    executeSpamProtection(): ThunkAction<SpamProtectionAction> {\n        return store => {\n            const storeConfig = store.getState().config.getStoreConfig();\n\n            if (!storeConfig) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n            }\n\n            const { isSpamProtectionEnabled } = storeConfig.checkoutSettings;\n\n            if (!isSpamProtectionEnabled) {\n                return empty();\n            }\n\n            return this._spamProtectionActionCreator.execute();\n        };\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(\n        payload: OrderRequestBody,\n        customerMessage: string,\n        externalSource?: string,\n        spamProtectionToken?: string\n    ): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n                externalSource,\n                spamProtectionToken,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            externalSource,\n            spamProtectionToken,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","export interface MutationObeserverCreator {\n    prototype: MutationObserver;\n    new(callback: MutationCallback): MutationObserver;\n}\n\nexport interface MutationObserverWindow extends Window {\n    MutationObserver: MutationObeserverCreator;\n}\n\nexport class MutationObserverFactory {\n    constructor(\n        private _window: MutationObserverWindow = window as MutationObserverWindow\n    ) {}\n\n    create(callback: MutationCallback): MutationObserver {\n        return new this._window.MutationObserver(callback);\n    }\n}\n","import { StandardError } from '../../../common/error/errors';\n\n/**\n * Throw this error if we fail to complete the required spam protection\n * verification due to an unknown reason.\n */\nexport default class SpamProtectionFailedError extends StandardError {\n    constructor() {\n        super('We were not able to complete our spam protection verification. Please try again.');\n\n        this.name = 'SpamProtectionFailedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { StandardError } from '../../../common/error/errors';\n\n/**\n * Throw this error if the shopper chooses not to complete the spam protection\n * challenge (i.e.: they close the reCaptcha window).\n */\nexport default class SpamProtectionNotCompletedError extends StandardError {\n    constructor() {\n        super('You haven\\'t complete our spam protection verification. Please try again.');\n\n        this.name = 'SpamProtectionNotCompletedError';\n        this.type = 'spam_protection_not_completed';\n    }\n}\n","import { Observable, Subject } from 'rxjs';\n\nimport { MutationObserverFactory } from '../../common/dom/mutation-observer';\nimport { NotInitializedError, NotInitializedErrorType } from '../../common/error/errors';\n\nimport { SpamProtectionFailedError, SpamProtectionNotCompletedError } from './errors';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport interface RecaptchaResult {\n    error?: Error;\n    token?: string;\n}\n\nexport default class GoogleRecaptcha {\n    private _event$?: Subject<RecaptchaResult>;\n    private _recaptcha?: ReCaptchaV2.ReCaptcha;\n\n    constructor(\n        private googleRecaptchaScriptLoader: GoogleRecaptchaScriptLoader,\n        private mutationObserverFactory: MutationObserverFactory\n    ) {}\n\n    load(containerId: string, sitekey: string): Promise<void> {\n        const event$ = new Subject<RecaptchaResult>();\n        this._event$ = event$;\n\n        return this.googleRecaptchaScriptLoader.load()\n            .then(recaptcha => {\n                recaptcha.render(containerId, {\n                    sitekey,\n                    size: 'invisible',\n                    callback: () => {\n                        event$.next({\n                            token: recaptcha.getResponse(),\n                        });\n                        recaptcha.reset();\n                    },\n                    'error-callback': () => {\n                        event$.next({\n                            error: new SpamProtectionFailedError(),\n                        });\n                    },\n                });\n\n                this._recaptcha = recaptcha;\n            });\n    }\n\n    execute(): Observable<RecaptchaResult> {\n        if (!this._event$ || !this._recaptcha) {\n            throw new NotInitializedError(NotInitializedErrorType.SpamProtectionNotInitialized);\n        }\n\n        this._watchRecaptchaChallengeWindow(this._event$);\n\n        this._recaptcha.execute();\n\n        return this._event$;\n    }\n\n    private _watchRecaptchaChallengeWindow(event: Subject<RecaptchaResult>) {\n        const iframeElement = document.querySelector('iframe[title=\"recaptcha challenge\"]');\n\n        if (!iframeElement) {\n            throw new Error('Recaptcha challenge iframe not found.');\n        }\n\n        const iframeContainer = iframeElement.parentElement;\n\n        if (!iframeContainer) {\n            throw new Error('Recaptcha challenge iframe container not found.');\n        }\n\n        const container = iframeContainer.parentElement;\n\n        if (!container) {\n            throw new Error('Recaptcha challenge container not found.');\n        }\n\n        this.mutationObserverFactory.create(() => {\n            // When customer closes the Google ReCaptcha challenge window, throw SpamProtectionNotCompletedError\n            if (container.style.visibility === 'hidden') {\n                event.next({\n                    error: new SpamProtectionNotCompletedError(),\n                });\n            }\n        }).observe(container, { attributes: true, attributeFilter: ['style'] });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nexport default class GoogleRecaptchaScriptLoader {\n    private _loadPromise?: Promise<ReCaptchaV2.ReCaptcha>;\n\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GoogleRecaptchaWindow = window\n    ) {}\n\n    load(): Promise<ReCaptchaV2.ReCaptcha> {\n        if (!this._loadPromise) {\n            this._loadPromise = this._loadScript();\n        }\n\n        return this._loadPromise;\n    }\n\n    private _loadScript(): Promise<ReCaptchaV2.ReCaptcha> {\n        const callbackName = 'initRecaptcha';\n        const params = [\n            `onload=${callbackName}`,\n            'render=explicit',\n        ].join('&');\n\n        return new Promise((resolve, reject) => {\n            this._window[callbackName] = () => resolve(this._window.grecaptcha);\n\n            this._scriptLoader.loadScript(`//www.google.com/recaptcha/api.js?${params}`)\n                .catch(error => {\n                    this._loadPromise = undefined;\n                    reject(error);\n                });\n        });\n    }\n}\n\nexport interface GoogleRecaptchaWindow extends Window {\n    grecaptcha?: ReCaptchaV2.ReCaptcha;\n    initRecaptcha?(): void;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable, Observer } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport { SpamProtectionAction, SpamProtectionActionType } from './spam-protection-actions';\nimport { SpamProtectionOptions } from './spam-protection-options';\n\nexport default class SpamProtectionActionCreator {\n    constructor(\n        private _googleRecaptcha: GoogleRecaptcha\n    ) {}\n\n    initialize(options: SpamProtectionOptions): ThunkAction<SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<SpamProtectionAction>) => {\n            const state = store.getState();\n            const config = state.config.getConfig();\n            const { containerId } = options;\n\n            if (!config) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n            }\n\n            observer.next(createAction(SpamProtectionActionType.InitializeRequested, undefined));\n\n            const recaptchaSitekey = config.storeConfig.checkoutSettings.googleRecaptchaSitekey;\n\n            return this._googleRecaptcha.load(containerId, recaptchaSitekey)\n                .then(() => {\n                    observer.next(createAction(SpamProtectionActionType.InitializeSucceeded));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(SpamProtectionActionType.InitializeFailed, error, containerId));\n                });\n        });\n    }\n\n    execute(): Observable<SpamProtectionAction> {\n        return concat(\n            of(createAction(SpamProtectionActionType.ExecuteRequested, undefined)),\n            this._googleRecaptcha.execute()\n                .pipe(take(1))\n                .pipe(switchMap(({ error, token }) => {\n                    return error ?\n                        throwError(createErrorAction(SpamProtectionActionType.SubmitFailed, error)) :\n                        of(createAction(SpamProtectionActionType.Completed, token));\n                }))\n        );\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if we are trying to make an order finalization request for a\n * payment method that does not require such procedure.\n */\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","enum PaymentStrategyType {\n    AFFIRM = 'affirm',\n    AFTERPAY = 'afterpay',\n    AMAZON = 'amazon',\n    CREDIT_CARD = 'creditcard',\n    CYBERSOURCE = 'cybersource',\n    KLARNA = 'klarna',\n    LEGACY = 'legacy',\n    OFFLINE = 'offline',\n    OFFSITE = 'offsite',\n    PAYPAL = 'paypal',\n    PAYPAL_EXPRESS = 'paypalexpress',\n    PAYPAL_EXPRESS_CREDIT = 'paypalexpresscredit',\n    SAGE_PAY = 'sagepay',\n    SQUARE = 'squarev2',\n    STRIPEV3 = 'stripev3',\n    NO_PAYMENT_DATA_REQUIRED = 'nopaymentdatarequired',\n    BRAINTREE = 'braintree',\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    BRAINTREE_VISA_CHECKOUT = 'braintreevisacheckout',\n    BRAINTREE_GOOGLE_PAY = 'googlepaybraintree',\n    CHASE_PAY = 'chasepay',\n    WE_PAY = 'wepay',\n    MASTERPASS = 'masterpass',\n    STRIPE_GOOGLE_PAY = 'googlepaystripe',\n    ZIP = 'zip',\n    CONVERGE = 'converge',\n}\n\nexport default PaymentStrategyType;\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of, Observable, Observer } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\nimport { SpamProtectionAction } from '../order/spam-protection';\n\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport {\n    PaymentStrategyActionType,\n    PaymentStrategyDeinitializeAction,\n    PaymentStrategyExecuteAction,\n    PaymentStrategyFinalizeAction,\n    PaymentStrategyInitializeAction,\n    PaymentStrategyWidgetAction,\n} from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction | SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => concat(\n            this._orderActionCreator.executeSpamProtection()(store),\n            new Observable((observer: Observer<PaymentStrategyExecuteAction>) => {\n                const state = store.getState();\n                const { payment = {} as OrderPaymentRequestBody, useStoreCredit } = payload;\n                const meta = { methodId: payment.methodId };\n\n                let strategy: PaymentStrategy;\n\n                if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                    const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                    if (!method) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    strategy = this._strategyRegistry.getByMethod(method);\n                } else {\n                    strategy = this._strategyRegistry.get(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED);\n                }\n\n                observer.next(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta));\n\n                strategy\n                    .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                    .then(() => {\n                        observer.next(createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n                        observer.complete();\n                    })\n                    .catch(error => {\n                        observer.error(createErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta));\n                    });\n            })\n        );\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const { providerId = '', gatewayId = '' } = state.payment.getPaymentId() || {};\n                const method = state.paymentMethods.getPaymentMethod(providerId, gatewayId);\n\n                if (!method) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: method.id }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyInitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && state.paymentStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .initialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && !state.paymentStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .deinitialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): ThunkAction<PaymentStrategyWidgetAction> {\n        return () => Observable.create((observer: Observer<PaymentStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                    })),\n                giftCertificates: cart.lineItems.giftCertificates\n                    .slice()\n                    .sort((itemA, itemB) => `${itemA.id}`.localeCompare(`${itemB.id}`))\n                    .map(item => ({\n                        amount: item.amount,\n                        recipient: item.recipient,\n                    })),\n                physicalItems: cart.lineItems.physicalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                        giftWrapping: item.giftWrapping,\n                    })),\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.name = 'CartChangedError';\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.outstandingBalance === response.body.outstandingBalance\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\nimport StoreCreditRequestSender from './store-credit-request-sender';\n\nexport default class StoreCreditActionCreator {\n    constructor(\n        private _storeCreditRequestSender: StoreCreditRequestSender\n    ) {}\n\n    applyStoreCredit(useStoreCredit: boolean, options?: RequestOptions): ThunkAction<StoreCreditAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(StoreCreditActionType.ApplyStoreCreditRequested)),\n            defer(async () => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { body } = await (useStoreCredit ?\n                    this._storeCreditRequestSender.applyStoreCredit(checkout.id, options) :\n                    this._storeCreditRequestSender.removeStoreCredit(checkout.id, options));\n\n                return createAction(StoreCreditActionType.ApplyStoreCreditSucceeded, body);\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(StoreCreditActionType.ApplyStoreCreditFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class StoreCreditRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyStoreCredit(checkoutId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/store-credit`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n\n    removeStoreCredit(checkoutId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/store-credit`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { OrderActionCreator } from '../order';\n\nimport Payment from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentRequestTransformer: PaymentRequestTransformer\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            from(this._paymentRequestSender.submitPayment(\n                this._paymentRequestTransformer.transform(payment, store.getState())\n            ))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment(\n        methodId: string,\n        gatewayId?: string\n    ): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store => {\n            const payload = this._paymentRequestTransformer.transform({ gatewayId, methodId }, store.getState());\n\n            return concat(\n                of(createAction(PaymentActionType.InitializeOffsitePaymentRequested)),\n                this._paymentRequestSender.initializeOffsitePayment(payload)\n                    .then(() => createAction(PaymentActionType.InitializeOffsitePaymentSucceeded))\n            ).pipe(\n                catchError(error => throwErrorAction(PaymentActionType.InitializeOffsitePaymentFailed, error))\n            );\n        };\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: {},\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n","import { pick } from 'lodash';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { mapToInternalOrder } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument from './is-vaulted-instrument';\nimport Payment from './payment';\nimport PaymentMethod from './payment-method';\nimport PaymentMethodSelector from './payment-method-selector';\nimport PaymentRequestBody from './payment-request-body';\n\nexport default class PaymentRequestTransformer {\n    transform(payment: Payment, checkoutState: InternalCheckoutSelectors): PaymentRequestBody {\n        const billingAddress = checkoutState.billingAddress.getBillingAddress();\n        const checkout = checkoutState.checkout.getCheckout();\n        const customer = checkoutState.customer.getCustomer();\n        const order = checkoutState.order.getOrder();\n        const paymentMethod = this._getPaymentMethod(checkoutState.paymentMethods, payment.methodId, payment.gatewayId);\n        const shippingAddress = checkoutState.shippingAddress.getShippingAddress();\n        const consignments = checkoutState.consignments.getConsignments();\n        const shippingOption = checkoutState.consignments.getShippingOption();\n        const storeConfig = checkoutState.config.getStoreConfig();\n        const contextConfig = checkoutState.config.getContextConfig();\n        const instrumentMeta = checkoutState.instruments.getInstrumentsMeta();\n        const paymentMeta = checkoutState.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = checkoutState.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && payment.paymentData && isVaultedInstrument(payment.paymentData) ?\n            `${checkoutState.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            checkoutState.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentToken);\n        }\n\n        return {\n            authToken,\n            paymentMethod,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _getPaymentMethod(\n        paymentMethodSelector: PaymentMethodSelector,\n        methodId: string,\n        gatewayId?: string\n    ): PaymentMethod | undefined {\n        const paymentMethod = paymentMethodSelector.getPaymentMethod(methodId, gatewayId);\n\n        if (!paymentMethod) {\n            return;\n        }\n\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        return paymentMethod;\n    }\n}\n","export enum OrderIncludes {\n    DigitalItemsCategories = 'lineItems.digitalItems.categories',\n    PhysicalItemsCategories = 'lineItems.physicalItems.categories',\n}\n\nexport default interface OrderParams {\n    include?: OrderIncludes[];\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry } from '../common/registry';\nimport { RegistryOptions } from '../common/registry/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategyType from './payment-strategy-type';\nimport PaymentStrategy from './strategies/payment-strategy';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy, PaymentStrategyType> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n        const cacheToken = paymentMethod.gateway || paymentMethod.id;\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): PaymentStrategyType {\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this._hasFactoryForMethod(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return PaymentStrategyType.OFFLINE;\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return PaymentStrategyType.LEGACY;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return PaymentStrategyType.OFFSITE;\n        }\n\n        return PaymentStrategyType.CREDIT_CARD;\n    }\n\n    private _hasFactoryForMethod(\n        methodId: string\n    ): methodId is PaymentStrategyType {\n        return this._hasFactory(methodId);\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when we are unable to submit a payment because\n * the caller has not provided all the required fields, i.e.: if an argument is\n * missing or it is not the expected data type.\n */\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when the payment flow is cancelled. It could be\n * due to a deliberate user interaction, i.e.: the user clicks on a cancel\n * button which dismisses the payment modal.\n */\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","import { LineItemCategory } from '../../../cart/line-item';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { AmountTransformer } from '../../../common/utility';\nimport { Order, OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { OrderIncludes } from '../../../order/order-params';\nimport { Consignment } from '../../../shipping';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Affirm, AffirmAddress, AffirmDiscount, AffirmFailResponse, AffirmItem, AffirmRequestData, AffirmSuccessResponse } from './affirm';\nimport AffirmScriptLoader from './affirm-script-loader';\n\nexport default class AffirmPaymentStrategy implements PaymentStrategy {\n    private _affirm?: Affirm;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _affirmScriptLoader: AffirmScriptLoader\n    ) { }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { config: { testMode }, clientToken: publicKey } = paymentMethod;\n\n                return this._affirmScriptLoader.load(publicKey, testMode);\n            })\n            .then(affirm => {\n                this._affirm = affirm;\n\n                return this._store.getState();\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const methodId = payload.payment && payload.payment.methodId;\n        const { useStoreCredit } = payload;\n        const { _affirm } = this;\n\n        if (!_affirm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        const requestOptions = {\n            ...options,\n            params: {\n                include: [\n                    OrderIncludes.PhysicalItemsCategories,\n                    OrderIncludes.DigitalItemsCategories,\n                ],\n            },\n        };\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, requestOptions))\n            .then<AffirmSuccessResponse>(() => {\n                _affirm.checkout(this._getCheckoutInformation());\n\n                return new Promise((resolve, reject) => {\n                    _affirm.checkout.open({\n                        onFail: (failObject: AffirmFailResponse) => {\n                            failObject.reason === 'canceled' ? reject(new PaymentMethodCancelledError()) : reject(new PaymentMethodInvalidError());\n                        },\n                        onSuccess: successObject => { resolve(successObject); },\n                    });\n                    _affirm.ui.error.on('close', () => {\n                        reject(new PaymentMethodCancelledError());\n                    });\n                });\n            })\n            .then(result => {\n                const paymentPayload = {\n                    methodId,\n                    paymentData: { nonce: result.checkout_token },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._affirm) {\n            this._affirm = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getCheckoutInformation(): AffirmRequestData {\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const consignments = state.consignments.getConsignments();\n        const order = state.order.getOrder();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const amountTransformer = new AmountTransformer(order.currency.decimalPlaces);\n        const billingAddress = this._getBillingAddress();\n\n        return {\n            merchant: {\n                user_confirmation_url: config.links.checkoutLink,\n                user_cancel_url: config.links.checkoutLink,\n                user_confirmation_url_action: 'POST',\n            },\n            shipping: this._getShippingAddress() || billingAddress,\n            billing: billingAddress,\n            items: this._getItems(amountTransformer, order),\n            metadata: {\n                shipping_type: this._getShippingType(consignments),\n                mode: 'modal',\n                platform_type: 'BigCommerce',\n                platform_version: '',\n                platform_affirm: '',\n            },\n            discounts: this._getDiscounts(amountTransformer, order),\n            order_id: order.orderId ? order.orderId.toString() : '',\n            shipping_amount: amountTransformer.toInteger(order.shippingCostTotal),\n            tax_amount: amountTransformer.toInteger(order.taxTotal),\n            total: amountTransformer.toInteger(order.orderAmount),\n        };\n    }\n\n    private _getShippingType(consignments?: Consignment[]): string {\n        if (!consignments) {\n            return '';\n        }\n\n        const consignment = consignments[0];\n\n        return consignment && consignment.selectedShippingOption ?\n            consignment.selectedShippingOption.type : '';\n    }\n\n    private _getBillingAddress(): AffirmAddress {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const billingInformation = {\n            name: {\n                first: billingAddress.firstName,\n                last: billingAddress.lastName,\n                full: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            },\n            address: {\n                line1: billingAddress.address1,\n                line2: billingAddress.address2,\n                city: billingAddress.city,\n                state: billingAddress.stateOrProvinceCode,\n                zipcode: billingAddress.postalCode,\n                country: billingAddress.countryCode,\n            },\n            phone_number: billingAddress.phone,\n            email: billingAddress.email,\n        };\n\n        return billingInformation;\n    }\n\n    private _getShippingAddress(): AffirmAddress | undefined {\n        const state = this._store.getState();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n\n        if (!shippingAddress) {\n            return;\n        }\n\n        const shippingInformation = {\n            name: {\n                first: shippingAddress.firstName,\n                last: shippingAddress.lastName,\n                full: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            },\n            address: {\n                line1: shippingAddress.address1,\n                line2: shippingAddress.address2,\n                city: shippingAddress.city,\n                state: shippingAddress.stateOrProvinceCode,\n                zipcode: shippingAddress.postalCode,\n                country: shippingAddress.countryCode,\n            },\n            phone_number: shippingAddress.phone,\n        };\n\n        return shippingInformation;\n    }\n\n    private _getItems(amountTransformer: AmountTransformer, order: Order): AffirmItem[] {\n        const items: AffirmItem[] = [];\n\n        for (const item of order.lineItems.physicalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this._getCategories(item.categories),\n            });\n        }\n\n        for (const item of order.lineItems.digitalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this._getCategories(item.categories),\n            });\n        }\n\n        for (const item of order.lineItems.giftCertificates) {\n            items.push({\n                display_name: item.name,\n                sku: '',\n                unit_price: amountTransformer.toInteger(item.amount),\n                qty: 1,\n                item_image_url: '',\n                item_url: '',\n            });\n        }\n\n        if (order.lineItems.customItems) {\n            for (const item of order.lineItems.customItems) {\n                items.push({\n                    display_name: item.name,\n                    sku: item.sku,\n                    unit_price: amountTransformer.toInteger(item.listPrice),\n                    qty: item.quantity,\n                    item_image_url: '',\n                    item_url: '',\n                });\n            }\n        }\n\n        return items;\n    }\n\n    private _getDiscounts(amountTransformer: AmountTransformer, order: Order): AffirmDiscount {\n        const discounts: AffirmDiscount = {};\n\n        for (const line of order.coupons) {\n            if (line.discountedAmount > 0) {\n                discounts[line.code] = {\n                    discount_amount: amountTransformer.toInteger(line.discountedAmount),\n                    discount_display_name: line.displayName,\n                };\n            }\n        }\n\n        if (order.discountAmount > 0) {\n            discounts.DISCOUNTED_AMOUNT = {\n                discount_amount: amountTransformer.toInteger(order.discountAmount),\n                discount_display_name: 'discount',\n            };\n        }\n\n        return discounts;\n    }\n\n    private _getCategories(categories?: LineItemCategory[][]): string[][] {\n        if (!categories) {\n            return[[]];\n        }\n\n        return categories.map(categoryTree => categoryTree.map(category => category.name));\n    }\n}\n","/**\n * Used this approach as Affirm uses snipped for initializing. Please refer to Affirm documentation in: https://docs.affirm.com/Integrate_Affirm/Direct_API#1._Add_Affirm.js\n */\nexport default Function(`\n'use strict';\nreturn function loadAffirmJS(apiKey, scriptURL) {\n    var _affirm_config = {\n        public_api_key:  apiKey,\n        script:          scriptURL\n    };\n    (function(l,g,m,e,a,f,b){var d,c=l[m]||{},h=document.createElement(f),n=document.getElementsByTagName(f)[0],k=function(a,b,c){return function(){a[b]._.push([c,arguments])}};c[e]=k(c,e,\"set\");d=c[e];c[a]={};c[a]._=[];d._=[];c[a][b]=k(c,a,b);a=0;for(b=\"set add save post open empty reset on off trigger ready setProduct\".split(\" \");a<b.length;a++)d[b[a]]=k(c,e,b[a]);a=0;for(b=[\"get\",\"token\",\"url\",\"items\"];a<b.length;a++)d[b[a]]=function(){};h.async=!0;h.src=g[f];n.parentNode.insertBefore(h,n);delete g[f];d(g);l[m]=c})(window,_affirm_config,\"affirm\",\"checkout\",\"ui\",\"script\",\"ready\");\n}`)();\n","import { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { Affirm, AffirmHostWindow, AffirmScripts } from './affirm';\nimport loadAffirmJS from './affirmJs';\n\nexport default class AffirmScriptLoader {\n    constructor(\n        public _window: AffirmHostWindow = window\n    ) { }\n\n    load(apikey?: string, testMode?: boolean): Promise<Affirm> {\n        const scriptURI = this._getScriptURI(testMode);\n\n        loadAffirmJS(apikey, scriptURI);\n\n        if (!this._window.affirm) {\n            throw new PaymentMethodClientUnavailableError();\n        }\n\n        return Promise.resolve(this._window.affirm);\n    }\n\n    private _getScriptURI(testMode: boolean = false): string {\n        const SCRIPTS_DEFAULT: AffirmScripts = {\n            PROD: '//cdn1.affirm.com/js/v2/affirm.js',\n            SANDBOX: '//cdn1-sandbox.affirm.com/js/v2/affirm.js',\n        };\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { StoreCreditActionCreator } from '../../../store-credit';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy implements PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._afterpaySdk = await this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName));\n\n        return this._store.getState();\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        let state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n        const { useStoreCredit } = payload;\n\n        if (useStoreCredit !== undefined) {\n            state = await this._store.dispatch(\n                this._storeCreditActionCreator.applyStoreCredit(useStoreCredit)\n            );\n        }\n\n        await this._checkoutValidator.validate(state.checkout.getCheckout(), options);\n\n        state = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n        );\n\n        await this._redirectToAfterpay(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId));\n\n        // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n        return new Promise<never>(() => {});\n    }\n\n    async finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n        const config = state.config.getContextConfig();\n\n        if (!payment) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config || !config.payment.token) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const paymentPayload = {\n            methodId: payment.providerId,\n            paymentData: { nonce: config.payment.token },\n        };\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder({}, options));\n\n        return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n    }\n\n    private _redirectToAfterpay(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.redirect({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (_: any, key: string) => isPrivate(key));\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { noop } from 'lodash';\n\nimport {\n    isInternalAddressEqual,\n    mapFromInternalAddress,\n    mapToInternalAddress\n} from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    RequestError\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayConfirmationFlow from './amazon-pay-confirmation-flow';\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayPaymentInitializeOptions from './amazon-pay-payment-initialize-options';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._walletOptions = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const sellerId = this._getMerchantId();\n\n        if (!referenceId || !sellerId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit = false } = payload;\n\n        if (options && this._paymentMethod && this._paymentMethod.config.is3dsEnabled) {\n            return this._processPaymentWith3ds(\n                sellerId,\n                referenceId,\n                paymentPayload.methodId,\n                useStoreCredit,\n                options\n            );\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => onPaymentSelect(orderReference))\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!walletOptions.amazonOrderReferenceId) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n\n    private _processPaymentWith3ds(sellerId: string, referenceId: string, methodId: string, useStoreCredit: boolean, options: PaymentRequestOptions): Promise<never> {\n        return new Promise((_, reject) => {\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            return this._window.OffAmazonPayments.initConfirmationFlow(\n                sellerId,\n                referenceId,\n                (confirmationFlow: AmazonPayConfirmationFlow) => {\n                    return this._store.dispatch(\n                        this._orderActionCreator.submitOrder({useStoreCredit}, options)\n                    )\n                        .then(() => this._store.dispatch(\n                            this._remoteCheckoutActionCreator.initializePayment(methodId, {\n                                referenceId,\n                                useStoreCredit,\n                            }))\n                        )\n                        .then(() => {\n                            confirmationFlow.success();\n\n                            return new Promise<never>(() => {});\n                        })\n                        .catch(error => {\n                            confirmationFlow.error();\n\n                            return reject(error);\n                        });\n                }\n            );\n        });\n    }\n}\n","export interface OverlayOptions {\n    background?: string;\n    id?: string;\n    transitionDuration?: number;\n}\n\nexport interface OverlayShowOptions {\n    onClick?(event: MouseEvent): void;\n}\n\nexport default class Overlay {\n    private _element: HTMLElement;\n    private _unregisterClick?: () => void;\n\n    constructor(options?: OverlayOptions) {\n        this._element = this._createElement(options);\n    }\n\n    show(options?: OverlayShowOptions): void {\n        if (this._element.parentElement) {\n            return;\n        }\n\n        this._registerClick(options);\n\n        document.body.appendChild(this._element);\n\n        // Fade In\n        setTimeout(() => this._element.style.opacity = '1');\n    }\n\n    remove(): void {\n        if (!this._element.parentElement) {\n            return;\n        }\n\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        this._removeAfterTransition();\n\n        setTimeout(() => this._element.style.opacity = '0');\n    }\n\n    private _createElement(options?: OverlayOptions): HTMLElement {\n        const element = document.createElement('div');\n        const {\n            background = 'rgba(0, 0, 0, 0.8)',\n            id = null,\n            transitionDuration = 400,\n        } = options || {};\n\n        element.style.background = background;\n        element.style.display = 'block';\n        element.style.height = '100%';\n        element.style.left = '0px';\n        element.style.opacity = '0';\n        element.style.position = 'fixed';\n        element.style.top = '0px';\n        element.style.transition = `opacity ${transitionDuration}ms ease-out`;\n        element.style.width = '100%';\n        element.style.zIndex = '2147483647';\n\n        if (id) {\n            element.id = id;\n        }\n\n        return element;\n    }\n\n    private _registerClick(options?: OverlayShowOptions): void {\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        if (options && options.onClick) {\n            const { onClick } = options;\n\n            this._element.addEventListener('click', onClick);\n\n            this._unregisterClick = () => {\n                this._element.removeEventListener('click', onClick);\n                this._unregisterClick = undefined;\n            };\n        }\n    }\n\n    private _removeAfterTransition(): void {\n        const handeTransition: (event: Event) => void = event => {\n            // NOTE: `event` is not correctly typed in this version of TS\n            if ((event as TransitionEvent).propertyName !== 'opacity') {\n                return;\n            }\n\n            if (this._element.parentElement) {\n                this._element.parentElement.removeChild(this._element);\n            }\n\n            this._element.removeEventListener('transitionend', handeTransition);\n        };\n\n        this._element.addEventListener('transitionend', handeTransition);\n    }\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((_, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { Overlay } from '../../../common/overlay';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _overlay: Overlay\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal(amount: number, storeLanguage: string, currency: string, offerCredit: boolean): Promise<NonceInstrument> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => {\n                this._overlay.show({\n                    onClick: () => paypal.focusWindow(),\n                });\n\n                return paypal.tokenize({\n                    amount,\n                    currency,\n                    enableShippingAddress: true,\n                    flow: 'checkout',\n                    locale: storeLanguage,\n                    offerCredit,\n                    useraction: 'commit',\n                });\n            })\n            .then(response => {\n                this._overlay.remove();\n\n                return response;\n            })\n            .catch(error => {\n                this._overlay.remove();\n\n                throw error;\n            });\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<NonceInstrument> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a payment method experiences some kind of\n * failure (i.e.: its client library returns a rejected promise). And there is\n * no other error type that is more specific than this one.\n */\nexport default class PaymentMethodFailedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to proceed because the client library of a payment method has thrown an unexpected error.');\n\n        this.name = 'PaymentMethodFailedError';\n        this.type = 'payment_method_client_invalid';\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodFailedError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment, { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy implements PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return this._store.getState();\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new PaymentMethodFailedError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const order = state.order.getOrder();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrder);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, order.orderAmount) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError, PaymentMethodFailedError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BraintreeError } from './braintree';\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport isBraintreeError from './is-braintree-error';\n\nexport default class BraintreePaypalPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => this._store.getState())\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment, order.useStoreCredit) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: BraintreeError | Error): never {\n        if (!isBraintreeError(error)) {\n            throw error;\n        }\n\n        if (error.code === 'PAYPAL_POPUP_CLOSED') {\n            throw new PaymentMethodCancelledError(error.message);\n        }\n\n        throw new PaymentMethodFailedError(error.message);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody, useStoreCredit?: boolean): Promise<Payment> {\n        const state = this._store.getState();\n        const grandTotal = state.checkout.getOutstandingBalance(useStoreCredit);\n        const config = state.config.getStoreConfig();\n\n        if (!grandTotal) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { method, nonce } = this._paymentMethod;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: { nonce, method } });\n        }\n\n        const tokenizedCard = this._braintreePaymentProcessor\n            .paypal(grandTotal, storeLanguage, currency.code, this._credit);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData: { ...paymentData, method } }));\n    }\n}\n","export const CardinalSignatureValidationErrors = [100004, 1010, 1011, 1020];\n\nexport interface CardinalSDK {\n    configure(params: CardinalConfiguration): void;\n    on(params: CardinalEventType, callback: CardinalEventMap[CardinalEventType]): void;\n    off(params: CardinalEventType): void;\n    setup<K extends keyof CardinalInitializationDataMap>(initializationType: K, initializationData: CardinalInitializationDataMap[K]): void;\n    trigger(event: CardinalTriggerEvents, data?: string): Promise<CardinalBinProcessResponse | void>;\n    continue(paymentBrand: CardinalPaymentBrand, continueObject: CardinalContinue, order: CardinalPartialOrder): void;\n    start(paymentBrand: CardinalPaymentBrand, order: CardinalPartialOrder, jwt?: string): void;\n}\n\nexport interface CardinalWindow extends Window {\n    Cardinal?: CardinalSDK;\n}\n\nexport interface CardinalEventMap {\n    [CardinalEventType.SetupCompleted](setupCompleteData: CardinalSetupCompletedData): void;\n    [CardinalEventType.Validated](data: CardinalValidatedData, jwt?: string): void;\n}\n\nexport type CardinalConfiguration = Partial<{\n    logging: {\n        level: string;\n    };\n    payment: {\n        view: string;\n        framework: string;\n        displayLoading: boolean;\n    };\n}>;\n\nexport interface CardinalSetupCompletedData {\n    sessionId: string;\n    modules: CardinalModuleState[];\n}\n\nexport interface CardinalModuleState {\n    loaded: boolean;\n    module: string;\n}\n\nexport enum CardinalInitializationType {\n    Init = 'init',\n    Complete = 'complete',\n    Confirm = 'confirm',\n}\n\nexport interface CardinalInitializationDataMap {\n    [CardinalInitializationType.Init]: CardinalInitTypeData;\n    [CardinalInitializationType.Complete]: CardinalCompleteTypeData;\n    [CardinalInitializationType.Confirm]: CardinalConfirmTypeData;\n}\n\nexport interface CardinalInitTypeData {\n    jwt: string;\n}\n\nexport interface CardinalCompleteTypeData {\n    Status: string;\n}\n\nexport interface CardinalConfirmTypeData {\n    jwt: string;\n    cardinalResponseJwt: string;\n}\n\nexport interface CardinalValidatedData {\n    ActionCode?: CardinalValidatedAction;\n    ErrorDescription: string;\n    ErrorNumber: number;\n    Validated: boolean;\n    Payment?: CardinalPayment;\n}\n\nexport interface CardinalPayment {\n    ExtendedData?: CardinalCCAExtendedData;\n    ProcessorTransactionId: string;\n    Type: CardinalPaymentType;\n}\n\nexport interface CardinalBinProcessResponse {\n    Status: boolean;\n}\n\nexport interface CardinalContinue {\n    AcsUrl: string;\n    Payload: string;\n}\n\nexport interface CardinalPartialOrder {\n    OrderDetails: CardinalOrderDetails;\n    Consumer?: CardinalConsumer;\n}\n\nexport interface CardinalConsumer {\n    Email1?: string;\n    Email2?: string;\n    ShippingAddress?: CardinalAddress;\n    BillingAddress?: CardinalAddress;\n    Account?: CardinalAccount;\n}\n\nexport interface CardinalAccount {\n    AccountNumber: number;\n    ExpirationMonth: number;\n    ExpirationYear: number;\n    NameOnAccount: string;\n    CardCode: number;\n}\n\nexport interface CardinalAddress {\n    FullName?: string;\n    FirstName: string;\n    MiddleName?: string;\n    LastName: string;\n    Address1: string;\n    Address2?: string;\n    Address3?: string;\n    City: string;\n    State: string;\n    PostalCode: string;\n    CountryCode: string;\n    Phone1?: string;\n    Phone2?: string;\n}\n\nexport interface CardinalOrderDetails {\n    OrderNumber: string;\n    Amount: number;\n    CurrencyCode: string;\n    OrderDescription?: string;\n    OrderChannel: string;\n    TransactionId?: string;\n}\n\nexport type CardinalCCAExtendedData = Partial<{\n    CAVV: string;\n    ECIFlag: string;\n    PAResStatus: string;\n    SignatureVerification: string;\n    XID: string;\n    UCAFIndicator: string;\n}>;\n\nexport enum CardinalEventType {\n    SetupCompleted = 'payments.setupComplete',\n    Validated = 'payments.validated',\n}\n\nexport enum CardinalValidatedAction {\n    Success = 'SUCCESS',\n    NoAction = 'NOACTION',\n    Failure = 'FAILURE',\n    Error = 'ERROR',\n}\n\nexport enum CardinalPaymentType {\n    CCA = 'CCA',\n    Paypal = 'Paypal',\n    Wallet = 'Wallet',\n    VisaCheckout = 'VisaCheckout',\n    ApplePay = 'ApplePay',\n    DiscoverWallet = 'DiscoverWallet',\n}\n\nexport enum CardinalTriggerEvents {\n    BinProcess = 'bin.process',\n}\n\nexport enum CardinalPaymentBrand {\n    CCA = 'cca',\n}\n\nexport enum CardinalSignatureVerification {\n    Yes = 'Y',\n    No = 'N',\n}\n","import { BraintreeError } from './braintree';\n\nexport default function isBraintreeError(error: BraintreeError | Error): error is BraintreeError {\n    return error.name === 'BraintreeError';\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodFailedError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\nimport VisaCheckoutScriptLoader from './visacheckout-script-loader';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (_, error) => onError(error));\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new PaymentMethodFailedError(error.message);\n        }\n\n        throw error;\n    }\n}\n","import { find, some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    RequestError\n} from '../../../common/error/errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport {\n    CardinalClient,\n    CardinalOrderData,\n    CardinalSupportedPaymentInstrument\n} from './index';\n\nexport default class CardinalThreeDSecureFlow {\n    private _paymentMethod?: PaymentMethod;\n    private _clientToken?: string;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _cardinalClient: CardinalClient\n    ) {}\n\n    prepare(methodId: string): Promise<void> {\n        if (this._clientToken) {\n            return Promise.resolve();\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._cardinalClient.initialize(methodId, this._paymentMethod.config.testMode);\n            })\n            .then(() => {\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._clientToken = this._paymentMethod.clientToken;\n\n                return this._cardinalClient.configure(this._clientToken);\n            });\n    }\n\n    start(payment: Payment): Promise<InternalCheckoutSelectors> {\n        if (!payment.paymentData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        if (!isCreditCardLike(payment.paymentData) && !isVaultedInstrument(payment.paymentData)) {\n            throw new InvalidArgumentError();\n        }\n\n        const paymentData = payment.paymentData;\n\n        return this._cardinalClient.runBinProcess(this._getBinNumber(paymentData))\n            .then(() => {\n                if (!this._clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                payment = {\n                    ...payment,\n                    paymentData: {\n                        ...paymentData,\n                        threeDSecure: { token: this._clientToken },\n                    },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n            })\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, {code: 'three_d_secure_required'})) {\n                    return Promise.reject(error);\n                }\n\n                return this._cardinalClient.getThreeDSecureData(\n                    error.body.three_ds_result,\n                    this._getOrderData(paymentData)\n                )\n                .then(threeDSecure =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({\n                        ...payment,\n                        paymentData: {\n                            ...paymentData,\n                            threeDSecure,\n                        },\n                    }))\n                );\n            });\n    }\n\n    private _getBinNumber(payment: CardinalSupportedPaymentInstrument): string {\n        if (isVaultedInstrument(payment)) {\n            const instruments = this._store.getState().instruments.getInstruments();\n\n            const { instrumentId } = payment;\n\n            const entry = find(instruments, { bigpayToken: instrumentId });\n\n            return entry && entry.iin || '';\n        }\n\n        return payment.ccNumber;\n    }\n\n    private _getOrderData(paymentData: CardinalSupportedPaymentInstrument): CardinalOrderData {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const checkout = state.checkout.getCheckout();\n        const order = state.order.getOrder();\n\n        if (!billingAddress || !billingAddress.email) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrder);\n        }\n\n        const payment: CardinalOrderData = {\n            billingAddress,\n            shippingAddress,\n            currencyCode: checkout.cart.currency.code,\n            id: order.orderId.toString(),\n            amount: checkout.cart.cartAmount,\n        };\n\n        if (isCreditCardLike(paymentData)) {\n            payment.paymentData = paymentData;\n        }\n\n        return payment;\n    }\n}\n","import { includes } from 'lodash';\n\nimport { Address } from '../../../address';\nimport { BillingAddress } from '../../../billing';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethodFailedError } from '../../errors';\nimport { CreditCardInstrument, ThreeDSecureToken, VaultedInstrument } from '../../payment';\nimport { ThreeDsResult } from '../../payment-response-body';\n\nimport {\n    CardinalAccount,\n    CardinalAddress,\n    CardinalConsumer,\n    CardinalEventType,\n    CardinalInitializationType,\n    CardinalPartialOrder,\n    CardinalPaymentBrand,\n    CardinalScriptLoader,\n    CardinalSignatureValidationErrors,\n    CardinalSignatureVerification,\n    CardinalSDK,\n    CardinalTriggerEvents,\n    CardinalValidatedAction,\n    CardinalValidatedData\n} from './index';\n\nexport type CardinalSupportedPaymentInstrument = CreditCardInstrument | VaultedInstrument;\n\nexport interface CardinalOrderData {\n    billingAddress: BillingAddress;\n    shippingAddress?: Address;\n    currencyCode: string;\n    id: string;\n    amount: number;\n    paymentData?: CreditCardInstrument;\n}\n\nexport default class CardinalClient {\n    private _sdk?: Promise<CardinalSDK>;\n\n    constructor(\n        private _scriptLoader: CardinalScriptLoader\n    ) {}\n\n    initialize(provider: string, testMode?: boolean): Promise<void> {\n        if (!this._sdk) {\n            this._sdk = this._scriptLoader.load(provider, testMode);\n        }\n\n        return this._sdk.then(() => {});\n    }\n\n    configure(clientToken: string): Promise<void> {\n        return this._getClientSDK()\n            .then(client => new Promise<void>((resolve, reject) => {\n                client.on(CardinalEventType.SetupCompleted, () => {\n                    client.off(CardinalEventType.SetupCompleted);\n                    client.off(CardinalEventType.Validated);\n\n                    resolve();\n                });\n\n                client.on(CardinalEventType.Validated, (data: CardinalValidatedData) => {\n                    client.off(CardinalEventType.SetupCompleted);\n                    client.off(CardinalEventType.Validated);\n\n                    switch (data.ActionCode) {\n                        case CardinalValidatedAction.Error:\n                            if (includes(CardinalSignatureValidationErrors, data.ErrorNumber)) {\n                                reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n                            }\n                            reject(new PaymentMethodFailedError(data.ErrorDescription));\n                            break;\n                    }\n                });\n\n                client.setup(CardinalInitializationType.Init, {\n                    jwt: clientToken,\n                });\n            }));\n    }\n\n    runBinProcess(binNumber: string): Promise<void> {\n        return this._getClientSDK()\n            .then(client => client.trigger(CardinalTriggerEvents.BinProcess, binNumber).catch(() => {}))\n            .then(result => {\n                if (!result || !result.Status) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n            });\n    }\n\n    getThreeDSecureData(threeDSecureData: ThreeDsResult, orderData: CardinalOrderData): Promise<ThreeDSecureToken> {\n        return this._getClientSDK()\n            .then(client => {\n                return new Promise<ThreeDSecureToken>((resolve, reject) => {\n                    client.on(CardinalEventType.Validated, (data: CardinalValidatedData, jwt?: string) => {\n                        client.off(CardinalEventType.Validated);\n                        if (!jwt) {\n                            return reject(new PaymentMethodFailedError(data.ErrorDescription ? data.ErrorDescription : 'An error was encountered while processing the transaction.'));\n                        }\n\n                        if (!data.ActionCode) {\n                            return resolve({ token: jwt });\n                        }\n\n                        switch (data.ActionCode) {\n                            case CardinalValidatedAction.Success:\n                                return resolve({ token: jwt });\n                            case CardinalValidatedAction.NoAction:\n                                if (data.ErrorNumber > 0) {\n                                    return reject(new PaymentMethodFailedError(data.ErrorDescription));\n                                } else if (!data.Payment || !data.Payment.ExtendedData || data.Payment.ExtendedData.SignatureVerification !== CardinalSignatureVerification.Yes) {\n                                    return reject(new PaymentMethodFailedError('Transaction signature could not be validated.'));\n                                }\n\n                                return resolve({ token: jwt });\n                            case CardinalValidatedAction.Failure:\n                                return reject(new PaymentMethodFailedError('User failed authentication or an error was encountered while processing the transaction.'));\n                            case CardinalValidatedAction.Error:\n                                return reject(new PaymentMethodFailedError(data.ErrorDescription));\n                        }\n                    });\n\n                    const continueObject = {\n                        AcsUrl: threeDSecureData.acs_url,\n                        Payload: threeDSecureData.merchant_data,\n                    };\n\n                    const partialOrder = this._mapToPartialOrder(orderData, threeDSecureData.payer_auth_request);\n\n                    client.continue(CardinalPaymentBrand.CCA, continueObject, partialOrder);\n                });\n            });\n    }\n\n    private _mapToPartialOrder(orderData: CardinalOrderData, transactionId: string): CardinalPartialOrder {\n        const consumer: CardinalConsumer = {\n            BillingAddress: this._mapToCardinalAddress(orderData.billingAddress),\n        };\n\n        if (orderData.paymentData) {\n            consumer.Account = this._mapToCardinalAccount(orderData.paymentData);\n        }\n\n        if (orderData.billingAddress.email) {\n            consumer.Email1 = orderData.billingAddress.email;\n        }\n\n        if (orderData.shippingAddress) {\n            consumer.ShippingAddress = this._mapToCardinalAddress(orderData.shippingAddress);\n        }\n\n        return  {\n            Consumer: consumer,\n            OrderDetails: {\n                OrderNumber: orderData.id,\n                Amount: orderData.amount,\n                CurrencyCode: orderData.currencyCode,\n                OrderChannel: 'S',\n                TransactionId: transactionId,\n            },\n        };\n    }\n\n    private _mapToCardinalAccount(paymentData: CreditCardInstrument): CardinalAccount {\n        return {\n            AccountNumber: Number(paymentData.ccNumber),\n            ExpirationMonth: Number(paymentData.ccExpiry.month),\n            ExpirationYear: Number(paymentData.ccExpiry.year),\n            NameOnAccount: paymentData.ccName,\n            CardCode: Number(paymentData.ccCvv),\n        };\n    }\n\n    private _mapToCardinalAddress(address: Address): CardinalAddress {\n        const cardinalAddress: CardinalAddress = {\n            FirstName: address.firstName,\n            LastName: address.lastName,\n            Address1: address.address1,\n            City: address.city,\n            State: address.stateOrProvince,\n            PostalCode: address.postalCode,\n            CountryCode: address.countryCode,\n        };\n\n        if (address.address2) {\n            cardinalAddress.Address2 = address.address2;\n        }\n\n        if (address.phone) {\n            cardinalAddress.Phone1 = address.phone;\n        }\n\n        return cardinalAddress;\n    }\n\n    private _getClientSDK(): Promise<CardinalSDK> {\n        if (!this._sdk) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._sdk;\n    }\n}\n","export enum ChasePayEventType {\n    StartCheckout = 'startCheckout',\n    CompleteCheckout = 'completeCheckout',\n    CancelCheckout = 'cancelCheckout',\n}\n\nexport interface ChasePayEventMap {\n    [ChasePayEventType.StartCheckout](digitalSessionId: string): void;\n    [ChasePayEventType.CompleteCheckout](payload: ChasePaySuccessPayload): void;\n    [ChasePayEventType.CancelCheckout](): void;\n}\n\nexport interface ChasePayHostWindow extends Window {\n    JPMC?: JPMC;\n}\n\nexport interface JPMC {\n    ChasePay: ChasePay;\n}\n\nexport interface ChasePaySuccessPayload {\n    sessionToken: string;\n}\n\nexport interface ChasePayInsertOptions {\n    color?: string;\n    containers?: string[];\n    height?: number;\n    width?: number;\n}\n\nexport interface ChasePayConfigureOptions {\n    language?: string;\n    zindex?: number;\n    sessionWarningTime?: number;\n    sessionTimeoutTime?: number;\n}\n\nexport interface ChasePay {\n    EventType: {\n        START_CHECKOUT: ChasePayEventType.StartCheckout;\n        COMPLETE_CHECKOUT: ChasePayEventType.CompleteCheckout;\n        CANCEL_CHECKOUT: ChasePayEventType.CancelCheckout;\n    };\n    isChasePayUp(): boolean;\n    insertButtons(options: ChasePayInsertOptions): void;\n    insertBrandings(options: ChasePayInsertOptions): void;\n    startCheckout(digitalSessionId?: string): void;\n    showLoadingAnimation(): void;\n    configure(options: ChasePayConfigureOptions): void;\n    on<ChasePayEventType extends keyof ChasePayEventMap>(eventType: ChasePayEventType, callback: ChasePayEventMap[ChasePayEventType]): {};\n}\n\nexport interface ChasePayInitializeOptions {\n    /**\n     * This container is used to host the chasepay branding logo.\n     * It should be an HTML element.\n     */\n    logoContainer: string;\n\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the ChasePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { CardinalSDK, CardinalWindow } from './cardinal';\n\nconst SDK_TEST_URL = 'https://songbirdstag.cardinalcommerce.com/edge/v1/songbird.js';\nconst SDK_PROD_URL = 'https://songbird.cardinalcommerce.com/edge/v1/songbird.js';\n\nexport default class CardinalScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: CardinalWindow = window\n    ) {}\n\n    load(provider: string, testMode?: boolean): Promise<CardinalSDK> {\n        const url = testMode ? SDK_TEST_URL : SDK_PROD_URL;\n\n        return this._scriptLoader\n            .loadScript(url + '?v=' + provider)\n            .then(() => {\n                if (!this._window.Cardinal) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.Cardinal;\n            });\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\nimport { WepayRiskClient } from '../wepay';\n\nimport { ChasePay, ChasePayEventType, ChasePaySuccessPayload } from './chasepay';\nimport ChasePayInitializeOptions from './chasepay-initialize-options';\nimport ChasePayScriptLoader from './chasepay-script-loader';\n\nexport default class ChasePayPaymentStrategy implements PaymentStrategy {\n    private _chasePayClient?: ChasePay;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _walletEvent$: Subject<{ type: ChasePayEventType }>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        this._walletEvent$ = new Subject();\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.chasepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.chasepay\" argument is not provided.');\n        }\n\n        const walletButton = options.chasepay.walletButton && document.getElementById(options.chasepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._configureWallet(options.chasepay)\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._chasePayClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch(error => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._displayWallet()\n                        .then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then(payment =>\n                this._createOrder(payment, payload.useStoreCredit, options)\n            );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _configureWallet(options: ChasePayInitializeOptions): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._chasePayScriptLoader.load(paymentMethod.config.testMode)\n            .then(({ ChasePay }) => {\n                this._chasePayClient = ChasePay;\n\n                if (options.logoContainer && document.getElementById(options.logoContainer)) {\n                    this._chasePayClient.insertBrandings({\n                        color: 'white',\n                        containers: [options.logoContainer],\n                    });\n                }\n\n                this._chasePayClient.configure({\n                    language: storeConfig.storeProfile.storeLanguage,\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CancelCheckout, () => {\n                    this._walletEvent$.next({ type: ChasePayEventType.CancelCheckout });\n\n                    if (options.onCancel) {\n                        options.onCancel();\n                    }\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CompleteCheckout, (payload: ChasePaySuccessPayload) => {\n                    this._setSessionToken(payload.sessionToken)\n                        .then(() => {\n                            this._walletEvent$.next({ type: ChasePayEventType.CompleteCheckout });\n\n                            if (options.onPaymentSelect) {\n                                options.onPaymentSelect();\n                            }\n                        });\n                });\n            });\n    }\n\n    private _displayWallet(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n                .then(state => {\n                    const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                    if (!this._chasePayClient) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    if (!paymentMethod) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    this._chasePayClient.showLoadingAnimation();\n                    this._chasePayClient.startCheckout(paymentMethod.initializationData.digitalSessionId);\n                });\n\n            // Wait for payment selection\n            return new Promise((resolve, reject) => {\n                this._walletEvent$\n                    .pipe(take(1))\n                    .subscribe((event: { type: ChasePayEventType }) => {\n                        if (event.type === ChasePayEventType.CancelCheckout) {\n                            reject(new PaymentMethodCancelledError());\n                        } else if (event.type === ChasePayEventType.CompleteCheckout) {\n                            resolve();\n                        }\n                    });\n            });\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _setSessionToken(sessionToken: string): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const merchantRequestId = paymentMethod && paymentMethod.initializationData.merchantRequestId;\n\n        return this._requestSender.post('checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: {\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                sessionToken,\n                merchantRequestId,\n            },\n        })\n            // Re-hydrate checkout data\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId)),\n            ]))\n            .then(() => this._store.getState());\n    }\n\n    private _getPayment(): Promise<Payment> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                if (this._methodId === 'wepay') {\n                    return this._wepayRiskClient.initialize()\n                        .then(client => client.getRiskToken());\n                }\n\n                return '';\n            })\n            .then(riskToken => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.paymentCryptogram) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    cryptogramId: paymentMethod.initializationData.paymentCryptogram,\n                    eci: paymentMethod.initializationData.eci,\n                    transactionId: btoa(paymentMethod.initializationData.reqTokenId),\n                    ccExpiry: {\n                        month: paymentMethod.initializationData.expDate.toString().substr(0, 2),\n                        year: paymentMethod.initializationData.expDate.toString().substr(2, 2),\n                    },\n                    ccNumber: paymentMethod.initializationData.accountNum,\n                    accountMask: paymentMethod.initializationData.accountMask,\n                    extraData: riskToken ? { riskToken } : undefined,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): void {\n        event.preventDefault();\n\n        this._displayWallet();\n    }\n}\n","export default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n}\n\nexport type SquarePaymentFormConstructor = new(options: SquareFormOptions) => SquarePaymentForm;\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n    masterpass: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    masterpass = 'MASTERPASS',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class ConvergePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: FormPoster\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(_options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(_options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(_options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport { CardinalThreeDSecureFlow } from '../cardinal';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class CyberSourcePaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _threeDSecureFlow: CardinalThreeDSecureFlow\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!this._paymentMethod.config.is3dsEnabled) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._threeDSecureFlow.prepare(methodId)\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._paymentMethod.config.is3dsEnabled ?\n                    this._threeDSecureFlow.start(payment) :\n                    this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { GooglePaymentData, PaymentMethodData } from './googlepay';\nimport GooglePayPaymentInitializeOptions from './googlepay-initialize-options';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\n\nexport default class GooglePayPaymentStrategy implements PaymentStrategy {\n    private _googlePayOptions?: GooglePayPaymentInitializeOptions;\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        return this._googlePayPaymentProcessor.initialize(this._methodId)\n            .then(() => {\n                this._googlePayOptions = this._getGooglePayOptions(options);\n\n                if (!this._googlePayOptions) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n                }\n\n                const walletButton = this._googlePayOptions.walletButton && document.getElementById(this._googlePayOptions.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._googlePayOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n        }\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return Promise.resolve(this._getPayment())\n            .then(payment => {\n                if (!payment.paymentData.nonce || !payment.paymentData.cardInformation) {\n                    // TODO: Find a way to share the code with _handleWalletButtonClick method\n                    return this._googlePayPaymentProcessor.displayWallet()\n                        .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                        .then(() => onPaymentSelect())\n                        .then(() => this._getPayment())\n                        .catch(error => {\n                            if (error.statusCode !== 'CANCELED') {\n                                onError(error);\n                            }\n                        });\n                }\n\n                return payment;\n            })\n            .then(() =>\n                this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit: payload.useStoreCredit }, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(this._getPayment())))\n            );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _paymentInstrumentSelected(paymentData: GooglePaymentData) {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        // TODO: Revisit how we deal with GooglePaymentData after receiving it from Google\n        return this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n    }\n\n    private _getGooglePayOptions(options: PaymentInitializeOptions): GooglePayPaymentInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _getPayment(): PaymentMethodData {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const paymentData = {\n            method: this._methodId,\n            nonce: paymentMethod.initializationData.nonce,\n            cardInformation: paymentMethod.initializationData.card_information,\n        };\n\n        return {\n            methodId: this._methodId,\n            paymentData,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<InternalCheckoutSelectors> {\n        event.preventDefault();\n\n        if (!this._methodId || !this._googlePayOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._googlePayPaymentProcessor.displayWallet()\n                .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                .then(() => onPaymentSelect())\n                .catch(error => {\n                    if (error.statusCode !== 'CANCELED') {\n                        onError(error);\n                    }\n                });\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n}\n","import { includes } from 'lodash';\n\nimport { Address } from '../../../address';\nimport BillingAddress from '../../../billing/billing-address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaAddress, KlarnaLoadResponse, KlarnaUpdateSessionParams } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy implements PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n    private _supportedEUCountries = ['AT', 'DE', 'DK', 'FI', 'GB', 'NL', 'NO', 'SE', 'CH'];\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    state => {\n                        if (state.paymentStrategies.isInitialized(options.methodId)) {\n                            this._loadWidget(options);\n                        }\n                    },\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.outstandingBalance;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    // Note: API currently doesn't support using Store Credit with Klarna.\n                    // To prevent deducting customer's store credit, set it as false.\n                    useStoreCredit: false,\n                }, options)\n            ));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>(resolve => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n                    resolve(response);\n                });\n            }));\n    }\n\n    private _getUpdateSessionData(billingAddress: BillingAddress, shippingAddress?: Address): KlarnaUpdateSessionParams {\n        if (!includes(this._supportedEUCountries, billingAddress.countryCode)) {\n            return {};\n        }\n\n        const data: KlarnaUpdateSessionParams = {\n            billing_address: this._mapToKlarnaAddress(billingAddress, billingAddress.email),\n        };\n\n        if (shippingAddress) {\n            data.shipping_address = this._mapToKlarnaAddress(shippingAddress, billingAddress.email);\n        }\n\n        return data;\n    }\n\n    private _mapToKlarnaAddress(address: Address, email?: string): KlarnaAddress {\n        const klarnaAddress: KlarnaAddress = {\n            street_address: address.address1,\n            city: address.city,\n            country: address.countryCode,\n            given_name: address.firstName,\n            family_name: address.lastName,\n            postal_code: address.postalCode,\n            region: address.stateOrProvince,\n            email,\n        };\n\n        if (address.address2) {\n            klarnaAddress.street_address2 = address.address2;\n        }\n\n        if (address.phone) {\n            klarnaAddress.phone = address.phone;\n        }\n\n        return klarnaAddress;\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n            const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n            if (!billingAddress) {\n                throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n            }\n\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const updateSessionData = this._getUpdateSessionData(billingAddress, shippingAddress);\n\n            this._klarnaCredit.authorize(updateSessionData, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class LegacyPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport getCallbackUrl from './get-callback-url';\nimport { Masterpass, MasterpassCheckoutOptions } from './masterpass';\nimport MasterpassScriptLoader from './masterpass-script-loader';\n\nexport default class MasterpassPaymentStrategy implements PaymentStrategy {\n    private _masterpassClient?: Masterpass;\n    private _paymentMethod?: PaymentMethod;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n\n                if (!options.masterpass) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.masterpass\" argument is not provided.');\n                }\n\n                const walletButton  = options.masterpass.walletButton && document.getElementById(options.masterpass.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._masterpassClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = payload;\n        const order = { useStoreCredit: payload.useStoreCredit };\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.gateway) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        // TODO: Refactor the API endpoint to return nonce in the right place.\n        const paymentData = this._paymentMethod.initializationData.paymentData;\n\n        // TODO: Redirect to Masterpass if nonce has not been generated yet. And then finalise the order when the shopper is redirected back to the checkout page.\n        if (!paymentData) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.paymentData\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData })));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: this._paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.subtotal.toFixed(2),\n            currency: storeConfig.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('checkout'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._masterpassClient) {\n            return;\n        }\n\n        const payload = this._createMasterpassPayload();\n        this._masterpassClient.checkout(payload);\n    }\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OfflinePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OffsitePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment(payment.methodId, payment.gatewayId))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return payment.gatewayId === 'adyen' || payment.methodId === 'ccavenuemars';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport { CardinalThreeDSecureFlow } from '../cardinal';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class PaypalProPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _threeDSecureFlow: CardinalThreeDSecureFlow\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!this._paymentMethod.config.is3dsEnabled) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._threeDSecureFlow.prepare(methodId)\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isPaymentAcknowledged()) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n                }, options)\n            );\n        }\n\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._paymentMethod.config.is3dsEnabled ?\n                    this._threeDSecureFlow.start(payment) :\n                    this._store.dispatch(this._paymentActionCreator.submitPayment(payment));\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _isPaymentAcknowledged(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy implements PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n    private _useRedirectFlow: boolean = false;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader,\n        private _window: PaypalHostWindow = window\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n        this._useRedirectFlow = (options.paypalexpress && options.paypalexpress.useRedirectFlow) === true;\n\n        if (!this._isInContextEnabled()) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled() || this._useRedirectFlow) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        this._window.top.location.href = redirectUrl;\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class SagePayPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: any\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import StandardError from './standard-error';\n\n/**\n * Throw this error if the shopper is using a browser version that is not\n * supported by us or any third party provider we use.\n */\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.name = 'UnsupportedBrowserError';\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { omit } from 'lodash';\nimport { noop } from 'rxjs';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    TimeoutError,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { NonceInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport SquarePaymentForm, {\n    CardData,\n    Contact,\n    DigitalWalletType,\n    NonceGenerationError,\n    SquareFormElement,\n    SquareFormOptions,\n    SquarePaymentRequest\n} from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\nimport SquareScriptLoader from './square-script-loader';\n\nexport default class SquarePaymentStrategy implements PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._syncPaymentMethod(methodId);\n\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n                    this._paymentForm.build();\n                }))\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        return this._getNonceInstrument(payment.methodId)\n            .then(paymentData =>\n                this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n                ));\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions } = options;\n\n        if (!squareOptions || !this._paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        this._squareOptions = squareOptions;\n\n        return {\n            ...this._squareOptions,\n            ...this._paymentMethod.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none) {\n                        this._handleWalletNonceResponse(errors, nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        this._handleCardNonceResponse(errors, nonce);\n                    }\n                },\n                createPaymentRequest: () => this._paymentRequestPayload(),\n                methodsSupported: methods => {\n                    const { masterpass } = squareOptions;\n\n                    if (masterpass) {\n                        this._showPaymentMethods(methods, masterpass);\n                    }\n                },\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _handleWalletNonceResponse(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact\n    ): void {\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n        const onPaymentSelect = this._squareOptions && this._squareOptions.onPaymentSelect || noop;\n\n        if (errors) {\n            onError(errors);\n        } else if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(\n                this._paymentMethod.id,\n                nonce,\n                cardData,\n                billingContact,\n                shippingContact\n            )\n                .then(onPaymentSelect)\n                .catch(onError);\n        }\n    }\n\n    private _handleCardNonceResponse(errors?: NonceGenerationError[], nonce?: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (nonce && !errors) {\n            this._deferredRequestNonce.resolve({ nonce });\n\n            return;\n        }\n\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n\n        onError(errors);\n\n        this._deferredRequestNonce.reject(errors);\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            },\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._paymentForm.setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _showPaymentMethods(methods: { [key: string]: boolean }, element: SquareFormElement): void {\n        const masterpassBtn = document.getElementById(element.elementId);\n\n        if (masterpassBtn && methods.masterpass) {\n            masterpassBtn.style.display = 'inline-block';\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { some } from 'lodash';\n\nimport { Address } from '../../../address';\nimport { BillingAddress } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    RequestError\n} from '../../../common/error/errors';\nimport { Customer } from '../../../customer';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodFailedError } from '../../errors';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport { HostedInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport {\n    StripeAddress,\n    StripeBillingDetails,\n    StripeCardElement,\n    StripeHandleCardPaymentOptions,\n    StripePaymentMethodData,\n    StripeShippingDetails,\n    StripeV3Client\n} from './stripev3';\nimport StripeV3ScriptLoader from './stripev3-script-loader';\n\nexport default class StripeV3PaymentStrategy implements PaymentStrategy {\n    private _stripeV3Client?: StripeV3Client;\n    private _cardElement?: StripeCardElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _stripeScriptLoader: StripeV3ScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const stripeOptions = options.stripev3;\n\n        if (!stripeOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.stripev3\" argument is not provided.');\n        }\n\n        const paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._stripeScriptLoader.load(paymentMethod.initializationData.stripePublishableKey)\n            .then(stripeJs => {\n                this._stripeV3Client = stripeJs;\n                const elements = this._stripeV3Client.elements();\n                const cardElement = elements.create('card', {\n                    style: stripeOptions.style,\n                });\n\n                cardElement.mount(`#${stripeOptions.containerId}`);\n\n                this._cardElement = cardElement;\n\n                return Promise.resolve(this._store.getState());\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const shouldSaveInstrument = Boolean(paymentData && (paymentData as HostedInstrument).shouldSaveInstrument);\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                if (paymentData && isVaultedInstrument(paymentData)) {\n                    return this._store.dispatch(this._paymentActionCreator.submitPayment({...payment, paymentData}))\n                        .catch(error => {\n                            if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                                return Promise.reject(error);\n                            }\n\n                            return this._getStripeJs().handleCardPayment(error.body.three_ds_result.token)\n                                .then(stripeResponse => {\n                                    if (stripeResponse.error || !stripeResponse.paymentIntent.id) {\n                                        throw new PaymentMethodFailedError(stripeResponse.error && stripeResponse.error.message);\n                                    }\n\n                                    const paymentPayload = {\n                                        methodId: payment.methodId,\n                                        paymentData: {\n                                            nonce: stripeResponse.paymentIntent.id,\n                                        },\n                                    };\n\n                                    return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n                                });\n                        });\n                }\n\n                return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId))\n                    .then(state => {\n                        const paymentMethod = state.paymentMethods.getPaymentMethod(payment.methodId);\n                        const paymentIntent = paymentMethod && paymentMethod.clientToken;\n\n                        if (!this._cardElement) {\n                            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                        }\n\n                        return this._getStripeJs().createPaymentMethod('card', this._cardElement, this._mapStripePaymentMethodOptions())\n                            .then(stripePaymentMethod => {\n                                if (stripePaymentMethod.error || !stripePaymentMethod.paymentMethod.id) {\n                                    throw new PaymentMethodFailedError(stripePaymentMethod.error && stripePaymentMethod.error.message);\n                                }\n\n                                if (!paymentIntent) {\n                                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                                }\n\n                                const stripeCardPaymentOptions = {\n                                    ...this._mapStripeCardPaymentOptions(shouldSaveInstrument),\n                                    payment_method: stripePaymentMethod.paymentMethod.id,\n                                };\n\n                                return this._getStripeJs().handleCardPayment(paymentIntent, stripeCardPaymentOptions);\n                            })\n                            .then(stripeResponse => {\n                                if (stripeResponse.error || !stripeResponse.paymentIntent.id) {\n                                    throw new PaymentMethodFailedError(stripeResponse.error && stripeResponse.error.message);\n                                }\n\n                                const paymentPayload = {\n                                    methodId: payment.methodId,\n                                    paymentData: {\n                                        nonce: stripeResponse.paymentIntent.id,\n                                        shouldSaveInstrument,\n                                    },\n                                };\n\n                                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n                            });\n                    });\n            });\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._cardElement) {\n            this._cardElement.unmount();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _getStripeJs(): StripeV3Client {\n        if (!this._stripeV3Client) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._stripeV3Client;\n    }\n\n    private _mapStripeBillingAddress(billingAddress: BillingAddress | undefined): StripeAddress | undefined {\n        if (!billingAddress) {\n            return undefined;\n        }\n\n        return {\n            city: billingAddress.city,\n            country: billingAddress.countryCode,\n            line1: billingAddress.address1,\n            line2: billingAddress.address2,\n            postal_code: billingAddress.postalCode,\n            state: billingAddress.stateOrProvinceCode,\n        };\n    }\n\n    private _mapStripeShippingAddress(shippingAddress: Address | undefined): StripeAddress {\n        if (!shippingAddress) {\n            return { };\n        }\n\n        return {\n            city: shippingAddress.city,\n            country: shippingAddress.countryCode,\n            line1: shippingAddress.address1,\n            line2: shippingAddress.address2,\n            postal_code: shippingAddress.postalCode,\n            state: shippingAddress.stateOrProvinceCode,\n        };\n    }\n\n    private _mapStripeBillingDetails({ billingAddress, customer }: { billingAddress?: BillingAddress; customer?: Customer } = {}): StripeBillingDetails {\n        const stripeBillingDetails = {\n            address: this._mapStripeBillingAddress(billingAddress),\n        };\n\n        if (customer) {\n            return {\n                ...stripeBillingDetails,\n                email: customer.email,\n                name: `${customer.firstName} ${customer.lastName}`,\n            };\n        }\n\n        if (billingAddress) {\n            return {\n                ...stripeBillingDetails,\n                email: billingAddress.email,\n                name: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            };\n        }\n\n        return {\n            name: 'Guest',\n        };\n    }\n\n    private _mapStripeShippingDetails({ shippingAddress, customer }: { shippingAddress?: Address ; customer?: Customer } = {}): StripeShippingDetails {\n        const stripeShippingDetails = {\n            address: this._mapStripeShippingAddress(shippingAddress),\n        };\n\n        if (customer) {\n            return {\n                ...stripeShippingDetails,\n                name: `${customer.firstName} ${customer.lastName}`,\n            };\n        }\n\n        if (shippingAddress) {\n            return {\n                ...stripeShippingDetails,\n                name: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            };\n        }\n\n        return {\n            ...stripeShippingDetails,\n            name: 'Guest',\n        };\n    }\n\n    private _getCustomer(): Customer | undefined {\n        const customer = this._store.getState().customer.getCustomer();\n\n        if (customer) {\n            if (customer.firstName === '' || customer.lastName === '' || customer.email === '') {\n                return undefined;\n            }\n        }\n\n        return customer;\n    }\n\n    private _mapStripeCardPaymentOptions(shouldSaveInstrument: boolean): StripeHandleCardPaymentOptions {\n        const customer = this._getCustomer();\n        const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n        const shippingDetails = {\n            shipping: this._mapStripeShippingDetails({ shippingAddress, customer }),\n        };\n\n        if (customer) {\n            return {\n                ...shippingDetails,\n                receipt_email: customer.email,\n                save_payment_method: shouldSaveInstrument,\n            };\n        } else {\n            return {\n                ...shippingDetails,\n            };\n        }\n    }\n\n    private _mapStripePaymentMethodOptions(): StripePaymentMethodData {\n        const customer = this._getCustomer();\n        const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        return {\n            billing_details: this._mapStripeBillingDetails({ billingAddress, customer }),\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { StripeHostWindow, StripeV3Client } from './stripev3';\n\nexport default class StripeV3ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: StripeHostWindow = window\n    ) {}\n\n    load(publishableKey: string): Promise<StripeV3Client> {\n        return this._scriptLoader\n            .loadScript('https://js.stripe.com/v3/')\n            .then(() => {\n                if (!this._window.Stripe) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.Stripe(publishableKey, {\n                    betas: ['payment_intent_beta_3'],\n                });\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport CreditCardPaymentStrategy from '../credit-card/credit-card-payment-strategy';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * Throw this error if a payment method explicitly returns a declined error and\n * the shopper has to choose a different payment method if they wish to continue\n * their checkout process.\n */\nexport default class PaymentMethodDeclinedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'The selected payment method was declined. Please select another payment method.');\n\n        this.name = 'PaymentMethodDeclinedError';\n        this.type = 'payment_declined';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { ContentType, INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { StoreCreditActionCreator } from '../../../store-credit';\nimport { PaymentMethodCancelledError, PaymentMethodDeclinedError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Zip, ZipModalEvent } from './zip';\nimport ZipScriptLoader from './zip-script-loader';\n\nexport default class ZipPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _zipClient?: Zip;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n        private _zipScriptLoader: ZipScriptLoader,\n        private _requestSender: RequestSender\n    ) { }\n\n    async initialize(): Promise<InternalCheckoutSelectors> {\n        const zip = await this._zipScriptLoader.load();\n        this._zipClient = zip;\n\n        return this._store.getState();\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n        this._zipClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const { _zipClient: zipClient } = this;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!zipClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n\n        const { useStoreCredit } = payload;\n\n        if (useStoreCredit !== undefined) {\n            await this._store.dispatch(this._storeCreditActionCreator.applyStoreCredit(useStoreCredit));\n        }\n\n        const state = await this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId, options));\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(payment.methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const nonce = await new Promise<string | undefined>((resolve, reject) => {\n            zipClient.Checkout.init({\n                onComplete: async ({ checkoutId, state }) => {\n                    if (state === ZipModalEvent.CancelCheckout) {\n                        return reject(new PaymentMethodCancelledError());\n                    }\n\n                    if (state === ZipModalEvent.CheckoutReferred && checkoutId) {\n                        await this._prepareForReferredRegistration(payment.methodId, checkoutId);\n\n                        return resolve();\n                    }\n\n                    if (state === ZipModalEvent.CheckoutApproved && checkoutId) {\n                        return resolve(checkoutId);\n                    }\n\n                    if (state === ZipModalEvent.CheckoutDeclined) {\n                        return reject(new PaymentMethodDeclinedError('Unfortunately your application was declined. Please select another payment method.'));\n                    }\n\n                    reject(new PaymentMethodInvalidError());\n                },\n                onCheckout: openModal => {\n                    if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    openModal(JSON.parse(this._paymentMethod.clientToken));\n                },\n            });\n        });\n\n        if (nonce !== undefined) {\n            return this._store.dispatch(this._paymentActionCreator.submitPayment({\n                methodId: payment.methodId,\n                paymentData: { nonce },\n            }));\n        }\n\n        return this._store.getState();\n    }\n\n    finalize(): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _prepareForReferredRegistration(provider: string, externalId: string): Promise<Response> {\n        const url = `/api/storefront/payment/${provider}/save-external-id`;\n        const options = {\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n            body: {\n                externalId,\n                provider,\n            },\n        };\n\n        return this._requestSender.post(url, options);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\nimport { Zip, ZipHostWindow } from '../zip/zip';\n\nexport default class ZipScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ZipHostWindow = window\n    ) {}\n\n    load(): Promise<Zip> {\n        return this._scriptLoader\n            .loadScript(`//static.zipmoney.com.au/checkout/checkout-v1.min.js`)\n            .then(() => {\n                if (!this._window.Zip) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.Zip;\n            });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { SpamProtectionActionCreator } from '../order/spam-protection';\nimport GoogleRecaptcha from '../order/spam-protection/google-recaptcha';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\nimport { StoreCreditActionCreator, StoreCreditRequestSender } from '../store-credit';\n\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { AffirmPaymentStrategy, AffirmScriptLoader } from './strategies/affirm';\nimport { AfterpayPaymentStrategy, AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayPaymentStrategy, AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport {\n    createBraintreePaymentProcessor,\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeCreditCardPaymentStrategy,\n    BraintreePaypalPaymentStrategy,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    BraintreeVisaCheckoutPaymentStrategy,\n    VisaCheckoutScriptLoader\n} from './strategies/braintree';\nimport {\n    CardinalClient,\n    CardinalScriptLoader,\n    CardinalThreeDSecureFlow,\n} from './strategies/cardinal';\nimport { ChasePayPaymentStrategy, ChasePayScriptLoader } from './strategies/chasepay';\nimport { ConvergePaymentStrategy } from './strategies/converge';\nimport { CreditCardPaymentStrategy } from './strategies/credit-card';\nimport { CyberSourcePaymentStrategy } from './strategies/cybersource/index';\nimport {\n    createGooglePayPaymentProcessor,\n    GooglePayBraintreeInitializer,\n    GooglePayPaymentStrategy,\n    GooglePayStripeInitializer\n} from './strategies/googlepay';\nimport { KlarnaPaymentStrategy, KlarnaScriptLoader } from './strategies/klarna';\nimport { LegacyPaymentStrategy } from './strategies/legacy';\nimport { MasterpassPaymentStrategy, MasterpassScriptLoader } from './strategies/masterpass';\nimport { NoPaymentDataRequiredPaymentStrategy } from './strategies/no-payment';\nimport { OfflinePaymentStrategy } from './strategies/offline';\nimport { OffsitePaymentStrategy } from './strategies/offsite';\nimport { PaypalExpressPaymentStrategy, PaypalProPaymentStrategy, PaypalScriptLoader } from './strategies/paypal';\nimport { SagePayPaymentStrategy } from './strategies/sage-pay';\nimport { SquarePaymentStrategy, SquareScriptLoader } from './strategies/square';\nimport { StripeScriptLoader, StripeV3PaymentStrategy } from './strategies/stripev3';\nimport { WepayPaymentStrategy, WepayRiskClient } from './strategies/wepay';\nimport { ZipPaymentStrategy, ZipScriptLoader } from './strategies/zip';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender,\n    spamProtection: GoogleRecaptcha\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: PaymentStrategyType.CREDIT_CARD });\n    const scriptLoader = getScriptLoader();\n    const paymentRequestTransformer = new PaymentRequestTransformer();\n    const paymentRequestSender = new PaymentRequestSender(paymentClient);\n    const billingAddressActionCreator = new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender));\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(spamProtection);\n    const orderActionCreator = new OrderActionCreator(new OrderRequestSender(requestSender), checkoutValidator, spamProtectionActionCreator);\n    const storeCreditActionCreator = new StoreCreditActionCreator(new StoreCreditRequestSender(requestSender));\n    const paymentActionCreator = new PaymentActionCreator(paymentRequestSender, orderActionCreator, paymentRequestTransformer);\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender));\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const checkoutActionCreator = new CheckoutActionCreator(checkoutRequestSender, configActionCreator);\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(registry, orderActionCreator);\n    const formPoster = createFormPoster();\n\n    registry.register(PaymentStrategyType.AFFIRM, () =>\n        new AffirmPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            new AffirmScriptLoader()\n        )\n    );\n\n    registry.register(PaymentStrategyType.AFTERPAY, () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            storeCreditActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.AMAZON, () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            billingAddressActionCreator,\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CREDIT_CARD, () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.CYBERSOURCE, () =>\n        new CyberSourcePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new CardinalThreeDSecureFlow(\n                store,\n                paymentActionCreator,\n                paymentMethodActionCreator,\n                new CardinalClient(new CardinalScriptLoader(scriptLoader))\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.KLARNA, () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.LEGACY, () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFLINE, () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFSITE, () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL, () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new CardinalThreeDSecureFlow(\n                store,\n                paymentActionCreator,\n                paymentMethodActionCreator,\n                new CardinalClient(new CardinalScriptLoader(scriptLoader))\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS_CREDIT, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.SAGE_PAY, () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n        )\n    );\n\n    registry.register(PaymentStrategyType.SQUARE, () =>\n        new SquarePaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED, () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE, () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_VISA_CHECKOUT, () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CHASE_PAY, () =>\n        new ChasePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new ChasePayScriptLoader(scriptLoader),\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.WE_PAY, () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.MASTERPASS, () =>\n        new MasterpassPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.STRIPE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.ZIP, () =>\n        new ZipPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            storeCreditActionCreator,\n            new ZipScriptLoader(scriptLoader),\n            requestSender\n        )\n    );\n\n    registry.register(PaymentStrategyType.CONVERGE, () =>\n        new ConvergePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n            )\n    );\n\n    registry.register(PaymentStrategyType.STRIPEV3, () =>\n        new StripeV3PaymentStrategy(\n            store,\n            paymentMethodActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            new StripeScriptLoader(scriptLoader)\n        )\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { Overlay } from '../../../common/overlay';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n    const overlay = new Overlay();\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator, overlay);\n}\n","import { createAction, createDataStore, Action, DataStore, ReadableDataStore } from '@bigcommerce/data-store';\n\nenum ProjectionActionType {\n    Synchronize = 'SYNCHRONIZE',\n}\n\ninterface SynchronizeAction<TState> extends Action<TState> {\n    type: ProjectionActionType.Synchronize;\n    payload: TState;\n}\n\nexport interface DataStoreProjection<TTransformedState> extends ReadableDataStore<TTransformedState> {\n    notifyState(): void;\n}\n\nexport default function createDataStoreProjection<TState, TTransformedState = TState>(\n    store: DataStore<any, Action, TState>,\n    stateTransformer: (state: TState) => TTransformedState\n): DataStoreProjection<TTransformedState> {\n    const projection = createDataStore<TState | undefined, SynchronizeAction<TState>, TTransformedState>(\n        (state, action) => action.type === ProjectionActionType.Synchronize ?\n            action.payload :\n            state,\n        store.getState(),\n        { stateTransformer }\n    );\n\n    store.subscribe(state => {\n        projection.dispatch(createAction(ProjectionActionType.Synchronize, state) as SynchronizeAction<TState>);\n    }, { initial: false });\n\n    return projection;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport { DeleteInstrumentAction, InstrumentActionType, LoadInstrumentsAction } from './instrument-actions';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<LoadInstrumentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadInstrumentsAction>) => {\n            observer.next(createAction(InstrumentActionType.LoadInstrumentsRequested));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(\n                                InstrumentActionType.LoadInstrumentsSucceeded,\n                                body,\n                                currentToken\n                            ));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.LoadInstrumentsFailed, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<DeleteInstrumentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteInstrumentAction>) => {\n            observer.next(createAction(InstrumentActionType.DeleteInstrumentRequested, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({\n                        ...session,\n                        authToken: currentToken.vaultAccessToken,\n                    }, instrumentId)\n                        .then(({ body }) => {\n                            observer.next(createAction(InstrumentActionType.DeleteInstrumentSucceeded, body, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.DeleteInstrumentFailed, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token) ?\n            Promise.resolve(token) :\n            this._instrumentRequestSender.getVaultAccessToken().then(({ body }) => body);\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n        const { code } = config.shopperCurrency.isTransactional ? config.shopperCurrency : config.currency;\n\n        return {\n            customerId,\n            storeId,\n            currencyCode: code,\n        };\n    }\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentResponse from '../payment-response';\n\nimport Instrument, { VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    InternalInstrument,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n    InternalVaultAccessTokenResponseBody,\n} from './instrument-response-body';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(\n        response: PaymentResponse<InternalInstrumentsResponseBody>\n    ): Response<InstrumentsResponseBody> {\n        const { body, ...payload } = this._transformResponse(response);\n\n        return {\n            ...payload,\n            body: {\n                vaultedInstruments: this._transformVaultedInstruments(body.vaulted_instruments),\n            },\n        };\n    }\n\n    transformErrorResponse(\n        response: PaymentResponse<InternalInstrumentErrorResponseBody>\n    ): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    transformVaultAccessResponse(\n        response: Response<InternalVaultAccessTokenResponseBody>\n    ): Response<VaultAccessToken> {\n        return {\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        };\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: InternalInstrument[] = []): Instrument[] {\n        return vaultedInstruments.map(instrument => ({\n            bigpayToken: instrument.bigpay_token,\n            defaultInstrument: instrument.default_instrument,\n            provider: instrument.provider,\n            iin: instrument.iin,\n            last4: instrument.last_4,\n            expiryMonth: instrument.expiry_month,\n            expiryYear: instrument.expiry_year,\n            brand: instrument.brand,\n            trustedShippingAddress: instrument.trusted_shipping_address,\n        }));\n    }\n\n    private _transformResponse<T>(response: PaymentResponse<T>): Response<T> {\n        const { data: body, ...payload } = response;\n\n        return {\n            ...payload,\n            body,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\nimport PaymentResponse from '../payment-response';\n\nimport { InstrumentRequestContext, VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n} from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken(\n        { timeout }: RequestOptions = {}\n    ): Promise<Response<VaultAccessToken>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout }).then(response => ({\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        }));\n    }\n\n    loadInstruments(\n        requestContext: InstrumentRequestContext,\n        shippingAddress?: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(\n        requestContext: InstrumentRequestContext,\n        instrumentId: string\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) =>  errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstruments(\n        requestContext: InstrumentRequestContext\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(\n                requestContext, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstrumentsWithAddress(\n        requestContext: InstrumentRequestContext,\n        shippingAddress: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<LoadShippingCountriesAction> {\n        return Observable.create((observer: Observer<LoadShippingCountriesAction>) => {\n            observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesRequested));\n\n            this._shippingCountryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ShippingCountryActionType.LoadShippingCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport {\n    ShippingStrategyActionType,\n    ShippingStrategyDeinitializeAction,\n    ShippingStrategyInitializeAction,\n    ShippingStrategySelectOptionAction,\n    ShippingStrategyUpdateAddressAction,\n} from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: Partial<AddressRequestBody>, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            if (methodId && state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            if (methodId && !state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../../shipping-request-options';\nimport { ShippingStrategyActionType } from '../../shipping-strategy-actions';\nimport ShippingStrategy from '../shipping-strategy';\n\nimport AmazonPayShippingInitializeOptions from './amazon-pay-shipping-initialize-options';\n\nexport default class AmazonPayShippingStrategy implements ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    updateAddress(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n","import { AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingRequestOptions } from '../../shipping-request-options';\nimport ShippingStrategy from '../shipping-strategy';\n\nexport default class DefaultShippingStrategy implements ShippingStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    initialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { memoize } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\n\nconst cloneDeep = memoize(<T>(input: T): T => {\n    if (Array.isArray(input)) {\n        return input.map((value: T[keyof T]) => (\n            cloneDeepSafe(value)\n        )) as any;\n    }\n\n    if (isPlainObject(input)) {\n        return (Object.keys(input) as Array<keyof T>)\n            .reduce((result, key) => ({\n                ...result,\n                [key]: cloneDeepSafe(input[key]),\n            }), {}) as T;\n    }\n\n    return input;\n});\n\n// Use WeakMap as the MapCache, this allows for better garbage collection\n// There's a deprecated `clear` method in the lodash implementation\n// of MapCache, hence the `any`\ncloneDeep.cache = new WeakMap() as any;\n\n/**\n * This is a wrapper function for `cloneDeep`. We need it because `cloneDeep` is\n * a memoized function using an instance of `WeakMap` as its cache. Without this\n * wrapper, the memoized function will throw an error if it is called with a\n * non-object argument.\n */\nconst cloneDeepSafe = <T>(input: T): T => {\n    return typeof input === 'object' && input !== null ?\n        cloneDeep(input) :\n        input;\n};\n\n/**\n * Clone the return value of a function. If the result is the same as previous\n * calls, return the previous clone instead of cloning it again.\n */\nexport default function cloneResult<T extends Func>(fn: T): T {\n    return ((...args: any[]) => cloneDeepSafe(fn(...args))) as T;\n}\n\nexport type Func = (...args: any[]) => any;\n","import { createSelectorCreator, defaultMemoize } from 'reselect';\nimport * as shallowEqual from 'shallowequal';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\nconst createShallowEqualSelector = createSelectorCreator(\n    defaultMemoize,\n    (a: any, b: any) => shallowEqual(a, b)\n);\n\nexport default withMemoizedCombiner(createShallowEqualSelector);\n","import {\n    createCheckoutStoreErrorSelectorFactory,\n    createCheckoutStoreSelectorFactory,\n    createCheckoutStoreStatusSelectorFactory,\n    CheckoutSelectors,\n    InternalCheckoutSelectors,\n} from '../checkout';\n\nexport type CheckoutSelectorsFactory = (selectors: InternalCheckoutSelectors) => CheckoutSelectors;\n\nexport function createCheckoutSelectorsFactory(): CheckoutSelectorsFactory {\n    const createCheckoutStoreSelector = createCheckoutStoreSelectorFactory();\n    const createCheckoutStoreErrorSelector = createCheckoutStoreErrorSelectorFactory();\n    const createCheckoutStoreStatusSelector = createCheckoutStoreStatusSelectorFactory();\n\n    return (selectors: InternalCheckoutSelectors) => {\n        const data = createCheckoutStoreSelector(selectors);\n        const errors = createCheckoutStoreErrorSelector(selectors);\n        const statuses = createCheckoutStoreStatusSelector(selectors);\n\n        return {\n            data,\n            errors,\n            statuses,\n        };\n    };\n}\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    return createCheckoutSelectorsFactory()(selectors);\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { Address } from '../address';\nimport { BillingAddress } from '../billing';\nimport { Cart } from '../cart';\nimport { createSelector } from '../common/selector';\nimport { cloneResult as clone } from '../common/utility';\nimport { StoreConfig } from '../config/config';\nimport { Coupon, GiftCertificate } from '../coupon';\nimport { Customer } from '../customer';\nimport { FormField } from '../form';\nimport { Country } from '../geography';\nimport { Order } from '../order';\nimport { PaymentMethod } from '../payment';\nimport { Instrument } from '../payment/instrument';\nimport { Consignment, ShippingOption } from '../shipping';\n\nimport Checkout from './checkout';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\nexport default interface CheckoutStoreSelector {\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined;\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined;\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined;\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined;\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined;\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined;\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined;\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined;\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): BillingAddress | undefined;\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined;\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined;\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined;\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined;\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined;\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined;\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined;\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean;\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined;\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[];\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[];\n}\n\nexport type CheckoutStoreSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreSelector;\n\nexport function createCheckoutStoreSelectorFactory(): CheckoutStoreSelectorFactory {\n    const getCheckout = createSelector(\n        ({ checkout }: InternalCheckoutSelectors) => checkout.getCheckout,\n        getCheckout => clone(getCheckout)\n    );\n\n    const getOrder = createSelector(\n        ({ order }: InternalCheckoutSelectors) => order.getOrder,\n        getOrder => clone(getOrder)\n    );\n\n    const getConfig = createSelector(\n        ({ config }: InternalCheckoutSelectors) => config.getStoreConfig,\n        getStoreConfig => clone(getStoreConfig)\n    );\n\n    const getShippingAddress = createSelector(\n        ({ shippingAddress }: InternalCheckoutSelectors) => shippingAddress.getShippingAddress,\n        ({ config }: InternalCheckoutSelectors) => config.getContextConfig,\n        (getShippingAddress, getContextConfig) => clone(() => {\n            const shippingAddress = getShippingAddress();\n            const context = getContextConfig();\n\n            if (!shippingAddress) {\n                if (!context || !context.geoCountryCode) {\n                    return;\n                }\n\n                return {\n                    firstName: '',\n                    lastName: '',\n                    company: '',\n                    address1: '',\n                    address2: '',\n                    city: '',\n                    stateOrProvince: '',\n                    stateOrProvinceCode: '',\n                    postalCode: '',\n                    country: '',\n                    phone: '',\n                    customFields: [],\n                    countryCode: context.geoCountryCode,\n                };\n            }\n\n            return shippingAddress;\n        })\n    );\n\n    const getShippingOptions = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(() => {\n            const consignments = getConsignments();\n\n            if (consignments && consignments.length) {\n                return consignments[0].availableShippingOptions;\n            }\n        })\n    );\n\n    const getConsignments = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(getConsignments)\n    );\n\n    const getSelectedShippingOption = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(() => {\n            const consignments = getConsignments();\n\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return consignments[0].selectedShippingOption;\n        })\n    );\n\n    const getShippingCountries = createSelector(\n        ({ shippingCountries }: InternalCheckoutSelectors) => shippingCountries.getShippingCountries,\n        getShippingCountries => clone(getShippingCountries)\n    );\n\n    const getBillingAddress = createSelector(\n        ({ billingAddress }: InternalCheckoutSelectors) => billingAddress.getBillingAddress,\n        getBillingAddress => clone(getBillingAddress)\n    );\n\n    const getBillingCountries = createSelector(\n        ({ countries }: InternalCheckoutSelectors) => countries.getCountries,\n        getCountries => clone(getCountries)\n    );\n\n    const getPaymentMethods = createSelector(\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethods,\n        getPaymentMethods => clone(getPaymentMethods)\n    );\n\n    const getPaymentMethod = createSelector(\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        getPaymentMethod => clone(getPaymentMethod)\n    );\n\n    const getSelectedPaymentMethod = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.getPaymentId,\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        (getPaymentId, getPaymentMethod) => clone(() => {\n            const payment = getPaymentId();\n\n            return payment && getPaymentMethod(payment.providerId, payment.gatewayId);\n        })\n    );\n\n    const getCart = createSelector(\n        ({ cart }: InternalCheckoutSelectors) => cart.getCart,\n        getCart => clone(getCart)\n    );\n\n    const getCoupons = createSelector(\n        ({ coupons }: InternalCheckoutSelectors) => coupons.getCoupons,\n        getCoupons => clone(getCoupons)\n    );\n\n    const getGiftCertificates = createSelector(\n        ({ giftCertificates }: InternalCheckoutSelectors) => giftCertificates.getGiftCertificates,\n        getGiftCertificates => clone(getGiftCertificates)\n    );\n\n    const getCustomer = createSelector(\n        ({ customer }: InternalCheckoutSelectors) => customer.getCustomer,\n        getCustomer => clone(getCustomer)\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.isPaymentDataRequired,\n        isPaymentDataRequired => clone(isPaymentDataRequired)\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.isPaymentDataSubmitted,\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        (isPaymentDataSubmitted, getPaymentMethod) => clone((methodId: string, gatewayId?: string) => {\n            return isPaymentDataSubmitted(getPaymentMethod(methodId, gatewayId));\n        })\n    );\n\n    const getInstruments = createSelector(\n        ({ instruments }: InternalCheckoutSelectors) => instruments.getInstruments,\n        getInstruments => clone(getInstruments)\n    );\n\n    const getBillingAddressFields = createSelector(\n        ({ form }: InternalCheckoutSelectors) => form.getBillingAddressFields,\n        ({ countries }: InternalCheckoutSelectors) => countries.getCountries,\n        (getBillingAddressFields, getCountries) => clone((countryCode: string) => {\n            return getBillingAddressFields(getCountries(), countryCode);\n        })\n    );\n\n    const getShippingAddressFields = createSelector(\n        ({ form }: InternalCheckoutSelectors) => form.getShippingAddressFields,\n        ({ shippingCountries }: InternalCheckoutSelectors) => shippingCountries.getShippingCountries,\n        (getShippingAddressFields, getShippingCountries) => clone((countryCode: string) => {\n            return getShippingAddressFields(getShippingCountries(), countryCode);\n        })\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreSelector => {\n        return {\n            getCheckout: getCheckout(state),\n            getOrder: getOrder(state),\n            getConfig: getConfig(state),\n            getShippingAddress: getShippingAddress(state),\n            getShippingOptions: getShippingOptions(state),\n            getConsignments: getConsignments(state),\n            getSelectedShippingOption: getSelectedShippingOption(state),\n            getShippingCountries: getShippingCountries(state),\n            getBillingAddress: getBillingAddress(state),\n            getBillingCountries: getBillingCountries(state),\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getSelectedPaymentMethod: getSelectedPaymentMethod(state),\n            getCart: getCart(state),\n            getCoupons: getCoupons(state),\n            getGiftCertificates: getGiftCertificates(state),\n            getCustomer: getCustomer(state),\n            isPaymentDataRequired: isPaymentDataRequired(state),\n            isPaymentDataSubmitted: isPaymentDataSubmitted(state),\n            getInstruments: getInstruments(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n            getShippingAddressFields: getShippingAddressFields(state),\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { RequestError } from '../common/error/errors';\nimport { createSelector, createShallowEqualSelector } from '../common/selector';\nimport { Omit } from '../common/types';\n\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\nexport default interface CheckoutStoreErrorSelector {\n    getError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to apply store credit.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyStoreCreditError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined;\n}\n\nexport type CheckoutStoreErrorSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreErrorSelector;\n\nexport function createCheckoutStoreErrorSelectorFactory(): CheckoutStoreErrorSelectorFactory {\n    const getError = createShallowEqualSelector(\n        (selector: Omit<CheckoutStoreErrorSelector, 'getError'>) => selector,\n        selector => () => {\n            for (const key of Object.keys(selector) as Array<keyof Omit<CheckoutStoreErrorSelector, 'getError'>>) {\n                const error = selector[key]();\n\n                if (error) {\n                    return error;\n                }\n            }\n        }\n    );\n\n    const getSelectShippingOptionError = createSelector(\n        ({ shippingStrategies }: InternalCheckoutSelectors) => shippingStrategies.getSelectOptionError,\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getUpdateShippingOptionError,\n        (getSelectOptionError, getUpdateShippingOptionError) => (consignmentId?: string) => {\n            return (\n                getSelectOptionError() ||\n                getUpdateShippingOptionError(consignmentId)\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreErrorSelector => {\n        const selector = {\n            getLoadCheckoutError: state.checkout.getLoadError,\n            getUpdateCheckoutError: state.checkout.getUpdateError,\n            getSubmitOrderError: state.paymentStrategies.getExecuteError,\n            getFinalizeOrderError: state.paymentStrategies.getFinalizeError,\n            getLoadOrderError: state.order.getLoadError,\n            getLoadCartError: state.cart.getLoadError,\n            getLoadBillingCountriesError: state.countries.getLoadError,\n            getLoadShippingCountriesError: state.shippingCountries.getLoadError,\n            getLoadPaymentMethodsError: state.paymentMethods.getLoadError,\n            getLoadPaymentMethodError: state.paymentMethods.getLoadMethodError,\n            getInitializePaymentError: state.paymentStrategies.getInitializeError,\n            getSignInError: state.customerStrategies.getSignInError,\n            getSignOutError: state.customerStrategies.getSignOutError,\n            getInitializeCustomerError: state.customerStrategies.getInitializeError,\n            getLoadShippingOptionsError: state.consignments.getLoadShippingOptionsError,\n            getSelectShippingOptionError: getSelectShippingOptionError(state),\n            getContinueAsGuestError: state.billingAddress.getContinueAsGuestError,\n            getUpdateBillingAddressError: state.billingAddress.getUpdateError,\n            getUpdateShippingAddressError: state.shippingStrategies.getUpdateAddressError,\n            getDeleteConsignmentError: state.consignments.getDeleteError,\n            getUpdateConsignmentError: state.consignments.getUpdateError,\n            getCreateConsignmentsError: state.consignments.getCreateError,\n            getInitializeShippingError: state.shippingStrategies.getInitializeError,\n            getApplyStoreCreditError: state.storeCredit.getApplyError,\n            getApplyCouponError: state.coupons.getApplyError,\n            getRemoveCouponError: state.coupons.getRemoveError,\n            getApplyGiftCertificateError: state.giftCertificates.getApplyError,\n            getRemoveGiftCertificateError: state.giftCertificates.getRemoveError,\n            getLoadInstrumentsError: state.instruments.getLoadError,\n            getDeleteInstrumentError: state.instruments.getDeleteError,\n            getLoadConfigError: state.config.getLoadError,\n        };\n\n        return {\n            getError: getError(selector),\n            ...selector,\n        };\n    });\n}\n","import { memoizeOne } from '@bigcommerce/memoize';\n\nimport { createSelector, createShallowEqualSelector } from '../common/selector';\nimport { Omit } from '../common/types';\n\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\nexport default interface CheckoutStoreStatusSelector {\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean;\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean;\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean;\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean;\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean;\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean;\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean;\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean;\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean;\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean;\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean;\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean;\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean;\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean;\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean;\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean;\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean;\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean;\n\n    /**\n     * Checks whether the current customer is applying store credit.\n     *\n     * @returns True if applying store credit, otherwise false.\n     */\n    isApplyingStoreCredit(): boolean;\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean;\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean;\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean;\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean;\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean;\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean;\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean;\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean;\n}\n\nexport type CheckoutStoreStatusSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreStatusSelector;\n\nexport function createCheckoutStoreStatusSelectorFactory(): CheckoutStoreStatusSelectorFactory {\n    const isPending = createShallowEqualSelector(\n        (selector: Omit<CheckoutStoreStatusSelector, 'isPending'>) => selector,\n        selector => () => {\n            return (Object.keys(selector) as Array<keyof Omit<CheckoutStoreStatusSelector, 'isPending'>>)\n                .some(key => selector[key]());\n        }\n    );\n\n    const isSelectingShippingOption = createSelector(\n        ({ shippingStrategies }: InternalCheckoutSelectors) => shippingStrategies.isSelectingOption,\n        ({ consignments }: InternalCheckoutSelectors) => consignments.isUpdatingShippingOption,\n        (isSelectingOption, isUpdatingShippingOption) => (consignmentId?: string) => {\n            return (\n                isSelectingOption() ||\n                isUpdatingShippingOption(consignmentId)\n            );\n        }\n    );\n\n    const isCustomerStepPending = createSelector(\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isInitializing,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isSigningIn,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isSigningOut,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isWidgetInteracting,\n        (isInitializing, isSigningIn, isSigningOut, isWidgetInteracting) => (methodId?: string) => {\n            return (\n                isInitializing(methodId) ||\n                isSigningIn(methodId) ||\n                isSigningOut(methodId) ||\n                isWidgetInteracting(methodId)\n            );\n        }\n    );\n\n    const isPaymentStepPending = createSelector(\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isInitializing,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isExecuting,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isFinalizing,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isWidgetInteracting,\n        (isInitializing, isExecuting, isFinalizing, isWidgetInteracting) => (methodId?: string) => {\n            return (\n                isInitializing(methodId) ||\n                isExecuting(methodId) ||\n                isFinalizing(methodId) ||\n                isWidgetInteracting(methodId)\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreStatusSelector => {\n        const selector = {\n            isLoadingCheckout: state.checkout.isLoading,\n            isUpdatingCheckout: state.checkout.isUpdating,\n            isSubmittingOrder: state.paymentStrategies.isExecuting,\n            isFinalizingOrder: state.paymentStrategies.isFinalizing,\n            isLoadingOrder: state.order.isLoading,\n            isLoadingCart: state.cart.isLoading,\n            isLoadingBillingCountries: state.countries.isLoading,\n            isLoadingShippingCountries: state.shippingCountries.isLoading,\n            isLoadingPaymentMethods: state.paymentMethods.isLoading,\n            isLoadingPaymentMethod: state.paymentMethods.isLoadingMethod,\n            isInitializingPayment: state.paymentStrategies.isInitializing,\n            isSigningIn: state.customerStrategies.isSigningIn,\n            isSigningOut: state.customerStrategies.isSigningOut,\n            isInitializingCustomer: state.customerStrategies.isInitializing,\n            isLoadingShippingOptions: state.consignments.isLoadingShippingOptions,\n            isSelectingShippingOption: isSelectingShippingOption(state),\n            isUpdatingBillingAddress: state.billingAddress.isUpdating,\n            isContinuingAsGuest: state.billingAddress.isContinuingAsGuest,\n            isUpdatingShippingAddress: state.shippingStrategies.isUpdatingAddress,\n            isUpdatingConsignment: state.consignments.isUpdating,\n            isDeletingConsignment: state.consignments.isDeleting,\n            isCreatingConsignments: state.consignments.isCreating,\n            isInitializingShipping: state.shippingStrategies.isInitializing,\n            isApplyingStoreCredit: state.storeCredit.isApplying,\n            isApplyingCoupon: state.coupons.isApplying,\n            isRemovingCoupon: state.coupons.isRemoving,\n            isApplyingGiftCertificate: state.giftCertificates.isApplying,\n            isRemovingGiftCertificate: state.giftCertificates.isRemoving,\n            isLoadingInstruments: state.instruments.isLoading,\n            isDeletingInstrument: state.instruments.isDeleting,\n            isLoadingConfig: state.config.isLoading,\n            isCustomerStepPending: isCustomerStepPending(state),\n            isPaymentStepPending: isPaymentStepPending(state),\n        };\n\n        return {\n            isPending: isPending(selector),\n            ...selector,\n        };\n    });\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { createDataStoreProjection, DataStoreProjection } from '../common/data-store';\nimport { ErrorActionCreator, ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { bindDecorator as bind } from '../common/utility';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { SpamProtectionActionCreator, SpamProtectionOptions } from '../order/spam-protection';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody } from '../shipping/consignment';\nimport StoreCreditActionCreator from '../store-credit/store-credit-action-creator';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutParams from './checkout-params';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport { createCheckoutSelectorsFactory, CheckoutSelectorsFactory } from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\n@bind\nexport default class CheckoutService {\n    private _storeProjection: DataStoreProjection<CheckoutSelectors>;\n    private _errorTransformer: ErrorMessageTransformer;\n    private _selectorsFactory: CheckoutSelectorsFactory;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _errorActionCreator: ErrorActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator,\n        private _storeCreditActionCreator: StoreCreditActionCreator\n    ) {\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n        this._selectorsFactory = createCheckoutSelectorsFactory();\n        this._storeProjection = createDataStoreProjection(this._store, this._selectorsFactory);\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._storeProjection.getState();\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._storeProjection.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._storeProjection.subscribe(subscriber, ...filters);\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     payment: {\n     *         methodId: 'braintree',\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(address: Partial<AddressRequestBody>, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that unassigns items from a specific shipping address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and unassigns the specified items. If the consignment ends up with no line items\n     * after the unassignment, it will be deleted.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    unassignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.unassignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddres`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: Partial<BillingAddressRequestBody>, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies or removes customer's store credit code to the current checkout.\n     *\n     * Once the store credit gets applied, the outstanding balance will be adjusted accordingly.\n     *\n     * ```js\n     * const state = await service.applyStoreCredit(true);\n     *\n     * console.log(state.data.getCheckout().outstandingBalance);\n     * ```\n     *\n     * @param options - Options for applying store credit.\n     * @returns A promise that resolves to the current state.\n     */\n    applyStoreCredit(useStoreCredit: boolean, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._storeCreditActionCreator.applyStoreCredit(useStoreCredit, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Clear errors that have been collected from previous calls.\n     *\n     * ```js\n     * const state = await service.clearError(error);\n     *\n     * console.log(state.errors.getError());\n     * ```\n     *\n     * @param error - Specific error object to clear\n     * @returns A promise that resolves to the current state.\n     */\n    clearError(error: Error): Promise<CheckoutSelectors> {\n        const action = this._errorActionCreator.clearError(error);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the spam protection for order creation.\n     *\n     * With spam protection enabled, the customer has to be verified as\n     * a human. The order creation will fail if spam protection\n     * is enabled but verification fails.\n     *\n     * ```js\n     * await service.initializeSpamProtection({\n     *     containerId: 'spamProtectionContainer',\n     * });\n     * ```\n     *\n     * @param options - Options for initializing spam protection.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeSpamProtection(options: SpamProtectionOptions): Promise<CheckoutSelectors> {\n        const action = this._spamProtectionActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'spamProtection' });\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Action | Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { ErrorActionCreator } from '../common/error';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender, ConfigState } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createSpamProtection, SpamProtectionActionCreator } from '../order/spam-protection';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingCountryRequestSender, ShippingStrategyActionCreator } from '../shipping';\nimport { StoreCreditActionCreator, StoreCreditRequestSender } from '../store-credit';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * @remarks\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const config: ConfigState = {\n        meta: {\n            externalSource: options && options.externalSource,\n        },\n        errors: {},\n        statuses: {},\n    };\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender({ host: options && options.host });\n    const store = createCheckoutStore({ config }, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const spamProtection = createSpamProtection(createScriptLoader());\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(spamProtection);\n    const orderActionCreator = new OrderActionCreator(\n        orderRequestSender,\n        new CheckoutValidator(checkoutRequestSender),\n        spamProtectionActionCreator\n    );\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new ErrorActionCreator(),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, paymentClient, requestSender, spamProtection),\n            orderActionCreator\n        ),\n        new ShippingCountryActionCreator(new ShippingCountryRequestSender(requestSender, { locale })),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender)),\n        spamProtectionActionCreator,\n        new StoreCreditActionCreator(new StoreCreditRequestSender(requestSender))\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n    externalSource?: string;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { MutationObserverFactory } from '../../common/dom/mutation-observer';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport default function createSpamProtection(scriptLoader: ScriptLoader) {\n    return new GoogleRecaptcha(\n        new GoogleRecaptchaScriptLoader(scriptLoader),\n        new MutationObserverFactory()\n    );\n}\n","// tslint:disable-next-line:no-reference\n/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport {\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    VisaCheckoutScriptLoader\n} from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport CustomerActionCreator from './customer-action-creator';\nimport CustomerRequestSender from './customer-request-sender';\nimport CustomerStrategyActionCreator from './customer-strategy-action-creator';\nimport { CustomerStrategy } from './strategies';\nimport { AmazonPayCustomerStrategy } from './strategies/amazon';\nimport { BraintreeVisaCheckoutCustomerStrategy } from './strategies/braintree';\nimport { ChasePayCustomerStrategy } from './strategies/chasepay';\nimport { DefaultCustomerStrategy } from './strategies/default';\nimport { GooglePayCustomerStrategy } from './strategies/googlepay';\nimport { MasterpassCustomerStrategy } from './strategies/masterpass';\nimport { SquareCustomerStrategy } from './strategies/square';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const formPoster = createFormPoster();\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(scriptLoader),\n            requestSender,\n            formPoster\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquareCustomerStrategy(\n            store,\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            ),\n            formPoster\n        )\n    );\n\n    registry.register('googlepaystripe', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            ),\n            formPoster\n    )\n);\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport { ShippingStrategy } from './strategies';\nimport { AmazonPayShippingStrategy } from './strategies/amazon';\nimport { DefaultShippingStrategy } from './strategies/default';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const consignmentActionCreator = new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            consignmentActionCreator,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            consignmentActionCreator\n        )\n    );\n\n    return registry;\n}\n","import { EmbeddedCheckoutFrameLoadedEvent } from '../embedded-checkout-events';\n\nexport default function handleFrameLoadedEvent(message: EmbeddedCheckoutFrameLoadedEvent): void {\n    if (!message.payload || !message.payload.contentId) {\n        return;\n    }\n\n    const body = document.getElementById(message.payload.contentId);\n\n    if (!body || body.hasAttribute('data-iframe-height')) {\n        return;\n    }\n\n    body.setAttribute('data-iframe-height', '');\n}\n","export default interface CustomError extends Error {\n    message: string;\n    type: string;\n    subtype?: string;\n}\n\nexport function isCustomError(error: any): error is CustomError {\n    return (\n        typeof error.message === 'string' &&\n        typeof error.type === 'string' &&\n        (typeof error.subtype === 'string' || !error.subtype) &&\n        error instanceof Error\n    );\n}\n","import { isCustomError, CustomError } from '../../common/error/errors';\nimport { bindDecorator as bind } from '../../common/utility';\nimport EmbeddedCheckoutError from '../embedded-checkout-error';\nimport {\n    EmbeddedCheckoutCompleteEvent,\n    EmbeddedCheckoutErrorEvent,\n    EmbeddedCheckoutEvent,\n    EmbeddedCheckoutEventMap,\n    EmbeddedCheckoutEventType,\n    EmbeddedCheckoutFrameErrorEvent,\n    EmbeddedCheckoutFrameLoadedEvent,\n    EmbeddedCheckoutLoadedEvent,\n    EmbeddedCheckoutSignedOutEvent,\n} from '../embedded-checkout-events';\nimport EmbeddedCheckoutStyles from '../embedded-checkout-styles';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport { EmbeddedContentEventMap, EmbeddedContentEventType } from './embedded-content-events';\nimport EmbeddedContentOptions from './embedded-content-options';\n\n@bind\nexport default class IframeEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    /**\n     * @internal\n     */\n    constructor(\n        private _messageListener: IframeEventListener<EmbeddedContentEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _untargetedMessagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _messageHandlers: EventCallbacks<EmbeddedCheckoutEventMap> = {}\n    ) {\n        this._messageListener.listen();\n    }\n\n    postComplete(): void {\n        const message: EmbeddedCheckoutCompleteEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutComplete,\n        };\n\n        this._postMessage(message);\n    }\n\n    postError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutErrorEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutError,\n            payload: this._transformError(payload),\n        };\n\n        this._postMessage(message);\n    }\n\n    postFrameError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutFrameErrorEvent = {\n            type: EmbeddedCheckoutEventType.FrameError,\n            payload: this._transformError(payload),\n        };\n\n        // Ideally, all messages should be targeted at a specific origin.\n        // However, for `FrameError` message, we have to post it in an\n        // untargeted fashion. This is because the error could be caused by a\n        // missing cart. That makes it not possible to determine of site origin\n        // of the parent window. Nevertheless, we still want to notify the\n        // parent window about the error.\n        this._postMessage(message, { untargeted: true });\n    }\n\n    postFrameLoaded(payload?: EmbeddedContentOptions): void {\n        const message: EmbeddedCheckoutFrameLoadedEvent = {\n            type: EmbeddedCheckoutEventType.FrameLoaded,\n            payload,\n        };\n\n        this._postMessage(message);\n    }\n\n    postLoaded(): void {\n        const message: EmbeddedCheckoutLoadedEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutLoaded,\n        };\n\n        this._postMessage(message);\n    }\n\n    postSignedOut(): void {\n        const message: EmbeddedCheckoutSignedOutEvent = {\n            type: EmbeddedCheckoutEventType.SignedOut,\n        };\n\n        this._postMessage(message);\n    }\n\n    receiveStyles(handler: (styles: EmbeddedCheckoutStyles) => void): void {\n        this._messageListener.addListener(EmbeddedContentEventType.StyleConfigured, ({ payload }) => {\n            handler(payload);\n        });\n    }\n\n    private _postMessage(message: EmbeddedCheckoutEvent, options?: { untargeted?: boolean }): void {\n        this._notifyMessageHandlers(message);\n\n        if (options && options.untargeted) {\n            return this._untargetedMessagePoster.post(message);\n        }\n\n        this._messagePoster.post(message);\n    }\n\n    private _notifyMessageHandlers(message: EmbeddedCheckoutEvent): void {\n        Object.keys(this._messageHandlers)\n            .forEach(key => {\n                const handler = this._messageHandlers[key as keyof EmbeddedCheckoutEventMap];\n\n                if (handler) {\n                    handler.call(null, message);\n                }\n            });\n    }\n\n    private _transformError(error: Error | CustomError): EmbeddedCheckoutError {\n        return {\n            message: error.message,\n            type: isCustomError(error) ? error.type : undefined,\n            subtype: isCustomError(error) ? error.subtype : undefined,\n        };\n    }\n}\n\nexport type EventCallbacks<TEventMap> = {\n    [key in keyof TEventMap]?: (event: TEventMap[key]) => void;\n};\n","import { bindDecorator as bind } from '../../common/utility';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\n\n@bind\nexport default class NoopEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    postComplete(): void {}\n\n    postError(): void {}\n\n    postFrameError(): void {}\n\n    postFrameLoaded(): void {}\n\n    postLoaded(): void {}\n\n    postSignedOut(): void {}\n\n    receiveStyles(): void {}\n}\n","import { setupContentWindowForIframeResizer } from '../../common/iframe';\nimport { EmbeddedCheckoutEvent, EmbeddedCheckoutEventType } from '../embedded-checkout-events';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport EmbeddedCheckoutMessengerOptions from './embedded-checkout-messenger-options';\nimport { EmbeddedContentEventMap } from './embedded-content-events';\nimport handleFrameLoadedEvent from './handle-frame-loaded-event';\nimport IframeEmbeddedCheckoutMessenger from './iframe-embedded-checkout-messenger';\nimport NoopEmbeddedCheckoutMessenger from './noop-embedded-checkout-messenger';\n\n/**\n * Create an instance of `EmbeddedCheckoutMessenger`.\n *\n * @remarks\n * The object is responsible for posting messages to the parent window from the\n * iframe when certain events have occurred. For example, when the checkout\n * form is first loaded, you should notify the parent window about it.\n *\n * The iframe can only be embedded in domains that are allowed by the store.\n *\n * ```ts\n * const messenger = createEmbeddedCheckoutMessenger({\n *     parentOrigin: 'https://some/website',\n * });\n *\n * messenger.postFrameLoaded();\n * ```\n *\n * @alpha\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @param options - Options for creating `EmbeddedCheckoutMessenger`\n * @returns - An instance of `EmbeddedCheckoutMessenger`\n */\nexport default function createEmbeddedCheckoutMessenger(options: EmbeddedCheckoutMessengerOptions): EmbeddedCheckoutMessenger {\n    setupContentWindowForIframeResizer();\n\n    const parentWindow = options.parentWindow || window.parent;\n\n    // Return a No-op messenger if it is not called inside an iframe\n    if (window === parentWindow) {\n        return new NoopEmbeddedCheckoutMessenger();\n    }\n\n    return new IframeEmbeddedCheckoutMessenger(\n        new IframeEventListener<EmbeddedContentEventMap>(options.parentOrigin),\n        new IframeEventPoster<EmbeddedCheckoutEvent>(options.parentOrigin, parentWindow),\n        new IframeEventPoster<EmbeddedCheckoutEvent>('*', parentWindow),\n        { [EmbeddedCheckoutEventType.FrameLoaded]: handleFrameLoadedEvent }\n    );\n}\n","import { isObject, union } from 'lodash';\nimport * as MessageFormat from 'messageformat';\n\nimport Logger from '../common/log/logger';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\n@bind\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value as Translations, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * @remarks\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(\n        currencySettings: CurrencyConfig\n    ) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const {\n            decimalPlaces,\n            symbolLocation,\n            symbol,\n            thousandsSeparator,\n            decimalSeparator,\n        } = currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ?\n            `-${formattedCurrency}` :\n            formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [ integerAmount, decimalAmount = '' ] = (this._toFixed(positiveAmount, this._decimalPlaces)).split('.');\n        const parsedIntegerAmount = integerAmount.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this._thousandsSeparator);\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        return [\n            parsedIntegerAmount,\n            decimalAmount,\n        ].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return (this._symbolLocation.toLowerCase() === 'left') ?\n            `${this._symbol}${formattedNumber}` :\n            `${formattedNumber}${this._symbol}`;\n    }\n\n    private _toFixed(value: number, precision: number): string {\n        return (+(Math.round(+(value + 'e' + precision)) + 'e' + -precision)).toFixed(precision);\n    }\n}\n","import { bindDecorator as bind } from '../common/utility';\nimport { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\n@bind\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _storeConfig: StoreConfig\n    ) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = this._storeConfig.shopperCurrency.exchangeRate;\n\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * @remarks\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * @alpha\n * Please note that `CurrencyService` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(\n    config: StoreConfig\n): CurrencyService {\n    return new CurrencyService(config);\n}\n","export { createTimeout } from '@bigcommerce/request-sender';\n\nexport { createCheckoutService } from './checkout';\nexport { createCheckoutButtonInitializer } from './checkout-buttons';\nexport { embedCheckout } from './embedded-checkout';\nexport { createEmbeddedCheckoutMessenger } from './embedded-checkout/iframe-content';\nexport { createLanguageService } from './locale';\nexport { createCurrencyService } from './currency';\n","import { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeModuleCreator, GooglePayBraintreeSDK } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\ntype TokenizeType = 'AndroidPayCard' | 'CreditCard';\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload;\n}\n\nexport interface GooglePayCreator extends BraintreeModuleCreator<GooglePayBraintreeSDK> {}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: new(options: GooglePayPaymentOptions) => GooglePayClient;\n        };\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        };\n        type: string;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string;\n        nonce: string;\n        cardInformation: {\n            type: string;\n            number: string;\n        };\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [{\n        type: string;\n        parameters: {\n            allowedAuthMethods: string[];\n            allowedCardNetworks: string[];\n            allowPrepaidCards?: boolean;\n            billingAddressRequired?: boolean;\n            billingAddressParameters?: {\n                format?: string;\n                phoneNumberRequired?: boolean;\n            };\n        };\n        tokenizationSpecification?: {\n            type: string;\n            parameters: {\n                gateway: string;\n                gatewayMerchantId?: string;\n                'braintree:apiVersion'?: string;\n                'braintree:clientKey'?: string;\n                'braintree:merchantId'?: string;\n                'braintree:sdkVersion'?: string;\n                'braintree:authorizationFingerprint'?: string;\n                'stripe:version'?: string;\n                'stripe:publishableKey'?: string;\n            };\n        };\n    }];\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport {\n    ButtonColor,\n    ButtonType,\n    EnvironmentType,\n    GooglePaymentData,\n    GooglePayAddress,\n    GooglePayClient,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    GooglePaySDK,\n    TokenizePayload\n} from './googlepay';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consigmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._postForm(this._googlePayInitializer.parseResponse(paymentData))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consigmentActionCreator.updateAddress(this._mapGooglePayAddressToShippingAddress(shippingAddress))\n        );\n    }\n\n    private _configureWallet(): Promise<void> {\n        const methodId = this._getMethodId();\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient.isReadyToPay({\n                        allowedPaymentMethods: [\n                            {\n                                type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                parameters: {\n                                    allowedAuthMethods: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedAuthMethods,\n                                    allowedCardNetworks: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedCardNetworks,\n                                },\n                            },\n                        ],\n                        apiVersion: paymentDataRequest.apiVersion,\n                        apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                    }).then(response => {\n                        if (response.result) {\n                            return;\n                        }\n\n                        throw new PaymentMethodInvalidError();\n                    });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(paymentData: GooglePaymentData, id: string): BillingAddressUpdateRequestBody {\n        return {\n            id,\n            firstName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(0, -1).join(' '),\n            lastName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(-1).join(' '),\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1: paymentData.paymentMethodData.info.billingAddress.address1,\n            address2: paymentData.paymentMethodData.info.billingAddress.address2 + paymentData.paymentMethodData.info.billingAddress.address3,\n            city: paymentData.paymentMethodData.info.billingAddress.locality,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode: paymentData.paymentMethodData.info.billingAddress.postalCode,\n            countryCode: paymentData.paymentMethodData.info.billingAddress.countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        return {\n            firstName: address.name.split(' ').slice(0, -1).join(' '),\n            lastName: address.name.split(' ').slice(-1).join(' '),\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            },\n        });\n    }\n\n    private _updateBillingAddress(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(paymentData, remoteBillingAddress.id);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { PaymentMethodClientUnavailableError } from '../../errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new PaymentMethodClientUnavailableError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(store: CheckoutStore, initializer: GooglePayInitializer): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(\n            new PaymentMethodRequestSender(requestSender)\n        ),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender)\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender)\n        ),\n        requestSender\n    );\n}\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n","import { StandardError } from '../../common/error/errors';\n\n/**\n * This error should be thrown when a shopper tries to sign in as a guest but\n * they are already signed in as a registered customer.\n */\nexport default class UnableToContinueAsGuestError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unable to continue as a guest because the customer is already signed in.');\n\n        this.name = 'UnableToContinueAsGuestError';\n        this.type = 'unable_to_continue_as_guest';\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\nimport { UnableToContinueAsGuestError } from './errors';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ContinueAsGuestAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new UnableToContinueAsGuestError();\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            observer.next(createAction(BillingAddressActionType.ContinueAsGuestRequested));\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.ContinueAsGuestFailed, response));\n                });\n        });\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n"],"sourceRoot":""}