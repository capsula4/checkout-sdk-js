{"version":3,"sources":["webpack://checkoutKit/webpack/bootstrap","webpack://checkoutKit/external \"tslib\"","webpack://checkoutKit/external \"@bigcommerce/data-store\"","webpack://checkoutKit/external \"lodash\"","webpack://checkoutKit/external \"rxjs\"","webpack://checkoutKit/./src/shipping/consignment-actions.ts","webpack://checkoutKit/./src/customer/customer-strategy-actions.ts","webpack://checkoutKit/./src/payment/payment-strategy-actions.ts","webpack://checkoutKit/./src/common/error/errors/missing-data-error.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-actions.ts","webpack://checkoutKit/./src/checkout/checkout-actions.ts","webpack://checkoutKit/./src/common/error/errors/standard-error.ts","webpack://checkoutKit/./src/common/utility/set-prototype-of.ts","webpack://checkoutKit/./src/coupon/coupon-actions.ts","webpack://checkoutKit/./src/billing/billing-address-actions.ts","webpack://checkoutKit/./src/order/order-actions.ts","webpack://checkoutKit/./src/payment/payment-method-actions.ts","webpack://checkoutKit/external \"rxjs/operators\"","webpack://checkoutKit/./src/checkout-buttons/checkout-button-actions.ts","webpack://checkoutKit/./src/coupon/gift-certificate-actions.ts","webpack://checkoutKit/./src/payment/instrument/instrument-actions.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout-events.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-actions.ts","webpack://checkoutKit/./src/common/error/errors/request-error.ts","webpack://checkoutKit/./src/store-credit/store-credit-actions.ts","webpack://checkoutKit/./src/config/config-actions.ts","webpack://checkoutKit/./src/geography/country-actions.ts","webpack://checkoutKit/./src/shipping/shipping-country-actions.ts","webpack://checkoutKit/external \"@bigcommerce/request-sender\"","webpack://checkoutKit/./src/payment/payment-status-types.ts","webpack://checkoutKit/external \"@bigcommerce/script-loader\"","webpack://checkoutKit/./src/common/http-request/content-type.ts","webpack://checkoutKit/external \"shallowequal\"","webpack://checkoutKit/./src/payment/payment-actions.ts","webpack://checkoutKit/./src/common/error/errors/invalid-argument-error.ts","webpack://checkoutKit/./src/payment/payment-method-types.ts","webpack://checkoutKit/./src/embedded-checkout/is-iframe-event.ts","webpack://checkoutKit/./src/common/utility/is-equal.ts","webpack://checkoutKit/external \"@bigcommerce/form-poster\"","webpack://checkoutKit/external \"local-storage-fallback\"","webpack://checkoutKit/external \"reselect\"","webpack://checkoutKit/./src/embedded-checkout/iframe-event-poster.ts","webpack://checkoutKit/./src/customer/customer-actions.ts","webpack://checkoutKit/./src/order/spam-protection/spam-protection-actions.ts","webpack://checkoutKit/./src/payment/errors/payment-method-invalid-error.ts","webpack://checkoutKit/./src/common/selector/with-memoized-combiner.ts","webpack://checkoutKit/./src/common/error/error-actions.ts","webpack://checkoutKit/./src/payment/payment-method-action-creator.ts","webpack://checkoutKit/./src/payment/payment-method-request-sender.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/embedded-content-events.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-event-listener.ts","webpack://checkoutKit/./src/checkout/checkout-default-includes.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-items.ts","webpack://checkoutKit/./src/cart/map-gift-certificate-to-internal-line-item.ts","webpack://checkoutKit/./src/common/http-request/internal-api-headers.ts","webpack://checkoutKit/./src/common/utility/cache-key-maps.ts","webpack://checkoutKit/./src/common/utility/cache-key-resolver.ts","webpack://checkoutKit/./src/common/utility/memoize.ts","webpack://checkoutKit/./src/checkout/checkout-params.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-sdk-creator.ts","webpack://checkoutKit/./src/cart/map-to-internal-line-item.ts","webpack://checkoutKit/external \"iframe-resizer\"","webpack://checkoutKit/./src/common/error/errors/not-initialized-error.ts","webpack://checkoutKit/./src/common/error/throw-error-action.ts","webpack://checkoutKit/./src/common/utility/amount-transformer.ts","webpack://checkoutKit/./src/common/url/parse-url.ts","webpack://checkoutKit/./src/common/data-store/cachable-action-decorator.ts","webpack://checkoutKit/./src/common/data-store/is-action-options.ts","webpack://checkoutKit/./src/common/data-store/cache-action.ts","webpack://checkoutKit/./src/common/utility/bind-decorator.ts","webpack://checkoutKit/./src/common/utility/omit-deep.ts","webpack://checkoutKit/./src/checkout/checkout-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-action-creator.ts","webpack://checkoutKit/./src/shipping/consignment-request-sender.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/get-callback-url.ts","webpack://checkoutKit/./src/shipping/map-to-internal-shipping-option.ts","webpack://checkoutKit/./src/common/utility/is-private.ts","webpack://checkoutKit/./src/common/error/errors/unrecoverable-error.ts","webpack://checkoutKit/./src/common/error/errors/map-from-internal-error-response.ts","webpack://checkoutKit/./src/common/error/errors/map-from-payment-error-response.ts","webpack://checkoutKit/./src/common/error/request-error-factory.ts","webpack://checkoutKit/./src/common/error/errors/map-from-storefront-error-response.ts","webpack://checkoutKit/./src/common/error/clear-error-reducer.ts","webpack://checkoutKit/./src/common/utility/replace.ts","webpack://checkoutKit/./src/common/utility/object-set.ts","webpack://checkoutKit/./src/billing/billing-address-state.ts","webpack://checkoutKit/./src/billing/billing-address-reducer.ts","webpack://checkoutKit/./src/common/utility/is-plain-object.ts","webpack://checkoutKit/./src/common/utility/array-replace.ts","webpack://checkoutKit/./src/common/utility/object-merge.ts","webpack://checkoutKit/./src/cart/cart-state.ts","webpack://checkoutKit/./src/cart/cart-reducer.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-state.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-reducer.ts","webpack://checkoutKit/./src/config/config-state.ts","webpack://checkoutKit/./src/config/config-reducer.ts","webpack://checkoutKit/./src/coupon/coupon-state.ts","webpack://checkoutKit/./src/coupon/coupon-reducer.ts","webpack://checkoutKit/./src/coupon/gift-certificate-state.ts","webpack://checkoutKit/./src/coupon/gift-certificate-reducer.ts","webpack://checkoutKit/./src/customer/customer-state.ts","webpack://checkoutKit/./src/customer/customer-reducer.ts","webpack://checkoutKit/./src/customer/customer-strategy-state.ts","webpack://checkoutKit/./src/customer/customer-strategy-reducer.ts","webpack://checkoutKit/./src/geography/country-state.ts","webpack://checkoutKit/./src/geography/country-reducer.ts","webpack://checkoutKit/./src/order/order-state.ts","webpack://checkoutKit/./src/order/order-reducer.ts","webpack://checkoutKit/./src/payment/payment-reducer.ts","webpack://checkoutKit/./src/payment/payment-method-state.ts","webpack://checkoutKit/./src/payment/payment-method-reducer.ts","webpack://checkoutKit/./src/common/utility/merge-or-push.ts","webpack://checkoutKit/./src/payment/payment-strategy-state.ts","webpack://checkoutKit/./src/payment/payment-strategy-reducer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-state.ts","webpack://checkoutKit/./src/payment/instrument/instrument-reducer.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-state.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-reducer.ts","webpack://checkoutKit/./src/shipping/consignment-state.ts","webpack://checkoutKit/./src/shipping/consignment-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-country-state.ts","webpack://checkoutKit/./src/shipping/shipping-country-reducer.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-state.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-reducer.ts","webpack://checkoutKit/./src/store-credit/store-credit-reducer.ts","webpack://checkoutKit/./src/checkout/checkout-state.ts","webpack://checkoutKit/./src/checkout/checkout-reducer.ts","webpack://checkoutKit/./src/common/utility/create-freeze-proxy.ts","webpack://checkoutKit/./src/form/form-selector.ts","webpack://checkoutKit/./src/address/is-address-equal.ts","webpack://checkoutKit/./src/shipping/consignment-selector.ts","webpack://checkoutKit/./src/store-credit/store-credit-state.ts","webpack://checkoutKit/./src/checkout/create-internal-checkout-selectors.ts","webpack://checkoutKit/./src/billing/billing-address-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-selector.ts","webpack://checkoutKit/./src/coupon/coupon-selector.ts","webpack://checkoutKit/./src/customer/customer-selector.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-selector.ts","webpack://checkoutKit/./src/shipping/shipping-address-selector.ts","webpack://checkoutKit/./src/payment/payment-selector.ts","webpack://checkoutKit/./src/cart/cart-selector.ts","webpack://checkoutKit/./src/config/config-selector.ts","webpack://checkoutKit/./src/geography/country-selector.ts","webpack://checkoutKit/./src/customer/customer-strategy-selector.ts","webpack://checkoutKit/./src/coupon/gift-certificate-selector.ts","webpack://checkoutKit/./src/payment/instrument/instrument-selector.ts","webpack://checkoutKit/./src/payment/payment-method-selector.ts","webpack://checkoutKit/./src/payment/payment-strategy-selector.ts","webpack://checkoutKit/./src/shipping/shipping-country-selector.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-selector.ts","webpack://checkoutKit/./src/checkout/checkout-selector.ts","webpack://checkoutKit/./src/order/order-selector.ts","webpack://checkoutKit/./src/store-credit/store-credit-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-store.ts","webpack://checkoutKit/./src/checkout/create-action-transformer.ts","webpack://checkoutKit/./src/common/error/create-request-error-factory.ts","webpack://checkoutKit/./src/checkout/create-checkout-store-reducer.ts","webpack://checkoutKit/./src/checkout/errors/checkout-not-available-error.ts","webpack://checkoutKit/./src/checkout/checkout-request-sender.ts","webpack://checkoutKit/./src/coupon/map-to-internal-coupon.ts","webpack://checkoutKit/./src/address/map-to-internal-address.ts","webpack://checkoutKit/./src/billing/is-billing-address-like.ts","webpack://checkoutKit/./src/common/selector/selector-decorator.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-error-selector.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-status-selector.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-selectors.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/checkout-button-method-type.ts","webpack://checkoutKit/./src/common/dom/is-element-id.ts","webpack://checkoutKit/./src/common/dom/set-unique-element-id.ts","webpack://checkoutKit/./src/checkout-buttons/checkout-button-strategy-action-creator.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/braintree/braintree-paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/googlepay/googlepay-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/masterpass/masterpass-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/strategies/paypal/paypal-button-strategy.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-initializer.ts","webpack://checkoutKit/./src/checkout-buttons/create-checkout-button-registry.ts","webpack://checkoutKit/./src/embedded-checkout/errors/not-embeddable-error.ts","webpack://checkoutKit/./src/common/storage/browser-storage.ts","webpack://checkoutKit/./src/embedded-checkout/errors/invalid-login-token-error.ts","webpack://checkoutKit/./src/embedded-checkout/embedded-checkout.ts","webpack://checkoutKit/./src/embedded-checkout/loading-indicator.ts","webpack://checkoutKit/./src/embedded-checkout/resizable-iframe-creator.ts","webpack://checkoutKit/./src/embedded-checkout/embed-checkout.ts","webpack://checkoutKit/external \"@bigcommerce/bigpay-client\"","webpack://checkoutKit/external \"messageformat\"","webpack://checkoutKit/./src/common/error/errors/timeout-error.ts","webpack://checkoutKit/./src/common/selector/create-selector.ts","webpack://checkoutKit/./src/common/http-request/join-includes.ts","webpack://checkoutKit/./src/config/config-action-creator.ts","webpack://checkoutKit/./src/config/config-request-sender.ts","webpack://checkoutKit/./src/billing/billing-address-action-creator.ts","webpack://checkoutKit/./src/billing/billing-address-request-sender.ts","webpack://checkoutKit/./src/common/registry/registry.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/errors/remote-checkout-synchronization-error.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-braintree-initializer.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-stripe-initializer.ts","webpack://checkoutKit/./src/customer/map-to-internal-customer.ts","webpack://checkoutKit/./src/coupon/map-to-internal-gift-certificate.ts","webpack://checkoutKit/./src/order/map-to-internal-order.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-script-loader.ts","webpack://checkoutKit/./src/common/error/error-action-creator.ts","webpack://checkoutKit/./src/common/utility/get-environment.ts","webpack://checkoutKit/./src/common/log/console-logger.ts","webpack://checkoutKit/./src/common/log/noop-logger.ts","webpack://checkoutKit/./src/common/log/get-default-logger.ts","webpack://checkoutKit/./src/common/log/create-logger.ts","webpack://checkoutKit/./src/coupon/coupon-action-creator.ts","webpack://checkoutKit/./src/coupon/coupon-request-sender.ts","webpack://checkoutKit/./src/coupon/gift-certificate-action-creator.ts","webpack://checkoutKit/./src/coupon/gift-certificate-request-sender.ts","webpack://checkoutKit/./src/customer/customer-strategy-action-creator.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-visacheckout-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/braintree/visacheckout-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-script-loader.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-request-sender.ts","webpack://checkoutKit/./src/remote-checkout/remote-checkout-action-creator.ts","webpack://checkoutKit/./src/customer/customer-action-creator.ts","webpack://checkoutKit/./src/customer/customer-request-sender.ts","webpack://checkoutKit/./src/common/error/errors/not-implemented-error.ts","webpack://checkoutKit/./src/customer/strategies/amazon/amazon-pay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/braintree/braintree-visacheckout-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/chasepay/chasepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/default/default-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/googlepay/googlepay-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/masterpass/masterpass-customer-strategy.ts","webpack://checkoutKit/./src/customer/strategies/square/square-customer-strategy.ts","webpack://checkoutKit/./src/geography/country-action-creator.ts","webpack://checkoutKit/./src/geography/country-request-sender.ts","webpack://checkoutKit/./src/order/order-request-sender.ts","webpack://checkoutKit/./src/order/order-action-creator.ts","webpack://checkoutKit/./src/common/dom/mutation-observer.ts","webpack://checkoutKit/./src/order/spam-protection/errors/spam-protection-failed-error.ts","webpack://checkoutKit/./src/order/spam-protection/errors/spam-protection-not-completed-error.ts","webpack://checkoutKit/./src/order/spam-protection/google-recaptcha.ts","webpack://checkoutKit/./src/order/spam-protection/google-recaptcha-script-loader.ts","webpack://checkoutKit/./src/order/spam-protection/spam-protection-action-creator.ts","webpack://checkoutKit/./src/order/errors/order-finalization-not-required-error.ts","webpack://checkoutKit/./src/payment/payment-strategy-type.ts","webpack://checkoutKit/./src/payment/payment-strategy-action-creator.ts","webpack://checkoutKit/./src/cart/cart-comparator.ts","webpack://checkoutKit/./src/cart/errors/cart-changed-error.ts","webpack://checkoutKit/./src/checkout/checkout-validator.ts","webpack://checkoutKit/./src/store-credit/store-credit-action-creator.ts","webpack://checkoutKit/./src/store-credit/store-credit-request-sender.ts","webpack://checkoutKit/./src/payment/payment-action-creator.ts","webpack://checkoutKit/./src/payment/payment-request-sender.ts","webpack://checkoutKit/./src/payment/is-vaulted-instrument.ts","webpack://checkoutKit/./src/payment/payment-request-transformer.ts","webpack://checkoutKit/./src/order/order-params.ts","webpack://checkoutKit/./src/payment/payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/errors/payment-argument-invalid-error.ts","webpack://checkoutKit/./src/payment/errors/payment-method-cancelled-error.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirm-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirmJs.ts","webpack://checkoutKit/./src/payment/strategies/affirm/affirm-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/afterpay/afterpay-script-loader.ts","webpack://checkoutKit/./src/address/is-internal-address-equal.ts","webpack://checkoutKit/./src/common/utility/omit-private.ts","webpack://checkoutKit/./src/address/map-from-internal-address.ts","webpack://checkoutKit/./src/payment/strategies/amazon-pay/amazon-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/overlay/overlay.ts","webpack://checkoutKit/./src/common/utility/cancellable-promise.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-payment-processor.ts","webpack://checkoutKit/./src/payment/is-credit-card-like.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-paypal-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay.ts","webpack://checkoutKit/./src/payment/strategies/braintree/is-braintree-error.ts","webpack://checkoutKit/./src/payment/strategies/braintree/braintree-visacheckout-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/chasepay/chasepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/cybersource/cardinal.ts","webpack://checkoutKit/./src/payment/strategies/converge/converge-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/credit-card/credit-card-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/cybersource/cybersource-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/cybersource/cardinal-client.ts","webpack://checkoutKit/./src/payment/strategies/square/square-form.ts","webpack://checkoutKit/./src/payment/strategies/cybersource/cardinal-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/klarna/klarna-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/legacy/legacy-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/masterpass/masterpass-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/no-payment/no-payment-data-required-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offline/offline-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/offsite/offsite-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-pro-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/paypal/paypal-express-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/sage-pay/sage-pay-payment-strategy.ts","webpack://checkoutKit/./src/common/error/errors/unsupported-browser-error.ts","webpack://checkoutKit/./src/payment/strategies/square/square-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/square/square-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/stripev3/stripev3-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/stripev3/stripev3-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-risk-client.ts","webpack://checkoutKit/./src/payment/strategies/wepay/wepay-payment-strategy.ts","webpack://checkoutKit/./src/payment/errors/payment-method-declined-error.ts","webpack://checkoutKit/./src/payment/strategies/zip/zip-payment-strategy.ts","webpack://checkoutKit/./src/payment/strategies/zip/zip-script-loader.ts","webpack://checkoutKit/./src/payment/create-payment-strategy-registry.ts","webpack://checkoutKit/./src/payment/strategies/braintree/create-braintree-payment-processor.ts","webpack://checkoutKit/./src/common/data-store/create-data-store-projection.ts","webpack://checkoutKit/./src/payment/instrument/instrument-action-creator.ts","webpack://checkoutKit/./src/common/date-time/add-minutes.ts","webpack://checkoutKit/./src/common/date-time/is-future.ts","webpack://checkoutKit/./src/payment/instrument/instrument-response-transformer.ts","webpack://checkoutKit/./src/payment/instrument/instrument-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-country-action-creator.ts","webpack://checkoutKit/./src/shipping/shipping-country-request-sender.ts","webpack://checkoutKit/./src/shipping/shipping-strategy-action-creator.ts","webpack://checkoutKit/./src/shipping/strategies/amazon/amazon-pay-shipping-strategy.ts","webpack://checkoutKit/./src/shipping/strategies/default/default-shipping-strategy.ts","webpack://checkoutKit/./src/common/utility/clone-result.ts","webpack://checkoutKit/./src/common/selector/create-shallow-equal-selector.ts","webpack://checkoutKit/./src/checkout/create-checkout-selectors.ts","webpack://checkoutKit/./src/checkout/checkout-store-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-error-selector.ts","webpack://checkoutKit/./src/checkout/checkout-store-status-selector.ts","webpack://checkoutKit/./src/common/error/error-message-transformer.ts","webpack://checkoutKit/./src/common/utility/to-single-line.ts","webpack://checkoutKit/./src/checkout/checkout-service.ts","webpack://checkoutKit/./src/checkout/create-checkout-service-error-transformer.ts","webpack://checkoutKit/./src/checkout/create-checkout-service.ts","webpack://checkoutKit/./src/order/spam-protection/create-spam-protection.ts","webpack://checkoutKit/./src/payment/create-payment-client.ts","webpack://checkoutKit/./src/customer/create-customer-strategy-registry.ts","webpack://checkoutKit/./src/shipping/create-shipping-strategy-registry.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/handle-frame-loaded-event.ts","webpack://checkoutKit/./src/common/error/errors/custom-error.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/iframe-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/noop-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/embedded-checkout/iframe-content/create-embedded-checkout-messenger.ts","webpack://checkoutKit/./src/locale/language-service.ts","webpack://checkoutKit/./src/locale/create-language-service.ts","webpack://checkoutKit/./src/currency/currency-formatter.ts","webpack://checkoutKit/./src/currency/currency-service.ts","webpack://checkoutKit/./src/currency/create-currency-service.ts","webpack://checkoutKit/./src/index.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-payment-processor.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/googlepay-script-loader.ts","webpack://checkoutKit/./src/payment/strategies/googlepay/create-googlepay-payment-processor.ts","webpack://checkoutKit/./src/cart/map-to-internal-cart.ts","webpack://checkoutKit/./src/promotion/map-to-discount-notifications.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","ConsignmentActionType","__webpack_exports__","CustomerStrategyActionType","PaymentStrategyActionType","MissingDataErrorType","MissingDataError","_super","subtype","_this","this","type","MissingBillingAddress","MissingCart","MissingConsignments","MissingCheckout","MissingCheckoutConfig","MissingOrderConfig","MissingOrder","MissingOrderId","MissingPayment","MissingPaymentMethod","MissingShippingAddress","MissingSpamProtectionToken","getErrorMessage","tslib__WEBPACK_IMPORTED_MODULE_0__","_standard_error__WEBPACK_IMPORTED_MODULE_1__","ShippingStrategyActionType","CheckoutActionType","standard_error_StandardError","StandardError","message","_newTarget","setPrototypeOf","__proto__","Error","captureStackTrace","stack","external_tslib_","CouponActionType","BillingAddressActionType","OrderActionType","PaymentMethodActionType","CheckoutButtonActionType","GiftCertificateActionType","InstrumentActionType","EmbeddedCheckoutEventType","RemoteCheckoutActionType","DEFAULT_RESPONSE","body","headers","status","RequestError","response","_a","_b","errors","_c","StoreCreditActionType","ConfigActionType","CountryActionType","ShippingCountryActionType","ACKNOWLEDGE","FINALIZE","ContentType","PaymentActionType","InvalidArgumentError","HOSTED","OFFLINE","isIframeEvent","isEqual","objectA","objectB","options","Array","isArray","length","index","length_1","isArrayEqual","Date","getTime","isDateEqual","RegExp","toString","isRegExpEqual","filter","keyFilter","keysA","keys","keysB","length_2","isObjectEqual","_common_url__WEBPACK_IMPORTED_MODULE_0__","IframeEventPoster","targetOrigin","_targetWindow","_targetOrigin","origin","post","event","window","postMessage","setTarget","CustomerActionType","SpamProtectionActionType","PaymentMethodInvalidError","withMemoizedCombiner","_utility_memoize__WEBPACK_IMPORTED_MODULE_0__","creator","args","_i","arguments","combiner","pop","apply","concat","combinerArgs","result","ErrorActionType","PaymentMethodActionCreator","_requestSender","loadPaymentMethods","rxjs__WEBPACK_IMPORTED_MODULE_2__","observer","next","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_1__","_payment_method_actions__WEBPACK_IMPORTED_MODULE_4__","LoadPaymentMethodsRequested","then","meta","deviceSessionId","sessionHash","LoadPaymentMethodsSucceeded","complete","catch","error","LoadPaymentMethodsFailed","loadPaymentMethod","methodId","LoadPaymentMethodRequested","undefined","LoadPaymentMethodSucceeded","LoadPaymentMethodFailed","_common_data_store__WEBPACK_IMPORTED_MODULE_3__","_common_http_request__WEBPACK_IMPORTED_MODULE_0__","_common_http_request__WEBPACK_IMPORTED_MODULE_1__","PaymentMethodRequestSender","timeout","Accept","JsonV1","X-API-INTERNAL","url","EmbeddedContentEventType","IframeEventListener","sourceOrigin","_sourceOrigin","_common_url__WEBPACK_IMPORTED_MODULE_1__","_isListening","_listeners","listen","addEventListener","_handleMessage","stopListen","removeEventListener","addListener","listener","listeners","push","removeListener","indexOf","splice","trigger","forEach","_is_iframe_event__WEBPACK_IMPORTED_MODULE_3__","data","_common_utility__WEBPACK_IMPORTED_MODULE_2__","mapToInternalLineItems","itemMap","decimalPlaces","idKey","reduce","map","item","amountTransformer","amount_transformer","id","imageUrl","amount","amountAfterDiscount","discount","integerAmount","toInteger","integerAmountAfterDiscount","integerDiscount","quantity","sender","recipient","attributes","variantId","mapGiftCertificateToInternalLineItem","map_to_internal_line_item","mapToInternalLineItemType","INTERNAL_USE_ONLY","isTerminalCacheKeyMap","cache_key_resolver_CacheKeyResolver","CacheKeyResolver","_lastId","_map","maps","_usedMaps","_options","maxSize","external_shallowequal_","onExpire","external_lodash_","getKey","_resolveMap","parentMap","cacheKey","usedCount","_generateMap","slice","_removeLeastUsedMap","getUsedCount","isMatched","mapIndex","unshift","parent","terminalMap","recentlyUsedMap","_removeMap","isRootCacheKeyMap","memoize","fn","shallowequal__WEBPACK_IMPORTED_MODULE_2__","cache","Map","resolver","_cache_key_resolver__WEBPACK_IMPORTED_MODULE_3__","delete","memoized","lodash__WEBPACK_IMPORTED_MODULE_1__","memoizeOne","CheckoutIncludes","_common_error_errors__WEBPACK_IMPORTED_MODULE_0__","BraintreeScriptLoader","_scriptLoader","_window","loadClient","loadScript","braintree","client","load3DS","threeDSecure","loadDataCollector","dataCollector","loadPaypal","paypal","loadPaypalCheckout","paypalCheckout","loadVisaCheckout","visaCheckout","loadGooglePayment","googlePayment","BraintreeSDKCreator","_braintreeScriptLoader","_dataCollectors","initialize","clientToken","_clientToken","getClient","_common_error_errors__WEBPACK_IMPORTED_MODULE_1__","PaymentNotInitialized","_client","authorization","getPaypal","_paypal","Promise","all","getPaypalCheckout","_paypalCheckout","get3DS","_3ds","getDataCollector","cached","kount","code","deviceData","teardown","resolve","getVisaCheckout","_visaCheckout","getGooglePaymentComponent","_googlePay","_teardown","default","mod","mapToInternalLineItem","_common_utility__WEBPACK_IMPORTED_MODULE_0__","extendedListPrice","extendedSalePrice","discountAmount","downloadsPageUrl","downloadPageUrl","brand","categoryNames","productId","option","addedByPromotion","NotInitializedErrorType","NotInitializedError","CustomerNotInitialized","ShippingNotInitialized","SpamProtectionNotInitialized","throwErrorAction","_bigcommerce_data_store__WEBPACK_IMPORTED_MODULE_0__","rxjs__WEBPACK_IMPORTED_MODULE_1__","action","payload","AmountTransformer","_decimalPlaces","Math","round","pow","parseUrl","_error_errors__WEBPACK_IMPORTED_MODULE_0__","test","anchor","document","createElement","href","hash","hostname","pathname","port","protocol","search","cachableActionDecorator","target","descriptor","memoizedMethods","WeakMap","decorateMethod","method","param","lastArg","useCache","instanceMethods","set","cache_key_resolver","external_rxjs_","pipe","operators_","store","bindDecorator","bindMethodDecorator","decoratedTarget","class_1","getOwnPropertyNames","getOwnPropertyDescriptor","bindClassDecorator","boundMethod","omitDeep","lodash__WEBPACK_IMPORTED_MODULE_0__","predicate","CheckoutActionCreator","_checkoutRequestSender","_configActionCreator","loadCheckout","_checkout_actions__WEBPACK_IMPORTED_MODULE_7__","LoadCheckoutRequested","loadConfig","LoadCheckoutSucceeded","rxjs_operators__WEBPACK_IMPORTED_MODULE_3__","_common_error__WEBPACK_IMPORTED_MODULE_4__","LoadCheckoutFailed","loadDefaultCheckout","state","getState","context","config","getContextConfig","checkoutId","_common_error_errors__WEBPACK_IMPORTED_MODULE_5__","sent","updateCheckout","checkout","getCheckout","_common_error_errors__WEBPACK_IMPORTED_MODULE_6__","UpdateCheckoutRequested","UpdateCheckoutSucceeded","UpdateCheckoutFailed","loadCurrentCheckout","ConsignmentActionCreator","_consignmentRequestSender","unassignItemsByAddress","consignment","_common_error_errors__WEBPACK_IMPORTED_MODULE_4__","existingConsignment","consignments","getConsignmentByAddress","shippingAddress","lineItems","_removeLineItems","cart","getCart","updateConsignment","deleteConsignment","assignItemsByAddress","_createOrUpdateConsignment","_addLineItems","selectShippingOption","getConsignments","consignmentUpdateBody","shippingOptionId","consignmentMeta","_consignment_actions__WEBPACK_IMPORTED_MODULE_6__","UpdateShippingOptionRequested","UpdateShippingOptionSucceeded","UpdateShippingOptionFailed","loadShippingOptions","LoadShippingOptionsRequested","params","include","_checkout_checkout_params__WEBPACK_IMPORTED_MODULE_3__","AvailableShippingOptions","LoadShippingOptionsSucceeded","LoadShippingOptionsFailed","updateAddress","address","_getConsignmentRequestBody","createConsignments","CreateConsignmentsRequested","CreateConsignmentsSucceeded","CreateConsignmentsFailed","UpdateConsignmentRequested","UpdateConsignmentSucceeded","UpdateConsignmentFailed","consignmentId","DeleteConsignmentRequested","DeleteConsignmentSucceeded","DeleteConsignmentFailed","updateShippingOption","_isUpdateConsignmentRequest","physicalItems","itemId","_hydrateLineItems","lineItemIds","existingItem","sharedItem","find","lineItem","request","DEFAULT_PARAMS","join","ConsignmentRequestSender","put","getCallbackUrl","location","mapToInternalShippingOption","isSelected","description","price","cost","selected","isRecommended","transitTime","isPrivate","UnrecoverableError","request_error","joinErrors","map_from_payment_error_response_joinErrors","RequestErrorFactory","_factoryMethods","register","detail","title","mapFromInternalErrorResponse","mapFromStorefrontErrorResponse","mapFromPaymentErrorResponse","timeout_error","factoryMethod","createError","_getType","_isStorefrontErrorResponseBody","_isInternalErrorResponseBody","internalType","split","errorResponse","storefrontErrorResponse","internalErrorResponse","clearErrorReducer","error_actions","ClearError","isClearErrorAction","omit_deep","replace","currentValue","newValue","is_equal","objectSet","DEFAULT_STATE","statuses","billingAddressReducer","data_store_","dataReducer","errorsReducer","statusesReducer","reducer","billing_address_actions","UpdateBillingAddressSucceeded","ContinueAsGuestSucceeded","checkout_actions","order_actions","LoadOrderSucceeded","billingAddress","UpdateBillingAddressRequested","UpdateBillingAddressFailed","ContinueAsGuestRequested","ContinueAsGuestFailed","isPlainObject","arrayReplace","currentArray","newArray","matchObject","a","b","sameAsCurrentCount","sameAsNewCount","countSameAsReplaced","replacedValue","newItem","currentItem","objectMerge","currentObject","newObject","cart_state_DEFAULT_STATE","cartReducer","cart_reducer_dataReducer","cart_reducer_errorsReducer","cart_reducer_statusesReducer","consignment_actions","coupon_actions","ApplyCouponSucceeded","RemoveCouponSucceeded","gift_certificate_actions","ApplyGiftCertificateSucceeded","RemoveGiftCertificateSucceeded","checkout_button_state_DEFAULT_STATE","DEFAULT_DATA_STATE","initializedContainers","DEFAULT_ERROR_STATE","DEFAULT_STATUS_STATE","checkoutButtonReducer","checkout_button_reducer_dataReducer","checkout_button_reducer_errorsReducer","checkout_button_reducer_statusesReducer","checkout_button_actions","InitializeButtonSucceeded","containerId","DeinitializeButtonSucceeded","InitializeButtonRequested","InitializeButtonFailed","DeinitializeButtonRequested","DeinitializeButtonFailed","config_state_DEFAULT_STATE","configReducer","config_reducer_dataReducer","config_reducer_errorsReducer","config_reducer_statusesReducer","config_actions","LoadConfigSucceeded","LoadConfigFailed","LoadConfigRequested","coupon_state_DEFAULT_STATE","couponReducer","coupon_reducer_dataReducer","coupon_reducer_errorsReducer","coupon_reducer_statusesReducer","coupons","ApplyCouponRequested","ApplyCouponFailed","RemoveCouponRequested","RemoveCouponFailed","gift_certificate_state_DEFAULT_STATE","giftCertificateReducer","gift_certificate_reducer_dataReducer","gift_certificate_reducer_errorsReducer","gift_certificate_reducer_statusesReducer","giftCertificates","ApplyGiftCertificateRequested","ApplyGiftCertificateFailed","RemoveGiftCertificateRequested","RemoveGiftCertificateFailed","customer_state_DEFAULT_STATE","customerReducer","customer_reducer_dataReducer","customer","customer_strategy_state_DEFAULT_STATE","customerStrategyReducer","customer_strategy_reducer_dataReducer","customer_strategy_reducer_errorsReducer","customer_strategy_reducer_statusesReducer","customer_strategy_actions","InitializeSucceeded","isInitialized","DeinitializeSucceeded","InitializeRequested","initializeError","initializeMethodId","InitializeFailed","DeinitializeRequested","deinitializeError","deinitializeMethodId","DeinitializeFailed","SignInRequested","SignInSucceeded","signInError","signInMethodId","SignInFailed","SignOutRequested","SignOutSucceeded","signOutError","signOutMethodId","SignOutFailed","WidgetInteractionStarted","WidgetInteractionFinished","widgetInteractionError","widgetInteractionMethodId","WidgetInteractionFailed","isInitializing","isDeinitializing","isSigningIn","isSigningOut","isWidgetInteracting","country_state_DEFAULT_STATE","countryReducer","country_reducer_dataReducer","country_reducer_errorsReducer","country_reducer_statusesReducer","country_actions","LoadCountriesSucceeded","LoadCountriesRequested","LoadCountriesFailed","order_state_DEFAULT_STATE","orderReducer","order_reducer_dataReducer","order_reducer_errorsReducer","metaReducer","order_reducer_statusesReducer","LoadOrderPaymentsSucceeded","FinalizeOrderSucceeded","SubmitOrderSucceeded","callbackUrl","order","orderToken","token","payment","spam_protection_actions","Completed","LoadOrderRequested","LoadOrderPaymentsRequested","LoadOrderFailed","LoadOrderPaymentsFailed","paymentReducer","payment_reducer_dataReducer","payment_actions","SubmitPaymentSucceeded","payment_method_state_DEFAULT_STATE","paymentMethodReducer","payment_method_reducer_dataReducer","payment_method_reducer_errorsReducer","payment_method_reducer_metaReducer","payment_method_reducer_statusesReducer","payment_method_actions","array","defaultPredicate","mergeOrPush","gateway","methodA","methodB","loadMethodId","loadMethodError","isLoadingMethod","payment_strategy_state_DEFAULT_STATE","paymentStrategyReducer","payment_strategy_reducer_dataReducer","payment_strategy_reducer_errorsReducer","payment_strategy_reducer_statusesReducer","payment_strategy_actions","ExecuteRequested","ExecuteSucceeded","executeError","executeMethodId","ExecuteFailed","FinalizeRequested","FinalizeSucceeded","finalizeError","finalizeMethodId","FinalizeFailed","isExecuting","isFinalizing","instrument_state_DEFAULT_STATE","instrumentReducer","instrument_reducer_dataReducer","instrument_reducer_errorsReducer","instrument_reducer_metaReducer","instrument_reducer_statusesReducer","instrument_actions","LoadInstrumentsSucceeded","vaultedInstruments","DeleteInstrumentSucceeded","instrument","bigpayToken","instrumentId","LoadInstrumentsRequested","DeleteInstrumentRequested","deleteError","failedInstrument","LoadInstrumentsFailed","DeleteInstrumentFailed","isDeleting","deletingInstrument","remote_checkout_state_DEFAULT_STATE","remoteCheckoutReducer","remote_checkout_reducer_dataReducer","remote_checkout_actions","InitializeRemoteBillingSucceeded","billing","InitializeRemoteShippingSucceeded","shipping","LoadRemoteSettingsSucceeded","UpdateRemoteCheckout","consignment_state_DEFAULT_STATE","updateShippingOptionError","updateError","isUpdating","isUpdatingShippingOption","consignmentReducer","consignment_reducer_dataReducer","consignment_reducer_errorsReducer","consignment_reducer_statusesReducer","customer_actions","SignOutCustomerSucceeded","_d","_e","_f","shipping_country_state_DEFAULT_STATE","shippingCountryReducer","shipping_country_reducer_dataReducer","shipping_country_reducer_errorsReducer","shipping_country_reducer_statusesReducer","shipping_country_actions","LoadShippingCountriesSucceeded","LoadShippingCountriesRequested","LoadShippingCountriesFailed","shipping_strategy_state_DEFAULT_STATE","shippingStrategyReducer","shipping_strategy_reducer_dataReducer","shipping_strategy_reducer_errorsReducer","shipping_strategy_reducer_statusesReducer","shipping_strategy_actions","UpdateAddressRequested","UpdateAddressSucceeded","updateAddressError","updateAddressMethodId","UpdateAddressFailed","SelectOptionRequested","SelectOptionSucceeded","selectOptionError","selectOptionMethodId","SelectOptionFailed","isUpdatingAddress","isSelectingOption","store_credit_reducer_DEFAULT_STATE","storeCreditReducer","store_credit_reducer_errorsReducer","store_credit_reducer_statusesReducer","store_credit_actions","ApplyStoreCreditRequested","ApplyStoreCreditSucceeded","ApplyStoreCreditFailed","checkout_state_DEFAULT_STATE","checkoutReducer","checkout_reducer_dataReducer","checkout_reducer_errorsReducer","checkout_reducer_statusesReducer","orderId","createFreezeProxy","trap","proxy","iteratee","getPrototypeOf","traversePrototypeOf","charAt","createProxy","createFormSelectorFactory","getShippingAddressFields","create_selector","countries","countryCode","selectedCountry","storeConfig","formFields","shippingAddressFields","field","processField","getBillingAddressFields","billingAddressFields","country","items","label","fieldType","itemtype","processCountry","subdivisions","required","processProvince","hasPostalCodes","Boolean","processsPostCode","normalize","firstName","lastName","company","address1","address2","city","stateOrProvince","postalCode","phone","customFields","createConsignmentSelectorFactory","getConsignmentById","addressA","addressB","getShippingOption","selectedShippingOption","getLoadError","loadError","getCreateError","getLoadShippingOptionsError","loadShippingOptionsError","getUnassignedItems","_","assignedLineItemIds","itemIds","getUpdateError","getDeleteError","getItemAssignmentError","getUpdateShippingOptionError","isLoading","isLoadingShippingOptions","isCreating","isAssigningItems","store_credit_state_DEFAULT_STATE","createInternalCheckoutSelectorsFactory","getBillingAddress","getContinueAsGuestError","isContinuingAsGuest","getInitializeError","getDeinitializeError","getCoupons","getRemoveError","getApplyError","isApplying","isRemoving","getCustomer","getShippingAddress","getInternalPayment","getGatewayPayment","getHostedPayment","getPaymentId","getPaymentStatus","getPaymentToken","getPaymentRedirectUrl","isPaymentDataRequired","isPaymentDataSubmitted","createBillingAddressSelector","continueAsGuestError","createCartSelector","createCartSelectorFactory","createCheckoutButtonSelector","createConfigSelector","getConfig","getStoreConfig","getExternalSource","externalSource","createConfigSelectorFactory","createCountrySelector","getCountries","createCountrySelectorFactory","createCouponSelector","removeCouponError","applyCouponError","isApplyingCoupon","isRemovingCoupon","createCustomerSelector","createCustomerStrategySelector","getSignInError","getSignOutError","getWidgetInteractionError","createCustomerStrategySelectorFactory","createGiftCertificateSelector","getGiftCertificates","removeGiftCertificateError","applyGiftCertificateError","isApplyingGiftCertificate","isRemovingGiftCertificate","createGiftCertificateSelectorFactory","createInstrumentSelector","getInstruments","instruments","getInstrumentsMeta","createInstrumentSelectorFactory","createFormSelector","createPaymentMethodSelector","getPaymentMethods","paymentMethods","getPaymentMethodsMeta","getPaymentMethod","gatewayId","getLoadMethodError","createPaymentMethodSelectorFactory","createPaymentStrategySelector","getExecuteError","getFinalizeError","getWidgetInteractingError","createPaymentStrategySelectorFactory","createRemoteCheckoutSelector","createShippingAddressSelector","createShippingCountrySelector","getShippingCountries","createShippingCountrySelectorFactory","createShippingStrategySelector","getUpdateAddressError","getSelectOptionError","createShippingStrategySelectorFactory","createConsignmentSelector","createCheckoutSelector","getOutstandingBalance","useStoreCredit","grandTotal","storeCredit","max","outstandingBalance","createCheckoutSelectorFactory","createOrderSelector","getOrder","getOrderMeta","createOrderSelectorFactory","createPaymentSelector","payments","providerId","providerType","payment_method_types","internalPayment","step","redirectUrl","paymentMethod","nonce","payment_status_types","createStoreCreditSelector","applyError","createStoreCreditSelectorFactory","checkoutButton","customerStrategies","form","paymentStrategies","remoteCheckout","shippingCountries","shippingStrategies","selectors","shouldWarnMutation","createCheckoutStore","initialState","requestErrorFactory","factory","actionTransformer","request_error_factory","unrecoverable_error","payment_method_invalid_error","action$","every","createInternalCheckoutSelectors","stateTransformer","CheckoutNotAvailableError","checkout_request_sender_CheckoutRequestSender","CheckoutRequestSender","content_type","join_includes","checkout_default_includes","checkout_not_available_error","mapToInternalCoupon","couponTypes","coupon","displayName","discountType","couponType","mapToInternalAddress","addressId","isBillingAddressLike","addressLine1","addressLine2","province","provinceCode","stateOrProvinceCode","postCode","selectorDecorator","memoizedMethod","bind_decorator","cachedValue","is_private","selectorMethodDecorator","checkout_button_error_selector","CheckoutButtonErrorSelector","_checkoutButton","getInitializeButtonError","getDeinitializeButtonError","checkout_button_status_selector","CheckoutButtonStatusSelector","isInitializingButton","isDeinitializingButton","createCheckoutButtonSelectors","CheckoutButtonMethodType","checkout_button_initializer","CheckoutButtonInitializer","_store","_buttonStrategyActionCreator","_state","subscribe","subscriber","filters","initializeButton","containerIds","selector","idPrefix","containers","querySelectorAll","invalid_argument_error","container","setUniqueElementId","queueId","dispatch","deinitializeButton","deinitialize","CheckoutButtonStrategyActionCreator","_registry","_paymentMethodActionCreator","throw_error_action","checkout_button_method_type","BraintreePaypalButtonStrategy","_checkoutActionCreator","_braintreeSDKCreator","_paypalScriptLoader","_formPoster","_offerCredit","paypalOptions","braintreepaypalcredit","braintreepaypal","_paymentMethod","missing_data_error","allowedSources","disallowedSources","allowCredit","FUNDING","CREDIT","Button","render","env","testMode","commit","shouldProcessPayment","funding","allowed","disallowed","style","shape","_setupPayment","onPaymentError","onAuthorize","_tokenizePayment","onAuthorizeError","onError","addresses","not_initialized_error","CheckoutButtonNotInitialized","createPayment","flow","enableShippingAddress","shippingAddressEditable","shippingAddressOverride","_mapToBraintreeAddress","currency","offerCredit","tokenizePayment","postForm","payment_type","provider","device_data","shipping_address","JSON","stringify","_mapToLegacyShippingAddress","billing_address","_mapToLegacyBillingAddress","details","recipientName","email","first_name","last_name","phone_number","address_line_1","line1","address_line_2","line2","country_code","postal_code","googlepay_button_strategy","GooglePayButtonStrategy","_googlePayPaymentProcessor","_methodId","_getMethodId","_walletButton","_createSignInButton","parentNode","removeChild","getElementById","googlePayButton","createButton","_handleWalletButtonClick","appendChild","preventDefault","displayWallet","paymentData","handleSuccess","updateShippingAddress","_onPaymentSelectComplete","_onError","Content-Type","masterpass_button_strategy","MasterpassButtonStrategy","_masterpassScriptLoader","initializationData","load","masterpass","_masterpassClient","_signInButton","buttonContainer","button","src","_createMasterpassPayload","allowedCardTypes","cartAmount","cartId","suppressShippingAddress","get_callback_url","PaypalButtonStrategy","_host","merchantId","clientId","actions","internal_api_headers","res","paymentID","payerID","paymentId","payerId","payerInfo","payer","payer_info","createCheckoutButtonInitializer","host","create_checkout_store","requestSender","request_sender_","formPoster","form_poster_","checkout_button_strategy_action_creator","registry","registry_registry","scriptLoader","script_loader_","checkoutActionCreator","checkout_action_creator","checkout_request_sender","config_action_creator","config_request_sender","BRAINTREE_PAYPAL","braintree_paypal_button_strategy","braintree_sdk_creator","braintree_script_loader","paypal_script_loader","BRAINTREE_PAYPAL_CREDIT","MASTERPASS","masterpass_script_loader","GOOGLEPAY_BRAINTREE","create_googlepay_payment_processor","googlepay_braintree_initializer","GOOGLEPAY_STRIPE","googlepay_stripe_initializer","PAYPALEXPRESS","paypal_button_strategy","createCheckoutButtonRegistry","payment_method_action_creator","payment_method_request_sender","NotEmbeddableErrorType","BrowserStorage","_namespace","getItem","rawValue","external_local_storage_fallback_default","withNamespace","parse","removeItem","getItemOnce","setItem","InvalidLoginTokenError","NotEmbeddableError","UnknownError","standard_error","embedded_checkout","EmbeddedCheckout","_iframeCreator","_messageListener","_messagePoster","_loadingIndicator","_storage","_location","_isAttached","onComplete","embedded_checkout_events","CheckoutComplete","CheckoutError","onLoad","CheckoutLoaded","onFrameLoad","FrameLoaded","onSignOut","SignedOut","_configureStyles","attach","show","_allowCookie","_attemptLogin","createFrame","iframe","_iframe","hide","_retryAllowCookie","FrameError","detach","iFrameResizer","close","contentWindow","styles","embedded_content_events","StyleConfigured","parse_url","reject","invalid_login_token_error","encodeURIComponent","visibility","not_embeddable_error","MissingContent","DEFAULT_STYLES","size","color","backgroundColor","ROTATION_ANIMATION","LoadingIndicator","_styles","_defineAnimation","_container","_buildContainer","_indicator","_buildIndicator","parentId","parent_1","opacity","handleTransitionEnd","display","bottom","left","height","width","position","right","top","transition","indicator","borderRadius","border","borderColor","margin","transform","transformStyle","animation","head","sheet","CSSStyleSheet","insertRule","ResizableIframeCreator","MissingContainer","allowPaymentRequest","_toResizableFrame","timeoutInterval","setTimeout","handleMessage","is_iframe_event","contentId","iframes","external_iframe_resizer_","scrolling","sizeWidth","heightCalculationMethod","clearTimeout","embedCheckout","STORAGE_PREFIX","resizable_iframe_creator","iframe_event_listener","iframe_event_poster","loading_indicator","loadingIndicator","browser_storage","TimeoutError","reselect__WEBPACK_IMPORTED_MODULE_0__","_with_memoized_combiner__WEBPACK_IMPORTED_MODULE_1__","joinIncludes","includes","ConfigActionCreator","_configRequestSender","_config_actions__WEBPACK_IMPORTED_MODULE_4__","ConfigRequestSender","BillingAddressActionCreator","continueAsGuest","credentials","_common_error_errors__WEBPACK_IMPORTED_MODULE_3__","isGuest","billingAddressRequestBody","existingBillingAddressRequestBody","_billing_address_actions__WEBPACK_IMPORTED_MODULE_5__","_createOrUpdateBillingAddress","createAddress","BillingAddressRequestSender","Registry","_factories","_instances","defaultToken","cacheToken","_getInstance","_hasFactory","_error_errors__WEBPACK_IMPORTED_MODULE_1__","_hasInstance","MasterpassScriptLoader","RemoteCheckoutSynchronizationError","GooglePayBraintreeInitializer","hasShippingAddress","googleBraintreePaymentInstance","_googlePaymentInstance","_createGooglePayPayload","parseResponse","paymentMethodData","tokenizationData","androidPayCards","cardType","lastFour","lastTwo","binData","platformToken","googlePayBraintreePaymentDataRequest","merchantInfo","authJwt","merchantName","googleMerchantName","googleMerchantId","transactionInfo","currencyCode","totalPriceStatus","totalPrice","toFixed","cardRequirements","billingAddressRequired","billingAddressFormat","shippingAddressRequired","emailRequired","phoneNumberRequired","_mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2","createPaymentDataRequest","googlePayBraintreeDataRequestV1","apiVersion","apiVersionMinor","allowedPaymentMethods","parameters","allowedAuthMethods","allowedCardNetworks","billingAddressParameters","format","tokenizationSpecification","braintree:apiVersion","braintree:authorizationFingerprint","paymentMethodTokenizationParameters","braintree:merchantId","braintree:sdkVersion","shippingAddressParameters","GooglePayStripeInitializer","_mapGooglePayStripeDataRequestToGooglePayDataRequestV2","card","last4","err","stripe:version","stripeVersion","stripe:publishableKey","stripePublishableKey","mapToInternalCustomer","_address__WEBPACK_IMPORTED_MODULE_0__","customerId","fullName","mapToInternalGiftCertificate","giftCertificate","discountedAmount","used","remainingBalance","remaining","balance","purchaseDate","mapToInternalOrder","_cart__WEBPACK_IMPORTED_MODULE_1__","_coupon__WEBPACK_IMPORTED_MODULE_3__","orderMeta","customerCanBeCreated","mapToInternalOrderPayment","subtotal","baseAmount","sum","discountNotifications","totalDiscountedAmount","appliedGiftCertificates","socialData","mapToInternalSocialDataList","hasDigitalItems","isDownloadable","isComplete","shippingCostTotal","amountBeforeDiscount","shippingCostBeforeDiscount","integerAmountBeforeDiscount","mapToStoreCredit","taxes","taxTotal","handling","handlingCostTotal","orderAmount","orderAmountAsInteger","mapToInternalPaymentStatus","isDefaultOrderPayment","helpText","instructions","returnUrl","socialDataObject","digitalItems","socialMedia","image","link","shareText","text","sharingLink","channelName","channel","channelCode","PaypalScriptLoader","ErrorActionCreator","clearError","getEnvironment","process","NODE_ENV","e","ConsoleLogger","_console","log","messages","_logToConsole","info","warn","debug","NoopLogger","isEnabled","logger","console_logger","console","noop_logger","getDefaultLogger","CouponActionCreator","_couponRequestSender","applyCoupon","removeCoupon","CouponRequestSender","couponCode","checkout_params","GiftCertificateActionCreator","_giftCertificateRequestSender","applyGiftCertificate","removeGiftCertificate","GiftCertificateRequestSender","giftCertificateCode","CustomerStrategyActionCreator","_strategyRegistry","signIn","signOut","widgetInteraction","AmazonPayScriptLoader","loadWidget","onPaymentReady","region","toLowerCase","_configureWidget","onLoginReady","amazon","Login","setClientId","setUseCookie","onAmazonLoginReady","OffAmazonPayments","onAmazonPaymentsReady","BraintreeVisaCheckoutPaymentProcessor","createInitOptions","settings","locale","collectShipping","paymentRequest","String","braintreeVisaCheckout","tokenize","tokenizedPayload","_toVisaCheckoutAddress","_postForm","userData","cardInformation","userEmail","card_information","_getCardInformation","_getAddress","phoneNumber","streetAddress","extendedAddress","locality","number","createBraintreeVisaCheckoutPaymentProcessor","braintreeScriptLoader","braintreeSDKCreator","braintree_visacheckout_payment_processor","VisaCheckoutScriptLoader","V","ChasePayScriptLoader","JPMC","RemoteCheckoutRequestSender","initializeBilling","methodName","initializeShipping","initializePayment","loadSettings","generateToken","trackAuthorizationEvent","RemoteCheckoutActionCreator","_remoteCheckoutRequestSender","InitializeRemoteBillingRequested","InitializeRemoteBillingFailed","InitializeRemoteShippingRequested","InitializeRemoteShippingFailed","InitializeRemotePaymentRequested","InitializeRemotePaymentSucceeded","InitializeRemotePaymentFailed","LoadRemoteSettingsRequested","LoadRemoteSettingsFailed","SignOutRemoteCustomerRequested","SignOutRemoteCustomerSucceeded","SignOutRemoteCustomerFailed","CustomerActionCreator","_customerRequestSender","signInCustomer","SignInCustomerRequested","SignInCustomerSucceeded","SignInCustomerFailed","signOutCustomer","SignOutCustomerRequested","SignOutCustomerFailed","CustomerRequestSender","NotImplementedError","AmazonPayCustomerStrategy","_remoteCheckoutActionCreator","amazonOptions","not_implemented_error","useAmazonAddressBook","_handleAuthorization","authorize","popup","scope","tokenPrefix","BraintreeVisaCheckoutCustomerStrategy","_customerStrategyActionCreator","_braintreeVisaCheckoutPaymentProcessor","_visaCheckoutScriptLoader","_buttonClassName","visaCheckoutOptions","braintreevisacheckout","initOptions","storeProfile","storeLanguage","signInButton","init","on","paymentSuccessPayload","_paymentInstrumentSelected","buttonClass","querySelector","_insertVisaCheckoutButton","visaCheckoutButton","className","innerHTML","ChasePayCustomerStrategy","_chasePayScriptLoader","chasePayOptions","chasepay","digitalSessionId","ChasePay","configure","language","isChasePayUp","insertButtons","EventType","START_CHECKOUT","sessionId","startCheckout","COMPLETE_CHECKOUT","requestId","merchantRequestId","_setExternalCheckoutData","_reloadPage","sessionToken","sendRequest","fromChasePay","DefaultCustomerStrategy","_customerActionCreator","googlepay_customer_strategy","GooglePayCustomerStrategy","googlePayOptions","_getGooglePayOptions","googlepaybraintree","googlepaystripe","MasterpassCustomerStrategy","masterpassOptions","Masterpass","SquareCustomerStrategy","CountryActionCreator","_countryRequestSender","loadCountries","CountryRequestSender","_config","Accept-Language","OrderRequestSender","loadOrder","submitOrder","finalizeOrder","OrderActionCreator","_orderRequestSender","_checkoutValidator","_spamProtectionActionCreator","loadOrderPayments","loadCurrentOrder","_getCurrentOrderId","SubmitOrderRequested","spamProtectionToken","checkoutSettings","isSpamProtectionEnabled","validate","_mapToOrderRequestBody","customerMessage","SubmitOrderFailed","FinalizeOrderRequested","FinalizeOrderFailed","executeSpamProtection","execute","MutationObserverFactory","callback","MutationObserver","SpamProtectionFailedError","SpamProtectionNotCompletedError","GoogleRecaptcha","googleRecaptchaScriptLoader","mutationObserverFactory","sitekey","event$","_event$","recaptcha","getResponse","error-callback","spam_protection_failed_error","_recaptcha","_watchRecaptchaChallengeWindow","iframeElement","iframeContainer","parentElement","spam_protection_not_completed_error","observe","attributeFilter","GoogleRecaptchaScriptLoader","_loadPromise","_loadScript","grecaptcha","SpamProtectionActionCreator","_googleRecaptcha","recaptchaSitekey","googleRecaptchaSitekey","SubmitFailed","PaymentStrategyType","OrderFinalizationNotRequiredError","payment_strategy_type","PaymentStrategyActionCreator","_orderActionCreator","strategy","getByMethod","NO_PAYMENT_DATA_REQUIRED","finalize","_loadOrderPaymentsIfNeeded","order_finalization_not_required_error","CartComparator","cartA","cartB","_normalize","sort","itemA","itemB","localeCompare","giftWrapping","CartChangedError","CheckoutValidator","comparator","cart_comparator","_compareCoupons","_compareGiftCertificates","cart_changed_error","couponsA","couponsB","giftCertificatesA","giftCertificatesB","StoreCreditActionCreator","_storeCreditRequestSender","applyStoreCredit","removeStoreCredit","StoreCreditRequestSender","PaymentActionCreator","_paymentRequestSender","_paymentRequestTransformer","submitPayment","SubmitPaymentRequested","SubmitPaymentFailed","initializeOffsitePayment","InitializeOffsitePaymentRequested","InitializeOffsitePaymentSucceeded","InitializeOffsitePaymentFailed","PaymentRequestSender","_transformResponse","statusText","isVaultedInstrument","OrderIncludes","PaymentRequestTransformer","checkoutState","_getPaymentMethod","shippingOption","contextConfig","instrumentMeta","paymentMeta","internalCustomer","map_to_internal_customer","authToken","vaultAccessToken","map_to_internal_address","map_to_internal_shipping_option","map_to_internal_cart","map_to_internal_order","quoteMeta","geoCountryCode","source","paymentMethodSelector","PaymentStrategyRegistry","_getToken","_hasFactoryForMethod","_isLegacyMethod","LEGACY","OFFSITE","CREDIT_CARD","clientSidePaymentProviders","paymentSettings","PaymentArgumentInvalidError","invalidFields","PaymentMethodCancelledError","AffirmPaymentStrategy","_paymentActionCreator","_affirmScriptLoader","publicKey","affirm","_affirm","payment_argument_invalid_error","requestOptions","PhysicalItemsCategories","DigitalItemsCategories","_getCheckoutInformation","open","onFail","failObject","reason","payment_method_cancelled_error","onSuccess","successObject","ui","paymentPayload","checkout_token","_getBillingAddress","merchant","user_confirmation_url","links","checkoutLink","user_cancel_url","user_confirmation_url_action","_getShippingAddress","_getItems","metadata","shipping_type","_getShippingType","platform_type","platform_version","platform_affirm","discounts","_getDiscounts","order_id","shipping_amount","tax_amount","total","first","last","full","zipcode","display_name","sku","unit_price","salePrice","qty","item_image_url","item_url","categories","_getCategories","customItems","_g","listPrice","line","discount_amount","discount_display_name","DISCOUNTED_AMOUNT","categoryTree","category","affirmJs","Function","AffirmScriptLoader","apikey","scriptURI","_getScriptURI","AfterpayPaymentStrategy","_storeCreditActionCreator","_afterpayScriptLoader","storeCountryName","storeCountry","_mapCountryToISO2","_afterpaySdk","_redirectToAfterpay","countryName","redirect","SCRIPTS_DEFAULT","SCRIPTS_US","AfterpayScriptLoader","AfterPay","isInternalAddressEqual","ignoredKeys","mapFromInternalAddress","AmazonPayPaymentStrategy","_billingAddressActionCreator","_walletOptions","_createWallet","referenceId","_getOrderReferenceId","sellerId","_getMerchantId","is3dsEnabled","_processPaymentWith3ds","onPaymentSelect","onReady","walletOptions","amazonOrderReferenceId","design","designMode","orderReference","_synchronizeBillingAddress","_updateOrderReference","widget","Widgets","Wallet","remote_checkout_synchronization_error","remoteAddress","internalBillingAddress","getAmazonOrderReferenceId","initConfirmationFlow","confirmationFlow","success","Overlay","_element","_createElement","_registerClick","remove","_unregisterClick","_removeAfterTransition","element","background","transitionDuration","zIndex","onClick","onClick_1","handeTransition","propertyName","promise","cancellable","cancel","race","BraintreePaymentProcessor","_overlay","_threeDSecureOptions","preloadPaypal","tokenizeCard","requestData","_mapToCreditCard","creditCards","focusWindow","useraction","verifyCard","addFrame","removeFrame","cancelVerifyCard","verification","cancellable_promise","appendSessionId","processedPayment","creditCard","cardholderName","ccName","ccNumber","cvv","ccCvv","expirationDate","ccExpiry","month","year","endpoint","isCreditCardLike","BraintreeCreditCardPaymentStrategy","_braintreePaymentProcessor","_is3dsEnabled","_handleError","orderRequest","_preparePaymentData","_isUsingVaulting","shouldSaveInstrument","tokenizedCard","ChasePayEventType","BraintreePaypalPaymentStrategy","_credit","braintreeOptions","isBraintreeError","BraintreeVisaCheckoutPaymentStrategy","_paymentStrategyActionCreator","visaInitOptions","CardinalInitializationType","CardinalEventType","CardinalValidatedAction","CardinalPaymentType","CardinalTriggerEvents","CardinalPaymentBrand","chasepay_payment_strategy","ChasePayPaymentStrategy","_wepayRiskClient","_walletEvent$","walletButton","_configureWallet","_chasePayClient","_getPayment","_displayWallet","_createOrder","logoContainer","insertBrandings","CancelCheckout","onCancel","CompleteCheckout","_setSessionToken","showLoadingAnimation","getRiskToken","riskToken","paymentCryptogram","cryptogramId","eci","transactionId","btoa","reqTokenId","expDate","substr","accountNum","accountMask","extraData","ConvergePaymentStrategy","three_ds_result","acs_url","PaReq","payer_auth_request","TermUrl","callback_url","MD","merchant_data","CreditCardPaymentStrategy","CyberSourcePaymentStrategy","_cardinalClient","_placeOrderUsing3DS","_placeOrder","runBinProcess","_getBinNumber","getClientToken","getThreeDSecureData","_getOrderData","entry","iin","CardinalSignatureValidationErrors","CardBrand","DigitalWalletType","CardinalClient","_sdk","_getClientSDK","SetupCompleted","off","Validated","ActionCode","ErrorNumber","setup","Init","jwt","binNumber","BinProcess","Status","threeDSecureData","orderData","continueObject","AcsUrl","Payload","partialOrder","_mapToPartialOrder","continue","CCA","consumer","BillingAddress","_mapToCardinalAddress","Account","_mapToCardinalAccount","Email1","ShippingAddress","Consumer","OrderDetails","OrderNumber","Amount","CurrencyCode","OrderChannel","TransactionId","AccountNumber","Number","ExpirationMonth","ExpirationYear","NameOnAccount","CardCode","cardinalAddress","FirstName","LastName","Address1","City","State","PostalCode","CountryCode","Address2","Phone1","CardinalScriptLoader","Cardinal","googlepay_payment_strategy","GooglePayPaymentStrategy","_googlePayOptions","statusCode","KlarnaPaymentStrategy","_klarnaScriptLoader","_supportedEUCountries","klarnaCredit","_klarnaCredit","_unsubscribe","_loadWidget","_authorize","authorizationToken","authorization_token","klarna","client_token","_getUpdateSessionData","_mapToKlarnaAddress","klarnaAddress","street_address","given_name","family_name","street_address2","updateSessionData","approved","show_form","KlarnaScriptLoader","Klarna","Credit","LegacyPaymentStrategy","masterpass_payment_strategy","MasterpassPaymentStrategy","NoPaymentDataRequiredPaymentStrategy","OfflinePaymentStrategy","OffsitePaymentStrategy","orderPayload","_shouldSubmitFullPayload","PaypalProPaymentStrategy","_isPaymentAcknowledged","PaypalExpressPaymentStrategy","_useRedirectFlow","paypalexpress","useRedirectFlow","_isInContextEnabled","_paypalSdk","environment","closeFlow","_isAcknowledgedOrFinalized","initXO","startFlow","SagePayPaymentStrategy","UnsupportedBrowserError","SquarePaymentStrategy","_syncPaymentMethod","createSquareForm","_paymentForm","_getFormOptions","build","_getNonceInstrument","_getCountryCode","toUpperCase","_deferredRequestNonce","requestCardNonce","deferred","squareOptions","square","_squareOptions","callbacks","cardNonceResponseReceived","cardData","billingContact","shippingContact","digital_wallet_type","none","_handleWalletNonceResponse","_handleCardNonceResponse","createPaymentRequest","_paymentRequestPayload","methodsSupported","methods","_showPaymentMethods","paymentFormLoaded","_setPostalCode","unsupportedBrowserDetected","unsupported_browser_error","requestShippingAddress","requestBillingInfo","storeName","pending","setPostalCode","masterpassBtn","elementId","SquareScriptLoader","SqPaymentForm","StripeV3PaymentStrategy","_stripeScriptLoader","stripeOptions","stripev3","stripeJs","_stripeV3Client","cardElement","elements","mount","_cardElement","paymentIntent","_getStripeJs","createPaymentMethod","_mapStripePaymentMethodOptions","stripePaymentMethod","stripeCardPaymentOptions","_mapStripeCardPaymentOptions","payment_method","handleCardPayment","stripeResponse","unmount","_mapStripeBillingAddress","_mapStripeShippingAddress","_mapStripeBillingDetails","stripeBillingDetails","_mapStripeShippingDetails","stripeShippingDetails","_getCustomer","shippingDetails","receipt_email","save_payment_method","billing_details","StripeV3ScriptLoader","publishableKey","Stripe","betas","WepayRiskClient","_riskClient","WePay","risk","generate_risk_token","get_risk_token","WepayPaymentStrategy","orderActionCreator","paymentActionCreator","payloadWithToken","credit_card_payment_strategy","PaymentMethodDeclinedError","ZipPaymentStrategy","_zipScriptLoader","zip","_zipClient","zipClient","Checkout","_prepareForReferredRegistration","payment_method_declined_error","onCheckout","openModal","externalId","ZipScriptLoader","Zip","createPaymentStrategyRegistry","paymentClient","spamProtection","payment_strategy_registry","paymentRequestTransformer","payment_request_transformer","paymentRequestSender","payment_request_sender","billingAddressActionCreator","billing_address_action_creator","billing_address_request_sender","braintreePaymentProcessor","overlay","overlay_overlay","braintree_payment_processor","createBraintreePaymentProcessor","checkoutRequestSender","checkoutValidator","checkout_validator","spamProtectionActionCreator","spam_protection_action_creator","order_action_creator","order_request_sender","storeCreditActionCreator","store_credit_action_creator","store_credit_request_sender","payment_action_creator","paymentMethodActionCreator","remoteCheckoutActionCreator","remote_checkout_action_creator","remote_checkout_request_sender","configActionCreator","paymentStrategyActionCreator","payment_strategy_action_creator","AFFIRM","affirm_payment_strategy","affirm_script_loader","AFTERPAY","afterpay_payment_strategy","afterpay_script_loader","AMAZON","amazon_pay_payment_strategy","amazon_pay_script_loader","CYBERSOURCE","cybersource_payment_strategy","cardinal_client","cardinal_script_loader","KLARNA","klarna_payment_strategy","klarna_script_loader","legacy_payment_strategy","offline_payment_strategy","offsite_payment_strategy","PAYPAL","paypal_pro_payment_strategy","PAYPAL_EXPRESS","paypal_express_payment_strategy","PAYPAL_EXPRESS_CREDIT","SAGE_PAY","sage_pay_payment_strategy","SQUARE","square_payment_strategy","square_script_loader","no_payment_data_required_strategy","BRAINTREE","braintree_credit_card_payment_strategy","braintree_paypal_payment_strategy","BRAINTREE_VISA_CHECKOUT","braintree_visacheckout_payment_strategy","visacheckout_script_loader","CHASE_PAY","chasepay_script_loader","wepay_risk_client","BRAINTREE_GOOGLE_PAY","WE_PAY","wepay_payment_strategy","STRIPE_GOOGLE_PAY","ZIP","zip_payment_strategy","zip_script_loader","CONVERGE","converge_payment_strategy","STRIPEV3","stripev3_payment_strategy","stripev3_script_loader","ProjectionActionType","InstrumentActionCreator","_instrumentRequestSender","loadInstruments","session","_getSessionContext","_getCurrentAccessToken","_getValidAccessToken","currentToken","deleteInstrument","_isValidVaultAccessToken","date","newDate","valueOf","now","isFuture","vaultAccessExpiry","setMinutes","getMinutes","getVaultAccessToken","storeId","shopperCurrency","isTransactional","InstrumentResponseTransformer","transformResponse","_transformVaultedInstruments","vaulted_instruments","transformErrorResponse","transformVaultAccessResponse","expires_at","bigpay_token","defaultInstrument","default_instrument","last_4","expiryMonth","expiry_month","expiryYear","expiry_year","trustedShippingAddress","trusted_shipping_address","InstrumentRequestSender","_transformer","instrument_response_transformer","requestContext","_loadInstrumentsWithAddress","_loadInstruments","deleteShopperInstrument","loadInstrumentsWithAddress","ShippingCountryActionCreator","_shippingCountryRequestSender","ShippingCountryRequestSender","ShippingStrategyActionCreator","selectOption","mergedOptions","AmazonPayShippingStrategy","_consignmentActionCreator","_createAddressBook","optionId","onAddressSelect","AddressBook","_synchronizeShippingAddress","DefaultShippingStrategy","memoizedCloneDeep","cloneResult","createShallowEqualSelector","external_reselect_","create_shallow_equal_selector","with_memoized_combiner","createCheckoutSelectorsFactory","getShippingOptions","getSelectedShippingOption","getBillingCountries","getSelectedPaymentMethod","getError","getSelectShippingOptionError","isPending","isSelectingShippingOption","isCustomerStepPending","isPaymentStepPending","createCheckoutStoreSelector","availableShippingOptions","createCheckoutStoreErrorSelector","getLoadCheckoutError","getUpdateCheckoutError","getSubmitOrderError","getFinalizeOrderError","getLoadOrderError","getLoadCartError","getLoadBillingCountriesError","getLoadShippingCountriesError","getLoadPaymentMethodsError","getLoadPaymentMethodError","getInitializePaymentError","getInitializeCustomerError","getUpdateBillingAddressError","getUpdateShippingAddressError","getDeleteConsignmentError","getUpdateConsignmentError","getCreateConsignmentsError","getInitializeShippingError","getApplyStoreCreditError","getApplyCouponError","getRemoveCouponError","getApplyGiftCertificateError","getRemoveGiftCertificateError","getLoadInstrumentsError","getDeleteInstrumentError","getLoadConfigError","createCheckoutStoreStatusSelector","some","isLoadingCheckout","isUpdatingCheckout","isSubmittingOrder","isFinalizingOrder","isLoadingOrder","isLoadingCart","isLoadingBillingCountries","isLoadingShippingCountries","isLoadingPaymentMethods","isLoadingPaymentMethod","isInitializingPayment","isInitializingCustomer","isUpdatingBillingAddress","isUpdatingShippingAddress","isUpdatingConsignment","isDeletingConsignment","isCreatingConsignments","isInitializingShipping","isApplyingStoreCredit","isLoadingInstruments","isDeletingInstrument","isLoadingConfig","ErrorMessageTransformer","_messageCustomizer","input","trim","checkout_service","CheckoutService","_countryActionCreator","_couponActionCreator","_errorActionCreator","_giftCertificateActionCreator","_instrumentActionCreator","_shippingCountryActionCreator","_shippingStrategyActionCreator","isDevelopment","projection","_errorTransformer","error_message_transformer","isCheckoutServiceError","_selectorsFactory","_storeProjection","Synchronize","initial","notifyState","_dispatch","loadCheckoutAction","loadConfigAction","finalizeOrderIfNeeded","deinitializePayment","loadBillingCountries","loadShippingCountries","loadBillingAddressFields","loadShippingAddressFields","initializeCustomer","deinitializeCustomer","deinitializeShipping","assignItemsToAddress","unassignItemsToAddress","selectConsignmentShippingOption","updateBillingAddress","initializeSpamProtection","createCheckoutService","bigpay_client_","setHost","bigpayBaseUrl","createPaymentClient","orderRequestSender","google_recaptcha","google_recaptcha_script_loader","consignment_action_creator","consignment_request_sender","country_action_creator","country_request_sender","coupon_action_creator","coupon_request_sender","customer_strategy_action_creator","remoteCheckoutRequestSender","amazon_pay_customer_strategy","braintree_visacheckout_customer_strategy","chasepay_customer_strategy","square_customer_strategy","masterpass_customer_strategy","default_customer_strategy","customer_action_creator","customer_request_sender","createCustomerStrategyRegistry","error_action_creator","gift_certificate_action_creator","gift_certificate_request_sender","instrument_action_creator","instrument_request_sender","shipping_country_action_creator","shipping_country_request_sender","shipping_strategy_action_creator","consignmentRequestSender","consignmentActionCreator","amazon_pay_shipping_strategy","default_shipping_strategy","createShippingStrategyRegistry","handleFrameLoadedEvent","hasAttribute","setAttribute","isCustomError","iframe_embedded_checkout_messenger","IframeEmbeddedCheckoutMessenger","_untargetedMessagePoster","_messageHandlers","postComplete","_postMessage","postError","_transformError","postFrameError","untargeted","postFrameLoaded","postLoaded","postSignedOut","receiveStyles","handler","_notifyMessageHandlers","noop_embedded_checkout_messenger","NoopEmbeddedCheckoutMessenger","createEmbeddedCheckoutMessenger","parentWindow","parentOrigin","language_service","LanguageService","_logger","_transformConfig","locales","translations","_locale","_locales","_translations","_formatters","mapKeys","translationKey","KEY_PREFIX","getLocale","_hasTranslations","translate","prefixedKey","messageFormat","external_messageformat_","compile","_transformData","output","defaultTranslations","_flattenObject","parentKey","resultKey","createLanguageService","CurrencyFormatter","currencySettings","symbolLocation","symbol","thousandsSeparator","decimalSeparator","parseInt","_symbolLocation","_symbol","_thousandsSeparator","_decimalSeparator","formattedNumber","_formatNumber","formattedCurrency","_formatCurrency","positiveAmount","abs","_toFixed","decimalAmount","parsedIntegerAmount","precision","currency_service","CurrencyService","_storeConfig","_customerFormatter","currency_formatter","_storeFormatter","toCustomerCurrency","exchangeRate","toStoreCurrency","createCurrencyService","create_checkout_button_initializer","embed_checkout","ButtonType","ButtonColor","GooglePayPaymentProcessor","_googlePayScriptLoader","_googlePayInitializer","_consigmentActionCreator","buttonType","buttonColor","Short","Default","_googlePayClient","loadPaymentData","_getPaymentDataRequest","_updateBillingAddress","_mapGooglePayAddressToShippingAddress","googlePay","paymentDataRequest","_getGooglePayClient","_paymentDataRequest","isReadyToPay","google","api","PaymentsClient","_mapGooglePayAddressToBillingAddress","companyName","address3","administrativeArea","postPaymentData","remoteBillingAddress","googlePayAddressMapped","GooglePayScriptLoader","createGooglePayPaymentProcessor","initializer","googlepay_payment_processor","googlepay_script_loader","mapToInternalCart","promotions","notifications","map_to_internal_line_items","map_to_internal_coupon","promotion","banners","banner","placeholders","messageHtml","certificate","map_to_internal_gift_certificate","isShippingRequired","taxSubtotal"],"mappings":"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","file":"checkout-sdk.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 145);\n","module.exports = require(\"tslib\");","module.exports = require(\"@bigcommerce/data-store\");","module.exports = require(\"lodash\");","module.exports = require(\"rxjs\");","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nimport { ConsignmentMeta } from './consignment';\n\nexport enum ConsignmentActionType {\n    CreateConsignmentsRequested = 'CREATE_CONSIGNMENTS_REQUESTED',\n    CreateConsignmentsSucceeded = 'CREATE_CONSIGNMENTS_SUCCEEDED',\n    CreateConsignmentsFailed = 'CREATE_CONSIGNMENTS_FAILED',\n\n    UpdateConsignmentRequested = 'UPDATE_CONSIGNMENT_REQUESTED',\n    UpdateConsignmentSucceeded = 'UPDATE_CONSIGNMENT_SUCCEEDED',\n    UpdateConsignmentFailed = 'UPDATE_CONSIGNMENT_FAILED',\n\n    DeleteConsignmentRequested = 'DELETE_CONSIGNMENT_REQUESTED',\n    DeleteConsignmentSucceeded = 'DELETE_CONSIGNMENT_SUCCEEDED',\n    DeleteConsignmentFailed = 'DELETE_CONSIGNMENT_FAILED',\n\n    UpdateShippingOptionRequested = 'UPDATE_SHIPPING_OPTION_REQUESTED',\n    UpdateShippingOptionSucceeded = 'UPDATE_SHIPPING_OPTION_SUCCEEDED',\n    UpdateShippingOptionFailed = 'UPDATE_SHIPPING_OPTION_FAILED',\n\n    LoadShippingOptionsRequested = 'LOAD_SHIPPING_OPTIONS_REQUESTED',\n    LoadShippingOptionsSucceeded = 'LOAD_SHIPPING_OPTIONS_SUCCEEDED',\n    LoadShippingOptionsFailed = 'LOAD_SHIPPING_OPTIONS_FAILED',\n}\n\nexport type ConsignmentAction =\n    CreateConsignmentsAction |\n    UpdateConsignmentAction |\n    DeleteConsignmentAction |\n    UpdateShippingOptionAction |\n    LoadShippingOptionsAction;\n\nexport type CreateConsignmentsAction =\n    CreateConsignmentsRequestedAction |\n    CreateConsignmentsSucceededAction |\n    CreateConsignmentsFailedAction;\n\nexport type UpdateConsignmentAction =\n    UpdateConsignmentRequestedAction |\n    UpdateConsignmentSucceededAction |\n    UpdateConsignmentFailedAction;\n\nexport type DeleteConsignmentAction =\n    DeleteConsignmentRequestedAction |\n    DeleteConsignmentSucceededAction |\n    DeleteConsignmentFailedAction;\n\nexport type UpdateShippingOptionAction =\n    UpdateShippingOptionRequestedAction |\n    UpdateShippingOptionSucceededAction |\n    UpdateShippingOptionFailedAction;\n\nexport type LoadShippingOptionsAction =\n    LoadShippingOptionsRequestedAction |\n    LoadShippingOptionsSucceededAction |\n    LoadShippingOptionsFailedAction;\n\nexport interface CreateConsignmentsRequestedAction extends Action {\n    type: ConsignmentActionType.CreateConsignmentsRequested;\n}\n\nexport interface CreateConsignmentsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.CreateConsignmentsSucceeded;\n}\n\nexport interface CreateConsignmentsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.CreateConsignmentsFailed;\n}\n\nexport interface UpdateConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentRequested;\n}\n\nexport interface UpdateConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentSucceeded;\n}\n\nexport interface UpdateConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateConsignmentFailed;\n}\n\nexport interface DeleteConsignmentRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentRequested;\n}\n\nexport interface DeleteConsignmentSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentSucceeded;\n}\n\nexport interface DeleteConsignmentFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.DeleteConsignmentFailed;\n}\n\nexport interface UpdateShippingOptionRequestedAction extends Action<null, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionRequested;\n}\n\nexport interface UpdateShippingOptionSucceededAction extends Action<Checkout, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionSucceeded;\n}\n\nexport interface UpdateShippingOptionFailedAction extends Action<Error, ConsignmentMeta> {\n    type: ConsignmentActionType.UpdateShippingOptionFailed;\n}\n\nexport interface LoadShippingOptionsRequestedAction extends Action {\n    type: ConsignmentActionType.LoadShippingOptionsRequested;\n}\n\nexport interface LoadShippingOptionsSucceededAction extends Action<Checkout> {\n    type: ConsignmentActionType.LoadShippingOptionsSucceeded;\n}\n\nexport interface LoadShippingOptionsFailedAction extends Action<Error> {\n    type: ConsignmentActionType.LoadShippingOptionsFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum CustomerStrategyActionType {\n    SignInFailed = 'CUSTOMER_STRATEGY_SIGN_IN_FAILED',\n    SignInRequested = 'CUSTOMER_STRATEGY_SIGN_IN_REQUESTED',\n    SignInSucceeded = 'CUSTOMER_STRATEGY_SIGN_IN_SUCCEEDED',\n    SignOutFailed = 'CUSTOMER_STRATEGY_SIGN_OUT_FAILED',\n    SignOutRequested = 'CUSTOMER_STRATEGY_SIGN_OUT_REQUESTED',\n    SignOutSucceeded = 'CUSTOMER_STRATEGY_SIGN_OUT_SUCCEEDED',\n    InitializeFailed = 'CUSTOMER_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'CUSTOMER_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'CUSTOMER_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'CUSTOMER_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'CUSTOMER_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'CUSTOMER_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'CUSTOMER_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type CustomerStrategyAction =\n    CustomerStrategySignInAction |\n    CustomerStrategySignOutAction |\n    CustomerStrategyInitializeAction |\n    CustomerStrategyDeinitializeAction |\n    CustomerStrategyWidgetAction;\n\nexport type CustomerStrategySignInAction =\n    SignInRequestedAction |\n    SignInSucceededAction |\n    SignInFailedAction;\n\nexport type CustomerStrategySignOutAction =\n    SignOutRequestedAction |\n    SignOutSucceededAction |\n    SignOutFailedAction;\n\nexport type CustomerStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type CustomerStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type CustomerStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface SignInRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignInRequested;\n}\n\nexport interface SignInSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignInSucceeded;\n}\n\nexport interface SignInFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignInFailed;\n}\n\nexport interface SignOutRequestedAction extends Action {\n    type: CustomerStrategyActionType.SignOutRequested;\n}\n\nexport interface SignOutSucceededAction extends Action {\n    type: CustomerStrategyActionType.SignOutSucceeded;\n}\n\nexport interface SignOutFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.SignOutFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: CustomerStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: CustomerStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: CustomerStrategyActionType.WidgetInteractionFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderPaymentsAction } from '../order';\n\nexport enum PaymentStrategyActionType {\n    ExecuteFailed = 'PAYMENT_STRATEGY_EXECUTE_FAILED',\n    ExecuteRequested = 'PAYMENT_STRATEGY_EXECUTE_REQUESTED',\n    ExecuteSucceeded = 'PAYMENT_STRATEGY_EXECUTE_SUCCEEDED',\n    FinalizeFailed = 'PAYMENT_STRATEGY_FINALIZE_FAILED',\n    FinalizeRequested = 'PAYMENT_STRATEGY_FINALIZE_REQUESTED',\n    FinalizeSucceeded = 'PAYMENT_STRATEGY_FINALIZE_SUCCEEDED',\n    InitializeFailed = 'PAYMENT_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'PAYMENT_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'PAYMENT_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'PAYMENT_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'PAYMENT_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'PAYMENT_STRATEGY_DEINITIALIZE_SUCCEEDED',\n    WidgetInteractionStarted = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_STARTED',\n    WidgetInteractionFinished = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FINISHED',\n    WidgetInteractionFailed = 'PAYMENT_STRATEGY_WIDGET_INTERACTION_FAILED',\n}\n\nexport type PaymentStrategyAction =\n    PaymentStrategyExecuteAction |\n    PaymentStrategyFinalizeAction |\n    PaymentStrategyInitializeAction |\n    PaymentStrategyDeinitializeAction |\n    PaymentStrategyWidgetAction;\n\nexport type PaymentStrategyExecuteAction =\n    ExecuteRequestedAction |\n    ExecuteSucceededAction |\n    ExecuteFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyFinalizeAction =\n    FinalizeRequestedAction |\n    FinalizeSucceededAction |\n    FinalizeFailedAction |\n    LoadOrderPaymentsAction;\n\nexport type PaymentStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type PaymentStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport type PaymentStrategyWidgetAction =\n    WidgetInteractionStartedAction |\n    WidgetInteractionFinishedAction |\n    WidgetInteractionFailedAction;\n\nexport interface ExecuteRequestedAction extends Action {\n    type: PaymentStrategyActionType.ExecuteRequested;\n}\n\nexport interface ExecuteSucceededAction extends Action {\n    type: PaymentStrategyActionType.ExecuteSucceeded;\n}\n\nexport interface ExecuteFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.ExecuteFailed;\n}\n\nexport interface FinalizeRequestedAction extends Action {\n    type: PaymentStrategyActionType.FinalizeRequested;\n}\n\nexport interface FinalizeSucceededAction extends Action {\n    type: PaymentStrategyActionType.FinalizeSucceeded;\n}\n\nexport interface FinalizeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.FinalizeFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: PaymentStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.DeinitializeFailed;\n}\n\nexport interface WidgetInteractionStartedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionStarted;\n}\n\nexport interface WidgetInteractionFinishedAction extends Action {\n    type: PaymentStrategyActionType.WidgetInteractionFinished;\n}\n\nexport interface WidgetInteractionFailedAction extends Action<Error> {\n    type: PaymentStrategyActionType.WidgetInteractionFailed;\n}\n","import StandardError from './standard-error';\n\nexport enum MissingDataErrorType {\n    MissingBillingAddress,\n    MissingCart,\n    MissingCheckout,\n    MissingConsignments,\n    MissingCheckoutConfig,\n    MissingOrder,\n    MissingOrderConfig,\n    MissingOrderId,\n    MissingPayment,\n    MissingPaymentMethod,\n    MissingShippingAddress,\n    MissingSpamProtectionToken,\n}\n\nexport default class MissingDataError extends StandardError {\n    constructor(\n        public subtype: MissingDataErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'MissingDataError';\n        this.type = 'missing_data';\n    }\n}\n\nfunction getErrorMessage(type: MissingDataErrorType): string {\n    switch (type) {\n    case MissingDataErrorType.MissingBillingAddress:\n        return 'Unable to proceed because billing address data is unavailable.';\n\n    case MissingDataErrorType.MissingCart:\n        return 'Unable to proceed because cart data is unavailable.';\n\n    case MissingDataErrorType.MissingConsignments:\n        return 'Unable to proceed because consignments data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckout:\n        return 'Unable to proceed because checkout data is unavailable.';\n\n    case MissingDataErrorType.MissingCheckoutConfig:\n    case MissingDataErrorType.MissingOrderConfig:\n        return 'Unable to proceed because configuration data is unavailable.';\n\n    case MissingDataErrorType.MissingOrder:\n        return 'Unable to proceed because order data is unavailable.';\n\n    case MissingDataErrorType.MissingOrderId:\n        return 'Unable to proceed because order ID is unavailable or not generated yet.';\n\n    case MissingDataErrorType.MissingPayment:\n        return 'Unable to proceed because payment data is unavailable.';\n\n    case MissingDataErrorType.MissingPaymentMethod:\n        return 'Unable to proceed because payment method data is unavailable or not properly configured.';\n\n    case MissingDataErrorType.MissingShippingAddress:\n        return 'Unable to proceed because shipping address data is unavailable.';\n\n    case MissingDataErrorType.MissingSpamProtectionToken:\n        return 'Unable to proceed because spam protection token is not provided.';\n\n    default:\n        return 'Unable to proceed because the required data is unavailable.';\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ShippingStrategyActionType {\n    UpdateAddressFailed = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_FAILED',\n    UpdateAddressRequested = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_REQUESTED',\n    UpdateAddressSucceeded = 'SHIPPING_STRATEGY_UPDATE_ADDRESS_SUCCEEDED',\n    SelectOptionFailed = 'SHIPPING_STRATEGY_SELECT_OPTION_FAILED',\n    SelectOptionRequested = 'SHIPPING_STRATEGY_SELECT_OPTION_REQUESTED',\n    SelectOptionSucceeded = 'SHIPPING_STRATEGY_SELECT_OPTION_SUCCEEDED',\n    InitializeFailed = 'SHIPPING_STRATEGY_INITIALIZE_FAILED',\n    InitializeRequested = 'SHIPPING_STRATEGY_INITIALIZE_REQUESTED',\n    InitializeSucceeded = 'SHIPPING_STRATEGY_INITIALIZE_SUCCEEDED',\n    DeinitializeFailed = 'SHIPPING_STRATEGY_DEINITIALIZE_FAILED',\n    DeinitializeRequested = 'SHIPPING_STRATEGY_DEINITIALIZE_REQUESTED',\n    DeinitializeSucceeded = 'SHIPPING_STRATEGY_DEINITIALIZE_SUCCEEDED',\n}\n\nexport type ShippingStrategyAction =\n    ShippingStrategyUpdateAddressAction |\n    ShippingStrategySelectOptionAction |\n    ShippingStrategyInitializeAction |\n    ShippingStrategyDeinitializeAction;\n\nexport type ShippingStrategyUpdateAddressAction =\n    UpdateAddressRequestedAction |\n    UpdateAddressSucceededAction |\n    UpdateAddressFailedAction;\n\nexport type ShippingStrategySelectOptionAction =\n    SelectOptionRequestedAction |\n    SelectOptionSucceededAction |\n    SelectOptionFailedAction;\n\nexport type ShippingStrategyInitializeAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction;\n\nexport type ShippingStrategyDeinitializeAction =\n    DeinitializeRequestedAction |\n    DeinitializeSucceededAction |\n    DeinitializeFailedAction;\n\nexport interface UpdateAddressRequestedAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressRequested;\n}\n\nexport interface UpdateAddressSucceededAction extends Action {\n    type: ShippingStrategyActionType.UpdateAddressSucceeded;\n}\n\nexport interface UpdateAddressFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.UpdateAddressFailed;\n}\n\nexport interface SelectOptionRequestedAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionRequested;\n}\n\nexport interface SelectOptionSucceededAction extends Action {\n    type: ShippingStrategyActionType.SelectOptionSucceeded;\n}\n\nexport interface SelectOptionFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.SelectOptionFailed;\n}\n\nexport interface InitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.InitializeFailed;\n}\n\nexport interface DeinitializeRequestedAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeRequested;\n}\n\nexport interface DeinitializeSucceededAction extends Action {\n    type: ShippingStrategyActionType.DeinitializeSucceeded;\n}\n\nexport interface DeinitializeFailedAction extends Action<Error> {\n    type: ShippingStrategyActionType.DeinitializeFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadConfigAction } from '../config/config-actions';\n\nimport Checkout from './checkout';\n\nexport enum CheckoutActionType {\n    LoadCheckoutRequested = 'LOAD_CHECKOUT_REQUESTED',\n    LoadCheckoutSucceeded = 'LOAD_CHECKOUT_SUCCEEDED',\n    LoadCheckoutFailed = 'LOAD_CHECKOUT_FAILED',\n\n    UpdateCheckoutRequested = 'UPDATE_CHECKOUT_REQUESTED',\n    UpdateCheckoutSucceeded = 'UPDATE_CHECKOUT_SUCCEEDED',\n    UpdateCheckoutFailed = 'UPDATE_CHECKOUT_FAILED',\n}\n\nexport type CheckoutAction = LoadCheckoutAction | UpdateCheckoutAction;\n\nexport type LoadCheckoutAction =\n    LoadCheckoutRequestedAction |\n    LoadCheckoutSucceededAction |\n    LoadCheckoutFailedAction |\n    LoadConfigAction;\n\nexport type UpdateCheckoutAction =\n    UpdateCheckoutRequestedAction |\n    UpdateCheckoutSucceededAction |\n    UpdateCheckoutFailedAction;\n\nexport interface LoadCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.LoadCheckoutRequested;\n}\n\nexport interface LoadCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.LoadCheckoutSucceeded;\n}\n\nexport interface LoadCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.LoadCheckoutFailed;\n}\n\nexport interface UpdateCheckoutRequestedAction extends Action {\n    type: CheckoutActionType.UpdateCheckoutRequested;\n}\n\nexport interface UpdateCheckoutSucceededAction extends Action<Checkout> {\n    type: CheckoutActionType.UpdateCheckoutSucceeded;\n}\n\nexport interface UpdateCheckoutFailedAction extends Action<Error> {\n    type: CheckoutActionType.UpdateCheckoutFailed;\n}\n","import { setPrototypeOf } from '../../utility';\n\nimport CustomError from './custom-error';\n\nexport default class StandardError extends Error implements CustomError {\n    type = 'standard';\n\n    constructor(message?: string) {\n        super(message || 'An unexpected error has occurred.');\n\n        setPrototypeOf(this, new.target.prototype);\n\n        if (typeof Error.captureStackTrace === 'function') {\n            Error.captureStackTrace(this, new.target);\n        } else {\n            this.stack = (new Error(this.message)).stack;\n        }\n    }\n}\n","export default function setPrototypeOf(object: any, prototype: object) {\n    if (Object.setPrototypeOf) {\n        Object.setPrototypeOf(object, prototype);\n    } else {\n        object.__proto__ = prototype;\n    }\n\n    return object;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum CouponActionType {\n    ApplyCouponRequested = 'APPLY_COUPON_REQUESTED',\n    ApplyCouponSucceeded = 'APPLY_COUPON_SUCCEEDED',\n    ApplyCouponFailed = 'APPLY_COUPON_FAILED',\n\n    RemoveCouponRequested = 'REMOVE_COUPON_REQUESTED',\n    RemoveCouponSucceeded = 'REMOVE_COUPON_SUCCEEDED',\n    RemoveCouponFailed = 'REMOVE_COUPON_FAILED',\n}\n\nexport type CouponAction =\n    ApplyCouponAction |\n    RemoveCouponAction;\n\nexport type ApplyCouponAction =\n    ApplyCouponRequestedAction |\n    ApplyCouponSucceededAction |\n    ApplyCouponFailedAction;\n\nexport type RemoveCouponAction =\n    RemoveCouponRequestedAction |\n    RemoveCouponSucceededAction |\n    RemoveCouponFailedAction;\n\nexport interface ApplyCouponRequestedAction extends Action {\n    type: CouponActionType.ApplyCouponRequested;\n}\n\nexport interface ApplyCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.ApplyCouponSucceeded;\n}\n\nexport interface ApplyCouponFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: CouponActionType.ApplyCouponFailed;\n}\n\nexport interface RemoveCouponRequestedAction extends Action {\n    type: CouponActionType.RemoveCouponRequested;\n}\n\nexport interface RemoveCouponSucceededAction extends Action<Checkout> {\n    type: CouponActionType.RemoveCouponSucceeded;\n}\n\nexport interface RemoveCouponFailedAction extends Action<RequestError> {\n    type: CouponActionType.RemoveCouponFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\n\nexport enum BillingAddressActionType {\n    UpdateBillingAddressRequested = 'UPDATE_BILLING_ADDRESS_REQUESTED',\n    UpdateBillingAddressSucceeded = 'UPDATE_BILLING_ADDRESS_SUCCEEDED',\n    UpdateBillingAddressFailed = 'UPDATE_BILLING_ADDRESS_FAILED',\n\n    ContinueAsGuestRequested = 'CONTINUE_AS_GUEST_REQUESTED',\n    ContinueAsGuestSucceeded = 'CONTINUE_AS_GUEST_SUCCEEDED',\n    ContinueAsGuestFailed = 'CONTINUE_AS_GUEST_FAILED',\n}\n\nexport type BillingAddressAction =\n    ContinueAsGuestAction |\n    UpdateBillingAddressAction;\n\nexport type UpdateBillingAddressAction =\n    UpdateBillingAddressRequested |\n    UpdateBillingAddressSucceeded |\n    UpdateBillingAddressFailed;\n\nexport type ContinueAsGuestAction =\n    ContinueAsGuestRequested |\n    ContinueAsGuestSucceeded |\n    ContinueAsGuestFailed;\n\nexport interface UpdateBillingAddressRequested extends Action {\n    type: BillingAddressActionType.UpdateBillingAddressRequested;\n}\n\nexport interface UpdateBillingAddressSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.UpdateBillingAddressSucceeded;\n}\n\nexport interface UpdateBillingAddressFailed extends Action<Error> {\n    type: BillingAddressActionType.UpdateBillingAddressFailed;\n}\n\nexport interface ContinueAsGuestRequested extends Action {\n    type: BillingAddressActionType.ContinueAsGuestRequested;\n}\n\nexport interface ContinueAsGuestSucceeded extends Action<Checkout> {\n    type: BillingAddressActionType.ContinueAsGuestSucceeded;\n}\n\nexport interface ContinueAsGuestFailed extends Action<Error> {\n    type: BillingAddressActionType.ContinueAsGuestFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { InternalOrderResponseData } from './internal-order-responses';\nimport Order from './order';\n\nexport enum OrderActionType {\n    LoadOrderRequested = 'LOAD_ORDER_REQUESTED',\n    LoadOrderSucceeded = 'LOAD_ORDER_SUCCEEDED',\n    LoadOrderFailed = 'LOAD_ORDER_FAILED',\n\n    LoadOrderPaymentsRequested = 'LOAD_ORDER_PAYMENTS_REQUESTED',\n    LoadOrderPaymentsSucceeded = 'LOAD_ORDER_PAYMENTS_SUCCEEDED',\n    LoadOrderPaymentsFailed = 'LOAD_ORDER_PAYMENTS_FAILED',\n\n    SubmitOrderRequested = 'SUBMIT_ORDER_REQUESTED',\n    SubmitOrderSucceeded = 'SUBMIT_ORDER_SUCCEEDED',\n    SubmitOrderFailed = 'SUBMIT_ORDER_FAILED',\n\n    FinalizeOrderRequested = 'FINALIZE_ORDER_REQUESTED',\n    FinalizeOrderSucceeded = 'FINALIZE_ORDER_SUCCEEDED',\n    FinalizeOrderFailed = 'FINALIZE_ORDER_FAILED',\n}\n\nexport type OrderAction = LoadOrderAction |\n    LoadOrderPaymentsAction |\n    SubmitOrderAction |\n    FinalizeOrderAction;\n\nexport type LoadOrderPaymentsAction = LoadOrderPaymentsRequestedAction |\n    LoadOrderPaymentsSucceededAction |\n    LoadOrderPaymentsFailedAction;\n\nexport type LoadOrderAction =\n    LoadOrderRequestedAction |\n    LoadOrderSucceededAction |\n    LoadOrderFailedAction;\n\nexport type SubmitOrderAction =\n    SubmitOrderRequestedAction |\n    SubmitOrderSucceededAction |\n    SubmitOrderFailedAction |\n    LoadOrderAction;\n\nexport type FinalizeOrderAction =\n    FinalizeOrderRequestedAction |\n    FinalizeOrderSucceededAction |\n    FinalizeOrderFailedAction |\n    LoadOrderAction;\n\nexport interface LoadOrderRequestedAction extends Action {\n    type: OrderActionType.LoadOrderRequested;\n}\n\nexport interface LoadOrderSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderSucceeded;\n}\n\nexport interface LoadOrderFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderFailed;\n}\n\nexport interface LoadOrderPaymentsRequestedAction extends Action {\n    type: OrderActionType.LoadOrderPaymentsRequested;\n}\n\nexport interface LoadOrderPaymentsSucceededAction extends Action<Order> {\n    type: OrderActionType.LoadOrderPaymentsSucceeded;\n}\n\nexport interface LoadOrderPaymentsFailedAction extends Action<Error> {\n    type: OrderActionType.LoadOrderPaymentsFailed;\n}\n\nexport interface SubmitOrderRequestedAction extends Action {\n    type: OrderActionType.SubmitOrderRequested;\n}\n\nexport interface SubmitOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.SubmitOrderSucceeded;\n}\n\nexport interface SubmitOrderFailedAction extends Action<Error> {\n    type: OrderActionType.SubmitOrderFailed;\n}\n\nexport interface FinalizeOrderRequestedAction extends Action {\n    type: OrderActionType.FinalizeOrderRequested;\n}\n\nexport interface FinalizeOrderSucceededAction extends Action<InternalOrderResponseData> {\n    type: OrderActionType.FinalizeOrderSucceeded;\n}\n\nexport interface FinalizeOrderFailedAction extends Action<Error> {\n    type: OrderActionType.FinalizeOrderFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport enum PaymentMethodActionType {\n    LoadPaymentMethodRequested = 'LOAD_PAYMENT_METHOD_REQUESTED',\n    LoadPaymentMethodSucceeded = 'LOAD_PAYMENT_METHOD_SUCCEEDED',\n    LoadPaymentMethodFailed = 'LOAD_PAYMENT_METHOD_FAILED',\n\n    LoadPaymentMethodsRequested = 'LOAD_PAYMENT_METHODS_REQUESTED',\n    LoadPaymentMethodsSucceeded = 'LOAD_PAYMENT_METHODS_SUCCEEDED',\n    LoadPaymentMethodsFailed = 'LOAD_PAYMENT_METHODS_FAILED',\n}\n\nexport type PaymentMethodAction = LoadPaymentMethodAction | LoadPaymentMethodsAction;\n\nexport type LoadPaymentMethodAction =\n    LoadPaymentMethodRequestedAction |\n    LoadPaymentMethodSucceededAction |\n    LoadPaymentMethodFailedAction;\n\nexport type LoadPaymentMethodsAction =\n    LoadPaymentMethodsRequestedAction |\n    LoadPaymentMethodsSucceededAction |\n    LoadPaymentMethodsFailedAction;\n\nexport interface LoadPaymentMethodRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodRequested;\n}\n\nexport interface LoadPaymentMethodSucceededAction extends Action<PaymentMethod> {\n    type: PaymentMethodActionType.LoadPaymentMethodSucceeded;\n}\n\nexport interface LoadPaymentMethodFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodFailed;\n}\n\nexport interface LoadPaymentMethodsRequestedAction extends Action {\n    type: PaymentMethodActionType.LoadPaymentMethodsRequested;\n}\n\nexport interface LoadPaymentMethodsSucceededAction extends Action<PaymentMethod[], PaymentMethodMeta> {\n    type: PaymentMethodActionType.LoadPaymentMethodsSucceeded;\n}\n\nexport interface LoadPaymentMethodsFailedAction extends Action<Error> {\n    type: PaymentMethodActionType.LoadPaymentMethodsFailed;\n}\n","module.exports = require(\"rxjs/operators\");","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadPaymentMethodAction } from '../payment';\n\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport enum CheckoutButtonActionType {\n    InitializeButtonFailed = 'INITIALIZE_BUTTON_FAILED',\n    InitializeButtonRequested = 'INITIALIZE_BUTTON_REQUESTED',\n    InitializeButtonSucceeded = 'INITIALIZE_BUTTON_SUCCEEDED',\n\n    DeinitializeButtonFailed = 'DEINITIALIZE_BUTTON_FAILED',\n    DeinitializeButtonRequested = 'DEINITIALIZE_BUTTON_REQUESTED',\n    DeinitializeButtonSucceeded = 'DEINITIALIZE_BUTTON_SUCCEEDED',\n}\n\nexport type CheckoutButtonAction = InitializeButtonAction | DeinitializeButtonAction;\n\nexport type InitializeButtonAction =\n    InitializeButtonRequestedAction |\n    InitializeButtonSucceededAction |\n    InitializeButtonFailedAction |\n    LoadPaymentMethodAction;\n\nexport type DeinitializeButtonAction =\n    DeinitializeButtonRequestedAction |\n    DeinitializeButtonSucceededAction |\n    DeinitializeButtonFailedAction;\n\nexport interface CheckoutButtonActionMeta {\n    methodId: CheckoutButtonMethodType;\n}\n\nexport interface InitializeButtonActionMeta extends CheckoutButtonActionMeta {\n    containerId: string;\n}\n\nexport interface InitializeButtonRequestedAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonRequested;\n}\n\nexport interface InitializeButtonSucceededAction extends Action<undefined, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonSucceeded;\n}\n\nexport interface InitializeButtonFailedAction extends Action<Error, InitializeButtonActionMeta> {\n    type: CheckoutButtonActionType.InitializeButtonFailed;\n}\n\nexport interface DeinitializeButtonRequestedAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonRequested;\n}\n\nexport interface DeinitializeButtonSucceededAction extends Action<undefined, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonSucceeded;\n}\n\nexport interface DeinitializeButtonFailedAction extends Action<Error, CheckoutButtonActionMeta> {\n    type: CheckoutButtonActionType.DeinitializeButtonFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum GiftCertificateActionType {\n    ApplyGiftCertificateRequested = 'APPLY_GIFT_CERTIFICATE_REQUESTED',\n    ApplyGiftCertificateSucceeded = 'APPLY_GIFT_CERTIFICATE_SUCCEEDED',\n    ApplyGiftCertificateFailed = 'APPLY_GIFT_CERTIFICATE_FAILED',\n\n    RemoveGiftCertificateRequested = 'REMOVE_GIFT_CERTIFICATE_REQUESTED',\n    RemoveGiftCertificateSucceeded = 'REMOVE_GIFT_CERTIFICATE_SUCCEEDED',\n    RemoveGiftCertificateFailed = 'REMOVE_GIFT_CERTIFICATE_FAILED',\n}\n\nexport type GiftCertificateAction =\n    ApplyGiftCertificateAction |\n    RemoveGiftCertificateAction;\n\nexport type ApplyGiftCertificateAction =\n    ApplyGiftCertificateRequestedAction |\n    ApplyGiftCertificateSucceededAction |\n    ApplyGiftCertificateFailedAction;\n\nexport type RemoveGiftCertificateAction =\n    RemoveGiftCertificateRequestedAction |\n    RemoveGiftCertificateSucceededAction |\n    RemoveGiftCertificateFailedAction;\n\nexport interface ApplyGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.ApplyGiftCertificateRequested;\n}\n\nexport interface ApplyGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.ApplyGiftCertificateSucceeded;\n}\n\nexport interface ApplyGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.ApplyGiftCertificateFailed;\n}\n\nexport interface RemoveGiftCertificateRequestedAction extends Action {\n    type: GiftCertificateActionType.RemoveGiftCertificateRequested;\n}\n\nexport interface RemoveGiftCertificateSucceededAction extends Action<Checkout> {\n    type: GiftCertificateActionType.RemoveGiftCertificateSucceeded;\n}\n\nexport interface RemoveGiftCertificateFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: GiftCertificateActionType.RemoveGiftCertificateFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { VaultAccessToken } from './instrument';\nimport { InstrumentsResponseBody } from './instrument-response-body';\n\nexport enum InstrumentActionType {\n    LoadInstrumentsRequested = 'LOAD_INSTRUMENTS_REQUESTED',\n    LoadInstrumentsSucceeded = 'LOAD_INSTRUMENTS_SUCCEEDED',\n    LoadInstrumentsFailed = 'LOAD_INSTRUMENTS_FAILED',\n\n    DeleteInstrumentRequested = 'DELETE_INSTRUMENT_REQUESTED',\n    DeleteInstrumentSucceeded = 'DELETE_INSTRUMENT_SUCCEEDED',\n    DeleteInstrumentFailed = 'DELETE_INSTRUMENT_FAILED',\n}\n\nexport type InstrumentAction =\n    LoadInstrumentsAction |\n    DeleteInstrumentAction;\n\nexport type LoadInstrumentsAction =\n    LoadInstrumentsRequestedAction |\n    LoadInstrumentsSucceededAction |\n    LoadInstrumentsFailedAction;\n\nexport type DeleteInstrumentAction =\n    DeleteInstrumentRequestedAction |\n    DeleteInstrumentSucceededAction |\n    DeleteInstrumentFailedAction;\n\nexport interface LoadInstrumentsRequestedAction extends Action {\n    type: InstrumentActionType.LoadInstrumentsRequested;\n}\n\nexport interface LoadInstrumentsSucceededAction extends Action<InstrumentsResponseBody, VaultAccessToken> {\n    type: InstrumentActionType.LoadInstrumentsSucceeded;\n}\n\nexport interface LoadInstrumentsFailedAction extends Action<Error> {\n    type: InstrumentActionType.LoadInstrumentsFailed;\n}\n\nexport interface DeleteInstrumentRequestedAction extends Action {\n    type: InstrumentActionType.DeleteInstrumentRequested;\n}\n\nexport interface DeleteInstrumentSucceededAction extends Action<InstrumentsResponseBody, VaultAccessToken & { instrumentId: string }> {\n    type: InstrumentActionType.DeleteInstrumentSucceeded;\n}\n\nexport interface DeleteInstrumentFailedAction extends Action<Error> {\n    type: InstrumentActionType.DeleteInstrumentFailed;\n}\n","import EmbeddedCheckoutError from './embedded-checkout-error';\nimport EmbeddedContentOptions from './iframe-content/embedded-content-options';\n\nexport enum EmbeddedCheckoutEventType {\n    CheckoutComplete = 'CHECKOUT_COMPLETE',\n    CheckoutError = 'CHECKOUT_ERROR',\n    CheckoutLoaded = 'CHECKOUT_LOADED',\n    FrameError = 'FRAME_ERROR',\n    FrameLoaded = 'FRAME_LOADED',\n    SignedOut = 'SIGNED_OUT',\n}\n\nexport interface EmbeddedCheckoutEventMap {\n    [EmbeddedCheckoutEventType.CheckoutComplete]: EmbeddedCheckoutCompleteEvent;\n    [EmbeddedCheckoutEventType.CheckoutError]: EmbeddedCheckoutErrorEvent;\n    [EmbeddedCheckoutEventType.CheckoutLoaded]: EmbeddedCheckoutLoadedEvent;\n    [EmbeddedCheckoutEventType.FrameError]: EmbeddedCheckoutFrameErrorEvent;\n    [EmbeddedCheckoutEventType.FrameLoaded]: EmbeddedCheckoutFrameLoadedEvent;\n    [EmbeddedCheckoutEventType.SignedOut]: EmbeddedCheckoutSignedOutEvent;\n}\n\nexport type EmbeddedCheckoutEvent = (\n    EmbeddedCheckoutCompleteEvent |\n    EmbeddedCheckoutErrorEvent |\n    EmbeddedCheckoutFrameErrorEvent |\n    EmbeddedCheckoutFrameLoadedEvent |\n    EmbeddedCheckoutLoadedEvent |\n    EmbeddedCheckoutSignedOutEvent\n);\n\nexport interface EmbeddedCheckoutCompleteEvent {\n    type: EmbeddedCheckoutEventType.CheckoutComplete;\n}\n\nexport interface EmbeddedCheckoutErrorEvent {\n    type: EmbeddedCheckoutEventType.CheckoutError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutLoadedEvent {\n    type: EmbeddedCheckoutEventType.CheckoutLoaded;\n}\n\nexport interface EmbeddedCheckoutFrameErrorEvent {\n    type: EmbeddedCheckoutEventType.FrameError;\n    payload: EmbeddedCheckoutError;\n}\n\nexport interface EmbeddedCheckoutFrameLoadedEvent {\n    type: EmbeddedCheckoutEventType.FrameLoaded;\n    payload?: EmbeddedContentOptions;\n}\n\nexport interface EmbeddedCheckoutSignedOutEvent {\n    type: EmbeddedCheckoutEventType.SignedOut;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { AmazonPayRemoteCheckout } from './methods';\n\nexport enum RemoteCheckoutActionType {\n    InitializeRemoteBillingRequested = 'INITIALIZE_REMOTE_BILLING_REQUESTED',\n    InitializeRemoteBillingSucceeded = 'INITIALIZE_REMOTE_BILLING_SUCCEEDED',\n    InitializeRemoteBillingFailed = 'INITIALIZE_REMOTE_BILLING_FAILED',\n\n    InitializeRemoteShippingRequested = 'INITIALIZE_REMOTE_SHIPPING_REQUESTED',\n    InitializeRemoteShippingSucceeded = 'INITIALIZE_REMOTE_SHIPPING_SUCCEEDED',\n    InitializeRemoteShippingFailed = 'INITIALIZE_REMOTE_SHIPPING_FAILED',\n\n    InitializeRemotePaymentRequested = 'INITIALIZE_REMOTE_PAYMENT_REQUESTED',\n    InitializeRemotePaymentSucceeded = 'INITIALIZE_REMOTE_PAYMENT_SUCCEEDED',\n    InitializeRemotePaymentFailed = 'INITIALIZE_REMOTE_PAYMENT_FAILED',\n\n    LoadRemoteSettingsRequested = 'LOAD_REMOTE_SETTINGS_REQUESTED',\n    LoadRemoteSettingsSucceeded = 'LOAD_REMOTE_SETTINGS_SUCCEEDED',\n    LoadRemoteSettingsFailed = 'LOAD_REMOTE_SETTINGS_FAILED',\n\n    SignOutRemoteCustomerRequested = 'SIGN_OUT_REMOTE_CUSTOMER_REQUESTED',\n    SignOutRemoteCustomerSucceeded = 'SIGN_OUT_REMOTE_CUSTOMER_SUCCEEDED',\n    SignOutRemoteCustomerFailed = 'SIGN_OUT_REMOTE_CUSTOMER_FAILED',\n\n    UpdateRemoteCheckout = 'UPDATE_REMOTE_CHECKOUT',\n}\n\nexport type RemoteCheckoutAction = InitializeRemoteBillingAction |\n    InitializeRemoteShippingAction |\n    InitializeRemotePaymentAction |\n    SignOutRemoteCustomerAction |\n    LoadRemoteSettingsAction |\n    UpdateRemoteCheckoutAction;\n\nexport type InitializeRemoteBillingAction = InitializeRemoteBillingSucceededAction |\n    InitializeRemoteBillingFailedAction |\n    InitializeRemoteBillingRequestedAction;\n\nexport interface InitializeRemoteBillingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingSucceeded;\n}\n\nexport interface InitializeRemoteBillingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingFailed;\n}\n\nexport interface InitializeRemoteBillingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteBillingRequested;\n}\n\nexport type InitializeRemoteShippingAction = InitializeRemoteShippingSucceededAction |\n    InitializeRemoteShippingFailedAction |\n    InitializeRemoteShippingRequestedAction;\n\nexport interface InitializeRemoteShippingSucceededAction extends Action<AmazonPayRemoteCheckout> {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingSucceeded;\n}\n\nexport interface InitializeRemoteShippingFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingFailed;\n}\n\nexport interface InitializeRemoteShippingRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemoteShippingRequested;\n}\n\nexport type InitializeRemotePaymentAction = InitializeRemotePaymentSucceededAction |\n    InitializeRemotePaymentFailedAction |\n    InitializeRemotePaymentRequestedAction;\n\nexport interface InitializeRemotePaymentSucceededAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentSucceeded;\n}\n\nexport interface InitializeRemotePaymentFailedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentFailed;\n}\n\nexport interface InitializeRemotePaymentRequestedAction extends Action {\n    type: RemoteCheckoutActionType.InitializeRemotePaymentRequested;\n}\n\nexport type SignOutRemoteCustomerAction = SignOutRemoteCustomerSucceededAction |\n    SignOutRemoteCustomerFailedAction |\n    SignOutRemoteCustomerRequestedAction;\n\nexport interface SignOutRemoteCustomerSucceededAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded;\n}\n\nexport interface SignOutRemoteCustomerFailedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerFailed;\n}\n\nexport interface SignOutRemoteCustomerRequestedAction extends Action {\n    type: RemoteCheckoutActionType.SignOutRemoteCustomerRequested;\n}\n\nexport type LoadRemoteSettingsAction = LoadRemoteSettingsSucceededAction |\n    LoadRemoteSettingsRequestedAction |\n    LoadRemoteSettingsFailedAction;\n\nexport interface LoadRemoteSettingsSucceededAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsSucceeded;\n}\n\nexport interface LoadRemoteSettingsRequestedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsRequested;\n}\n\nexport interface LoadRemoteSettingsFailedAction extends Action {\n    type: RemoteCheckoutActionType.LoadRemoteSettingsFailed;\n}\n\nexport interface UpdateRemoteCheckoutAction extends Action {\n    type: RemoteCheckoutActionType.UpdateRemoteCheckout;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport StandardError from './standard-error';\n\nconst DEFAULT_RESPONSE = {\n    body: {},\n    headers: {},\n    status: 0,\n};\n\nexport default class RequestError<TBody = any> extends StandardError {\n    body: TBody | {};\n    headers: { [key: string]: any };\n    errors: Array<{ code: string; message?: string }>;\n    status: number;\n\n    constructor(\n        response?: Response<TBody | {}>,\n        { message, errors }: {\n            message?: string;\n            errors?: Array<{ code: string; message?: string }>;\n        } = {}\n    ) {\n        const { body, headers, status } = response || DEFAULT_RESPONSE;\n\n        super(message || 'An unexpected error has occurred.');\n\n        this.name = 'RequestError';\n        this.type = 'request';\n        this.body = body;\n        this.headers = headers;\n        this.status = status;\n        this.errors = errors || [];\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Checkout } from '../checkout';\nimport { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport enum StoreCreditActionType {\n    ApplyStoreCreditRequested = 'APPLY_STORE_CREDIT_REQUESTED',\n    ApplyStoreCreditSucceeded = 'APPLY_STORE_CREDIT_SUCCEEDED',\n    ApplyStoreCreditFailed = 'APPLY_STORE_CREDIT_FAILED',\n}\n\nexport type StoreCreditAction =\n    ApplyStoreCreditAction;\n\nexport type ApplyStoreCreditAction =\n    ApplyStoreCreditRequestedAction |\n    ApplyStoreCreditSucceededAction |\n    ApplyStoreCreditFailedAction;\n\nexport interface ApplyStoreCreditRequestedAction extends Action {\n    type: StoreCreditActionType.ApplyStoreCreditRequested;\n}\n\nexport interface ApplyStoreCreditSucceededAction extends Action<Checkout> {\n    type: StoreCreditActionType.ApplyStoreCreditSucceeded;\n}\n\nexport interface ApplyStoreCreditFailedAction extends Action<RequestError<StorefrontErrorResponseBody>> {\n    type: StoreCreditActionType.ApplyStoreCreditFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Config from './config';\n\nexport enum ConfigActionType {\n    LoadConfigRequested = 'LOAD_CONFIG_REQUESTED',\n    LoadConfigSucceeded = 'LOAD_CONFIG_SUCCEEDED',\n    LoadConfigFailed = 'LOAD_CONFIG_FAILED',\n}\n\nexport type LoadConfigAction =\n    LoadConfigRequestedAction |\n    LoadConfigSucceededAction |\n    LoadConfigFailedAction;\n\nexport interface LoadConfigRequestedAction extends Action {\n    type: ConfigActionType.LoadConfigRequested;\n}\n\nexport interface LoadConfigSucceededAction extends Action<Config> {\n    type: ConfigActionType.LoadConfigSucceeded;\n}\n\nexport interface LoadConfigFailedAction extends Action<Error> {\n    type: ConfigActionType.LoadConfigFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport Country from './country';\n\nexport enum CountryActionType {\n    LoadCountriesRequested = 'LOAD_COUNTRIES_REQUESTED',\n    LoadCountriesSucceeded = 'LOAD_COUNTRIES_SUCCEEDED',\n    LoadCountriesFailed = 'LOAD_COUNTRIES_FAILED',\n}\n\nexport type LoadCountriesAction =\n    LoadCountriesRequestedAction |\n    LoadCountriesSucceededAction |\n    LoadCountriesFailedAction;\n\nexport interface LoadCountriesRequestedAction extends Action {\n    type: CountryActionType.LoadCountriesRequested;\n}\n\nexport interface LoadCountriesSucceededAction extends Action<Country[]> {\n    type: CountryActionType.LoadCountriesSucceeded;\n}\n\nexport interface LoadCountriesFailedAction extends Action<Error> {\n    type: CountryActionType.LoadCountriesFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { Country } from '../geography';\n\nexport enum ShippingCountryActionType {\n    LoadShippingCountriesRequested = 'LOAD_SHIPPING_COUNTRIES_REQUESTED',\n    LoadShippingCountriesSucceeded = 'LOAD_SHIPPING_COUNTRIES_SUCCEEDED',\n    LoadShippingCountriesFailed = 'LOAD_SHIPPING_COUNTRIES_FAILED',\n}\n\nexport type LoadShippingCountriesAction = LoadShippingCountriesRequestedAction |\n    LoadShippingCountriesSucceededAction |\n    LoadShippingCountriesFailedAction;\n\nexport interface LoadShippingCountriesRequestedAction extends Action {\n    type: ShippingCountryActionType.LoadShippingCountriesRequested;\n}\n\nexport interface LoadShippingCountriesSucceededAction extends Action<Country[]> {\n    type: ShippingCountryActionType.LoadShippingCountriesSucceeded;\n}\n\nexport interface LoadShippingCountriesFailedAction extends Action<Error> {\n    type: ShippingCountryActionType.LoadShippingCountriesFailed;\n}\n","module.exports = require(\"@bigcommerce/request-sender\");","export const ACKNOWLEDGE = 'ACKNOWLEDGE';\nexport const FINALIZE = 'FINALIZE';\nexport const INITIALIZE = 'INITIALIZE';\n","module.exports = require(\"@bigcommerce/script-loader\");","enum ContentType {\n    Json = 'application/json',\n    JsonV1 = 'application/vnd.bc.v1+json',\n}\n\nexport default ContentType;\n","module.exports = require(\"shallowequal\");","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadOrderAction } from '../order';\n\nimport PaymentResponseBody from './payment-response-body';\n\nexport enum PaymentActionType {\n    SubmitPaymentRequested = 'SUBMIT_PAYMENT_REQUESTED',\n    SubmitPaymentSucceeded = 'SUBMIT_PAYMENT_SUCCEEDED',\n    SubmitPaymentFailed = 'SUBMIT_PAYMENT_FAILED',\n\n    InitializeOffsitePaymentRequested = 'INITIALIZE_OFFSITE_PAYMENT_REQUESTED',\n    InitializeOffsitePaymentSucceeded = 'INITIALIZE_OFFSITE_PAYMENT_SUCCEEDED',\n    InitializeOffsitePaymentFailed = 'INITIALIZE_OFFSITE_PAYMENT_FAILED',\n}\n\nexport type PaymentAction = SubmitPaymentAction |\n    InitializeOffsitePaymentAction;\n\nexport type SubmitPaymentAction =\n    SubmitPaymentRequestedAction |\n    SubmitPaymentSucceededAction |\n    SubmitPaymentFailedAction |\n    LoadOrderAction;\n\nexport type InitializeOffsitePaymentAction =\n    InitializeOffsitePaymentRequestedAction |\n    InitializeOffsitePaymentSucceededAction |\n    InitializeOffsitePaymentFailedAction;\n\nexport interface SubmitPaymentRequestedAction extends Action {\n    type: PaymentActionType.SubmitPaymentRequested;\n}\n\nexport interface SubmitPaymentSucceededAction extends Action<PaymentResponseBody> {\n    type: PaymentActionType.SubmitPaymentSucceeded;\n}\n\nexport interface SubmitPaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.SubmitPaymentFailed;\n}\n\nexport interface InitializeOffsitePaymentRequestedAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentRequested;\n}\n\nexport interface InitializeOffsitePaymentSucceededAction extends Action {\n    type: PaymentActionType.InitializeOffsitePaymentSucceeded;\n}\n\nexport interface InitializeOffsitePaymentFailedAction extends Action<Error> {\n    type: PaymentActionType.InitializeOffsitePaymentFailed;\n}\n","import StandardError from './standard-error';\n\nexport default class InvalidArgumentError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Invalid arguments have been provided.');\n\n        this.name = 'InvalidArgumentError';\n        this.type = 'invalid_argument';\n    }\n}\n","export const HOSTED = 'PAYMENT_TYPE_HOSTED';\nexport const OFFLINE = 'PAYMENT_TYPE_OFFLINE';\n","import IframeEvent from './iframe-event';\n\nexport default function isIframeEvent<TEvent extends IframeEvent<TType>, TType extends string>(\n    object: any,\n    type: TType\n): object is TEvent {\n    return object.type === type;\n}\n","export interface CompareOptions {\n    keyFilter?(key: string): boolean;\n}\n\nexport default function isEqual(objectA: any, objectB: any, options?: CompareOptions): boolean {\n    if (objectA === objectB) {\n        return true;\n    }\n\n    if (objectA && objectB && typeof objectA === 'object' && typeof objectB === 'object') {\n        if (Array.isArray(objectA) && Array.isArray(objectB)) {\n            return isArrayEqual(objectA, objectB, options);\n        }\n\n        if (Array.isArray(objectA) || Array.isArray(objectB)) {\n            return false;\n        }\n\n        if ((objectA instanceof Date) && (objectB instanceof Date)) {\n            return isDateEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof Date) || (objectB instanceof Date)) {\n            return false;\n        }\n\n        if ((objectA instanceof RegExp) && (objectB instanceof RegExp)) {\n            return isRegExpEqual(objectA, objectB);\n        }\n\n        if ((objectA instanceof RegExp) || (objectB instanceof RegExp)) {\n            return false;\n        }\n\n        return isObjectEqual(objectA, objectB, options);\n    }\n\n    return objectA === objectB;\n}\n\nfunction isRegExpEqual(objectA: RegExp, objectB: RegExp): boolean {\n    return objectA.toString() === objectB.toString();\n}\n\nfunction isDateEqual(objectA: Date, objectB: Date): boolean {\n    return objectA.getTime() === objectB.getTime();\n}\n\nfunction isArrayEqual(objectA: any[], objectB: any[], options?: CompareOptions): boolean {\n    if (objectA.length !== objectB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = objectA.length; index < length; index++) {\n        if (!isEqual(objectA[index], objectB[index], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction isObjectEqual(\n    objectA: { [key: string]: any },\n    objectB: { [key: string]: any },\n    options?: CompareOptions\n): boolean {\n    const filter = options && options.keyFilter;\n    const keysA = filter ? Object.keys(objectA).filter(filter) : Object.keys(objectA);\n    const keysB = filter ? Object.keys(objectB).filter(filter) : Object.keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    for (let index = 0, length = keysA.length; index < length; index++) {\n        const key = keysA[index];\n\n        if (!objectB.hasOwnProperty(key)) {\n            return false;\n        }\n\n        if (!isEqual(objectA[key], objectB[key], options)) {\n            return false;\n        }\n    }\n\n    return true;\n}\n","module.exports = require(\"@bigcommerce/form-poster\");","module.exports = require(\"local-storage-fallback\");","module.exports = require(\"reselect\");","import { parseUrl } from '../common/url';\n\nexport default class IframeEventPoster<TEvent> {\n    private _targetOrigin: string;\n\n    constructor(\n        targetOrigin: string,\n        private _targetWindow?: Window\n    ) {\n        this._targetOrigin = targetOrigin === '*' ? '*' : parseUrl(targetOrigin).origin;\n    }\n\n    post(event: TEvent): void {\n        if (window === this._targetWindow) {\n            return;\n        }\n\n        if (!this._targetWindow) {\n            throw new Error('Unable to post message becauset target window is not set.');\n        }\n\n        this._targetWindow.postMessage(event, this._targetOrigin);\n    }\n\n    setTarget(window: Window) {\n        this._targetWindow = window;\n    }\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { LoadCheckoutAction } from '../checkout';\n\nimport { InternalCustomerResponseData } from './internal-customer-responses';\n\nexport enum CustomerActionType {\n    SignInCustomerRequested = 'SIGN_IN_CUSTOMER_REQUESTED',\n    SignInCustomerSucceeded = 'SIGN_IN_CUSTOMER_SUCCEEDED',\n    SignInCustomerFailed = 'SIGN_IN_CUSTOMER_FAILED',\n\n    SignOutCustomerRequested = 'SIGN_OUT_CUSTOMER_REQUESTED',\n    SignOutCustomerSucceeded = 'SIGN_OUT_CUSTOMER_SUCCEEDED',\n    SignOutCustomerFailed = 'SIGN_OUT_CUSTOMER_FAILED',\n}\n\nexport type CustomerAction =\n    SignInCustomerAction |\n    SignOutCustomerAction;\n\nexport type SignInCustomerAction =\n    SignInCustomerRequestedAction |\n    SignInCustomerSucceededAction |\n    SignInCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport type SignOutCustomerAction =\n    SignOutCustomerRequestedAction |\n    SignOutCustomerSucceededAction |\n    SignOutCustomerFailedAction |\n    LoadCheckoutAction;\n\nexport interface SignInCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignInCustomerRequested;\n}\n\nexport interface SignInCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignInCustomerSucceeded;\n}\n\nexport interface SignInCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignInCustomerFailed;\n}\n\nexport interface SignOutCustomerRequestedAction extends Action {\n    type: CustomerActionType.SignOutCustomerRequested;\n}\n\nexport interface SignOutCustomerSucceededAction extends Action<InternalCustomerResponseData> {\n    type: CustomerActionType.SignOutCustomerSucceeded;\n}\n\nexport interface SignOutCustomerFailedAction extends Action<Error> {\n    type: CustomerActionType.SignOutCustomerFailed;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum SpamProtectionActionType {\n    InitializeFailed = 'SPAM_PROTECTION_INITIALIZE_FAILED',\n    InitializeSucceeded = 'SPAM_PROTECTION_INITIALIZE_SUCCEEDED',\n    InitializeRequested = 'SPAM_PROTECTION_INITIALIZE_REQUESTED',\n    ExecuteRequested = 'SPAM_PROTECTION_EXECUTE_REQUESTED',\n    Completed = 'SPAM_PROTECTION_COMPLETED',\n    SubmitFailed = 'SPAM_PROTECTION_SUBMIT_FAILED',\n}\n\nexport type SpamProtectionAction =\n    InitializeRequestedAction |\n    InitializeSucceededAction |\n    InitializeFailedAction |\n    ExecuteRequestedAction |\n    CompletedAction |\n    SubmitFailedAction;\n\nexport interface InitializeRequestedAction extends Action {\n    type: SpamProtectionActionType.InitializeRequested;\n}\n\nexport interface InitializeSucceededAction extends Action {\n    type: SpamProtectionActionType.InitializeSucceeded;\n}\n\nexport interface InitializeFailedAction extends Action<Error> {\n    type: SpamProtectionActionType.InitializeFailed;\n}\n\nexport interface ExecuteRequestedAction extends Action {\n    type: SpamProtectionActionType.ExecuteRequested;\n}\n\nexport interface CompletedAction extends Action<string> {\n    type: SpamProtectionActionType.Completed;\n}\n\nexport interface SubmitFailedAction extends Action {\n    type: SpamProtectionActionType.SubmitFailed;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { RequestError } from '../../common/error/errors';\n\nexport default class PaymentMethodInvalidError extends RequestError {\n    constructor(response?: Response) {\n        super(response, { message: 'There is a problem processing your payment. Please try again later.' });\n\n        this.name = 'PaymentMethodInvalidError';\n        this.type = 'payment_method_invalid';\n    }\n}\n","import { createSelector as defaultSelectorCreator } from 'reselect';\n\nimport memoize from '../utility/memoize';\n\n/**\n * Decorate selector creators with the ability to memoize the return value of\n * their combiner if it is a function (which effectively works as a partially\n * applied combiner).\n */\nexport default function withMemoizedCombiner<T extends typeof defaultSelectorCreator>(\n    creator: T\n): T {\n    return ((...args: any[]) => {\n        const combiner = args.pop();\n\n        // Reselect's default `createSelector` has many overloads. To avoid having\n        // to redefine all of them, we're using `any` to bypass the typechecker.\n        return (creator as any)(...args, (...combinerArgs: any[]) => {\n            // Although there are many overloads, all of them have the last argument\n            // as the combiner.\n            const result = combiner(...combinerArgs);\n\n            if (typeof result === 'function') {\n                return memoize(result);\n            }\n\n            return result;\n        });\n    }) as T;\n}\n","import { Action } from '@bigcommerce/data-store';\n\nexport enum ErrorActionType {\n    ClearError = 'CLEAR_ERROR',\n}\n\nexport type ErrorAction = ClearErrorAction;\n\nexport interface ClearErrorAction extends Action {\n    type: ErrorActionType.ClearError;\n    payload: Error;\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadPaymentMethodsAction, LoadPaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\n\nexport default class PaymentMethodActionCreator {\n    constructor(\n        private _requestSender: PaymentMethodRequestSender\n    ) {}\n\n    loadPaymentMethods(options?: RequestOptions): Observable<LoadPaymentMethodsAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodsAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsRequested));\n\n            this._requestSender.loadPaymentMethods(options)\n                .then(response => {\n                    const meta = {\n                        deviceSessionId: response.headers['x-device-session-id'],\n                        sessionHash: response.headers['x-session-hash'],\n                    };\n\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodsSucceeded, response.body, meta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodsFailed, response));\n                });\n        });\n    }\n\n    @cachableAction\n    loadPaymentMethod(methodId: string, options?: RequestOptions & ActionOptions): Observable<LoadPaymentMethodAction> {\n        return Observable.create((observer: Observer<LoadPaymentMethodAction>) => {\n            observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodRequested, undefined, { methodId }));\n\n            this._requestSender.loadPaymentMethod(methodId, options)\n                .then(response => {\n                    observer.next(createAction(PaymentMethodActionType.LoadPaymentMethodSucceeded, response.body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(PaymentMethodActionType.LoadPaymentMethodFailed, response, { methodId }));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport PaymentMethod from './payment-method';\n\nexport default class PaymentMethodRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadPaymentMethods({ timeout }: RequestOptions = {}): Promise<Response<PaymentMethod[]>> {\n        const url = '/api/storefront/payments';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n\n    loadPaymentMethod(methodId: string, { timeout }: RequestOptions = {}): Promise<Response<PaymentMethod>> {\n        const url = `/api/storefront/payments/${methodId}`;\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import EmbeddedCheckoutStyles from '../embedded-checkout-styles';\n\nexport enum EmbeddedContentEventType {\n    StyleConfigured = 'STYLE_CONFIGURED',\n}\n\nexport interface EmbeddedContentEventMap {\n    [EmbeddedContentEventType.StyleConfigured]: EmbeddedContentStyleConfiguredEvent;\n}\n\nexport type EmbeddedContentEvent = (\n    EmbeddedContentStyleConfiguredEvent\n);\n\nexport interface EmbeddedContentStyleConfiguredEvent {\n    type: EmbeddedContentEventType.StyleConfigured;\n    payload: EmbeddedCheckoutStyles;\n}\n","import { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { IframeEventMap } from './iframe-event';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class IframeEventListener<TEventMap extends IframeEventMap<keyof TEventMap>> {\n    private _isListening: boolean;\n    private _listeners: EventListeners<TEventMap>;\n    private _sourceOrigin: string;\n\n    constructor(\n        sourceOrigin: string\n    ) {\n        this._sourceOrigin = parseUrl(sourceOrigin).origin;\n        this._isListening = false;\n        this._listeners = {};\n    }\n\n    listen(): void {\n        if (this._isListening) {\n            return;\n        }\n\n        this._isListening = true;\n\n        window.addEventListener('message', this._handleMessage);\n    }\n\n    stopListen(): void {\n        if (!this._isListening) {\n            return;\n        }\n\n        this._isListening = false;\n\n        window.removeEventListener('message', this._handleMessage);\n    }\n\n    addListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        let listeners = this._listeners[type];\n\n        if (!listeners) {\n            this._listeners[type] = listeners = [];\n        }\n\n        listeners.push(listener);\n    }\n\n    removeListener<TType extends keyof TEventMap>(type: TType, listener: (event: TEventMap[TType]) => void): void {\n        const listeners = this._listeners[type];\n\n        if (!listeners) {\n            return;\n        }\n\n        const index = listeners.indexOf(listener);\n\n        if (index >= 0) {\n            listeners.splice(index, 1);\n        }\n    }\n\n    trigger<TType extends keyof TEventMap>(event: TEventMap[TType]): void {\n        const listeners = this._listeners[event.type];\n\n        if (!listeners) {\n            return;\n        }\n\n        listeners.forEach(listener => listener(event));\n    }\n\n    @bind\n    private _handleMessage(event: MessageEvent): void {\n        if ((event.origin !== this._sourceOrigin) || !isIframeEvent(event.data, event.data.type)) {\n            return;\n        }\n\n        this.trigger(event.data);\n    }\n}\n\ntype EventListeners<TEventMap> = {\n    [key in keyof TEventMap]?: Array<(event: TEventMap[keyof TEventMap]) => void>;\n};\n","const CHECKOUT_DEFAULT_INCLUDES = [\n    'cart.lineItems.physicalItems.options',\n    'cart.lineItems.digitalItems.options',\n    'customer',\n    'payments',\n    'promotions.banners',\n];\n\nexport default CHECKOUT_DEFAULT_INCLUDES;\n","import InternalLineItem from './internal-line-item';\nimport { LineItem } from './line-item';\nimport LineItemMap from './line-item-map';\nimport mapGiftCertificateToInternalLineItem from './map-gift-certificate-to-internal-line-item';\nimport mapToInternalLineItem from './map-to-internal-line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItems(\n    itemMap: LineItemMap,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem[] {\n    return (Object.keys(itemMap) as Array<keyof LineItemMap>)\n        .reduce((result, key) => [\n            ...result,\n            ...(itemMap[key] as LineItem[]).map((item: any) => {\n                if (key === 'giftCertificates') {\n                    return mapGiftCertificateToInternalLineItem(item, decimalPlaces);\n                }\n\n                return mapToInternalLineItem(\n                    item,\n                    mapToInternalLineItemType(key),\n                    decimalPlaces,\n                    idKey\n                );\n            }),\n        ], [] as InternalLineItem[]);\n}\n\nfunction mapToInternalLineItemType(type: string): string {\n    switch (type) {\n        case 'physicalItems':\n            return 'ItemPhysicalEntity';\n\n        case 'digitalItems':\n            return 'ItemDigitalEntity';\n\n        case 'giftCertificates':\n            return 'ItemGiftCertificateEntity';\n\n        default:\n            return '';\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { GiftCertificateItem } from './line-item';\n\nexport default function mapGiftCertificateToInternalLineItem(\n    item: GiftCertificateItem,\n    decimalPlaces: number\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: item.id,\n        imageUrl: '',\n        name: item.name,\n        amount: item.amount,\n        amountAfterDiscount: item.amount,\n        discount: 0,\n        integerAmount: amountTransformer.toInteger(item.amount),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.amount),\n        integerDiscount: 0,\n        quantity: 1,\n        sender: item.sender,\n        recipient: item.recipient,\n        type: 'ItemGiftCertificateEntity',\n        attributes: [],\n        variantId: null,\n    };\n}\n","export const INTERNAL_USE_ONLY = 'This API endpoint is for internal use only and may change in the future';\n","export interface RootCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n}\n\nexport interface IntermediateCacheKeyMap {\n    maps: ChildCacheKeyMap[];\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    usedCount: number;\n    value: any;\n}\n\nexport interface TerminalCacheKeyMap extends IntermediateCacheKeyMap {\n    cacheKey: string;\n}\n\nexport type ChildCacheKeyMap = IntermediateCacheKeyMap | TerminalCacheKeyMap;\n\nexport function isTerminalCacheKeyMap(map: ChildCacheKeyMap): map is TerminalCacheKeyMap {\n    return map.hasOwnProperty('cacheKey');\n}\n\nexport function isRootCacheKeyMap(map: RootCacheKeyMap | ChildCacheKeyMap): map is RootCacheKeyMap {\n    return map.hasOwnProperty('parentMap');\n}\n","import { noop } from 'lodash';\nimport * as shallowEqual from 'shallowequal';\n\nimport { isRootCacheKeyMap, isTerminalCacheKeyMap, ChildCacheKeyMap, IntermediateCacheKeyMap, RootCacheKeyMap, TerminalCacheKeyMap } from './cache-key-maps';\n\nexport interface CacheKeyResolverOptions {\n    maxSize?: number;\n    onExpire?(key: string): void;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\ninterface ResolveResult {\n    index: number;\n    parentMap: RootCacheKeyMap | IntermediateCacheKeyMap;\n    map?: TerminalCacheKeyMap;\n}\n\nexport default class CacheKeyResolver {\n    private _lastId = 0;\n    private _map: RootCacheKeyMap = { maps: [] };\n    private _usedMaps: TerminalCacheKeyMap[] = [];\n    private _options: Required<CacheKeyResolverOptions>;\n\n    constructor(options?: CacheKeyResolverOptions) {\n        this._options = {\n            maxSize: 0,\n            isEqual: shallowEqual,\n            onExpire: noop,\n            ...options,\n        };\n    }\n\n    getKey(...args: any[]): string {\n        const result = this._resolveMap(...args);\n        const { index, parentMap } = result;\n        let { map } = result;\n\n        if (map && map.cacheKey) {\n            map.usedCount++;\n        } else {\n            map = this._generateMap(parentMap, args.slice(index));\n        }\n\n        // Keep track of the least used map so we can remove it if the size of\n        // the stack exceeds the maximum size.\n        this._removeLeastUsedMap(map);\n\n        return map.cacheKey;\n    }\n\n    getUsedCount(...args: any[]): number {\n        const { map } = this._resolveMap(...args);\n\n        return map ? map.usedCount : 0;\n    }\n\n    private _resolveMap(...args: any[]): ResolveResult {\n        let index = 0;\n        let parentMap = this._map;\n\n        // Traverse the tree to find the linked list of maps that match the\n        // arguments of the call. Each intermediate or terminal map contains a\n        // value that could be used to match with the arguments. The last map in\n        // the list (the terminal) should contain a cache key. If it can does\n        // not exist, we will return a falsy value so that the caller could\n        // handle and generate a new cache key.\n        while (parentMap.maps.length) {\n            let isMatched = false;\n\n            for (let mapIndex = 0; mapIndex < parentMap.maps.length; mapIndex++) {\n                const map = parentMap.maps[mapIndex];\n\n                if (!this._options.isEqual(map.value, args[index])) {\n                    continue;\n                }\n\n                // Move the most recently used map to the top of the stack for\n                // quicker access\n                parentMap.maps.unshift(...parentMap.maps.splice(mapIndex, 1));\n\n                if ((args.length === 0 || index === args.length - 1) && isTerminalCacheKeyMap(map)) {\n                    return { index, map, parentMap };\n                }\n\n                isMatched = true;\n                parentMap = map;\n                index++;\n\n                break;\n            }\n\n            if (!isMatched) {\n                break;\n            }\n        }\n\n        return { index, parentMap };\n    }\n\n    private _generateMap(parent: RootCacheKeyMap | IntermediateCacheKeyMap, args: any[]): TerminalCacheKeyMap {\n        let index = 0;\n        let parentMap = parent;\n        let map: IntermediateCacheKeyMap;\n\n        do {\n            map = {\n                maps: [],\n                parentMap,\n                usedCount: 1,\n                value: args[index],\n            };\n\n            // Continue to build the tree of maps so that it could be resolved\n            // next time when the function is called with the same set of\n            // arguments.\n            parentMap.maps.unshift(map);\n\n            parentMap = map;\n            index++;\n        } while (index < args.length);\n\n        const terminalMap = map as TerminalCacheKeyMap;\n\n        terminalMap.cacheKey = `${++this._lastId}`;\n\n        return terminalMap;\n    }\n\n    private _removeLeastUsedMap(recentlyUsedMap: TerminalCacheKeyMap): void {\n        if (!this._options.maxSize) {\n            return;\n        }\n\n        const index = this._usedMaps.indexOf(recentlyUsedMap);\n\n        this._usedMaps.splice(\n            index === -1 ? 0 : index,\n            index === -1 ? 0 : 1,\n            recentlyUsedMap\n        );\n\n        if (this._usedMaps.length <= this._options.maxSize) {\n            return;\n        }\n\n        const map = this._usedMaps.pop();\n\n        if (!map) {\n            return;\n        }\n\n        this._removeMap(map);\n        this._options.onExpire(map.cacheKey);\n    }\n\n    private _removeMap(map: ChildCacheKeyMap): void {\n        if (!map.parentMap) {\n            return;\n        }\n\n        map.parentMap.maps.splice(map.parentMap.maps.indexOf(map), 1);\n\n        if (isRootCacheKeyMap(map.parentMap)) {\n            return;\n        }\n\n        this._removeMap(map.parentMap);\n    }\n}\n","import { memoize as lodashMemoize } from 'lodash';\nimport * as shallowEqual from 'shallowequal';\n\nimport { Omit } from '../types';\n\nimport CacheKeyResolver from './cache-key-resolver';\n\nexport interface MemoizeOptions {\n    maxSize?: number;\n    isEqual?(valueA: any, valueB: any): boolean;\n}\n\nexport default function memoize<T extends (...args: any[]) => any>(\n    fn: T,\n    options?: MemoizeOptions\n) {\n    const { maxSize, isEqual } = { maxSize: 0, isEqual: shallowEqual, ...options };\n    const cache = new Map();\n    const resolver = new CacheKeyResolver({\n        maxSize,\n        isEqual,\n        onExpire: key => cache.delete(key),\n    });\n    const memoized = lodashMemoize(fn, (...args) => resolver.getKey(...args));\n\n    memoized.cache = cache;\n\n    return memoized;\n}\n\nexport function memoizeOne<T extends (...args: any[]) => any>(\n    fn: T,\n    options?: Omit<MemoizeOptions, 'maxSize'>\n) {\n    return memoize(fn, { ...options, maxSize: 1 });\n}\n","export enum CheckoutIncludes {\n    AvailableShippingOptions = 'consignments.availableShippingOptions',\n    PhysicalItemsCategoryNames = 'cart.lineItems.physicalItems.categoryNames',\n    DigitalItemsCategoryNames = 'cart.lineItems.digitalItems.categoryNames',\n}\n\nexport default interface CheckoutParams {\n    include?: CheckoutIncludes[];\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\nimport { GooglePayCreator } from '../googlepay';\n\nimport {\n    BraintreeClientCreator,\n    BraintreeDataCollectorCreator,\n    BraintreeHostWindow,\n    BraintreePaypalCheckoutCreator,\n    BraintreePaypalCreator,\n    BraintreeThreeDSecureCreator,\n    BraintreeVisaCheckoutCreator,\n} from './braintree';\n\nexport default class BraintreeScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: BraintreeHostWindow = window\n    ) {}\n\n    loadClient(): Promise<BraintreeClientCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/client.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.client) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.client;\n            });\n    }\n\n    load3DS(): Promise<BraintreeThreeDSecureCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/three-d-secure.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.threeDSecure) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.threeDSecure;\n            });\n    }\n\n    loadDataCollector(): Promise<BraintreeDataCollectorCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/data-collector.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.dataCollector) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.dataCollector;\n            });\n    }\n\n    loadPaypal(): Promise<BraintreePaypalCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypal;\n            });\n    }\n\n    loadPaypalCheckout(): Promise<BraintreePaypalCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/paypal-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.paypalCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.paypalCheckout;\n            });\n    }\n\n    loadVisaCheckout(): Promise<BraintreeVisaCheckoutCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/visa-checkout.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.visaCheckout) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.visaCheckout;\n            });\n    }\n\n    loadGooglePayment(): Promise<GooglePayCreator> {\n        return this._scriptLoader\n            .loadScript('//js.braintreegateway.com/web/3.37.0/js/google-payment.min.js')\n            .then(() => {\n                if (!this._window.braintree || !this._window.braintree.googlePayment) {\n                    throw new StandardError();\n                }\n\n                return this._window.braintree.googlePayment;\n            });\n    }\n}\n","import { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport {\n    BraintreeClient,\n    BraintreeDataCollector,\n    BraintreeModule,\n    BraintreePaypal,\n    BraintreePaypalCheckout,\n    BraintreeThreeDSecure,\n    BraintreeVisaCheckout,\n    GooglePayBraintreeSDK,\n} from './braintree';\nimport BraintreeScriptLoader from './braintree-script-loader';\n\nexport default class BraintreeSDKCreator {\n    private _client?: Promise<BraintreeClient>;\n    private _3ds?: Promise<BraintreeThreeDSecure>;\n    private _paypal?: Promise<BraintreePaypal>;\n    private _paypalCheckout?: Promise<BraintreePaypalCheckout>;\n    private _clientToken?: string;\n    private _visaCheckout?: Promise<BraintreeVisaCheckout>;\n    private _dataCollectors: {\n        default?: Promise<BraintreeDataCollector>;\n        paypal?: Promise<BraintreeDataCollector>;\n    } = {};\n    private _googlePay?: Promise<GooglePayBraintreeSDK>;\n\n    constructor(\n        private _braintreeScriptLoader: BraintreeScriptLoader\n    ) {}\n\n    initialize(clientToken: string) {\n        this._clientToken = clientToken;\n    }\n\n    getClient(): Promise<BraintreeClient> {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!this._client) {\n            this._client = this._braintreeScriptLoader.loadClient()\n                .then(client => client.create({ authorization: this._clientToken }));\n        }\n\n        return this._client;\n    }\n\n    getPaypal(): Promise<BraintreePaypal> {\n        if (!this._paypal) {\n            this._paypal = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypal(),\n            ])\n            .then(([client, paypal]) => paypal.create({ client }));\n        }\n\n        return this._paypal;\n    }\n\n    getPaypalCheckout(): Promise<BraintreePaypalCheckout> {\n        if (!this._paypalCheckout) {\n            this._paypalCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadPaypalCheckout(),\n            ])\n                .then(([client, paypalCheckout]) => paypalCheckout.create({ client }));\n        }\n\n        return this._paypalCheckout;\n    }\n\n    get3DS(): Promise<BraintreeThreeDSecure> {\n        if (!this._3ds) {\n            this._3ds = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.load3DS(),\n            ])\n            .then(([client, threeDSecure]) => threeDSecure.create({ client }));\n        }\n\n        return this._3ds;\n    }\n\n    getDataCollector(options?: { paypal: boolean }): Promise<BraintreeDataCollector> {\n        const cacheKey = options && options.paypal ? 'paypal' : 'default';\n        let cached = this._dataCollectors[cacheKey];\n\n        if (!cached) {\n            cached = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadDataCollector(),\n            ])\n            .then(([client, dataCollector]) => dataCollector.create({ client, kount: true, ...options }))\n            .catch(error => {\n                if (error && error.code === 'DATA_COLLECTOR_KOUNT_NOT_ENABLED') {\n                    return { deviceData: undefined, teardown: () => Promise.resolve() };\n                }\n\n                throw error;\n            });\n\n            this._dataCollectors[cacheKey] = cached;\n        }\n\n        return cached;\n    }\n\n    getVisaCheckout(): Promise<BraintreeVisaCheckout> {\n        if (!this._visaCheckout) {\n            this._visaCheckout = Promise.all([\n                this.getClient(),\n                this._braintreeScriptLoader.loadVisaCheckout(),\n            ])\n            .then(([client, visaCheckout]) => visaCheckout.create({ client }));\n        }\n\n        return this._visaCheckout;\n    }\n\n    getGooglePaymentComponent(): Promise<GooglePayBraintreeSDK> {\n        if (!this._googlePay) {\n            this._googlePay = Promise.all ([\n                this.getClient(),\n                this._braintreeScriptLoader.loadGooglePayment(),\n            ])\n                .then(([client, googlePay]) => googlePay.create({ client }));\n        }\n\n        return this._googlePay;\n    }\n\n    teardown(): Promise<void> {\n        return Promise.all([\n            this._teardown(this._3ds),\n            this._teardown(this._dataCollectors.default),\n            this._teardown(this._dataCollectors.paypal),\n            this._teardown(this._visaCheckout),\n            this._teardown(this._googlePay),\n        ]).then(() => {\n            this._3ds = undefined;\n            this._visaCheckout = undefined;\n            this._dataCollectors = {};\n            this._googlePay = undefined;\n        });\n    }\n\n    private _teardown(module?: Promise<BraintreeModule>) {\n        return module ?\n            module.then(mod => mod.teardown()) :\n            Promise.resolve();\n    }\n}\n","import { AmountTransformer } from '../common/utility';\n\nimport InternalLineItem from './internal-line-item';\nimport { DigitalItem, LineItem } from './line-item';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalLineItem(\n    item: LineItem,\n    type: string,\n    decimalPlaces: number,\n    idKey: keyof LineItem = 'id'\n): InternalLineItem {\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: (item[idKey] as string | number),\n        imageUrl: item.imageUrl,\n        amount: item.extendedListPrice,\n        amountAfterDiscount: item.extendedSalePrice,\n        discount: item.discountAmount,\n        integerAmount: amountTransformer.toInteger(item.extendedListPrice),\n        integerAmountAfterDiscount: amountTransformer.toInteger(item.extendedSalePrice),\n        integerDiscount: amountTransformer.toInteger(item.discountAmount),\n        downloadsPageUrl: (item as DigitalItem).downloadPageUrl,\n        name: item.name,\n        quantity: item.quantity,\n        brand: item.brand,\n        categoryNames: item.categoryNames,\n        variantId: item.variantId,\n        productId: item.productId,\n        attributes: (item.options || []).map(option => ({\n            name: option.name,\n            value: option.value,\n        })),\n        addedByPromotion: item.addedByPromotion,\n        type,\n    };\n}\n","module.exports = require(\"iframe-resizer\");","import StandardError from './standard-error';\n\nexport enum NotInitializedErrorType {\n    CheckoutButtonNotInitialized,\n    CustomerNotInitialized,\n    PaymentNotInitialized,\n    ShippingNotInitialized,\n    SpamProtectionNotInitialized,\n}\n\nexport default class NotInitializedError extends StandardError {\n    constructor(\n        public subtype: NotInitializedErrorType\n    ) {\n        super(getErrorMessage(subtype));\n\n        this.name = 'NotInitializedError';\n        this.type = 'not_initialized';\n    }\n}\n\nfunction getErrorMessage(type: NotInitializedErrorType): string {\n    switch (type) {\n    case NotInitializedErrorType.CustomerNotInitialized:\n        return 'Unable to proceed because the customer step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.PaymentNotInitialized:\n        return 'Unable to proceed because the payment step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.ShippingNotInitialized:\n        return 'Unable to proceed because the shipping step of checkout has not been initialized.';\n\n    case NotInitializedErrorType.SpamProtectionNotInitialized:\n        return 'Unable to proceed because the checkout spam protection has not been initialized.';\n\n    default:\n        return 'Unable to proceed because the required component has not been initialized.';\n    }\n}\n","import { createErrorAction, Action } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable } from 'rxjs';\n\nexport default function throwErrorAction<TPayload, TMeta, TType extends string>(\n    type: TType,\n    error?: TPayload,\n    meta?: TMeta\n): Observable<Action<TPayload, TMeta, TType>> {\n    if (isErrorAction(error)) {\n        return concat(of(error), throwError(createErrorAction(type, error.payload, meta)));\n    }\n\n    return throwError(createErrorAction(type, error, meta));\n}\n\nfunction isErrorAction(action: any): action is Action {\n    return action && action.type && action.error;\n}\n","export default class AmountTransformer {\n    constructor(private _decimalPlaces: number) {}\n\n    toInteger(amount: number): number {\n        return Math.round(amount * Math.pow(10, this._decimalPlaces));\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nimport Url from './url';\n\nexport default function parseUrl(url: string): Url {\n    if (!/^(https?:)?\\/\\//.test(url)) {\n        throw new InvalidArgumentError('The provided URL must be absolute.');\n    }\n\n    // new URL() is not supported in IE11, use anchor tag instead\n    const anchor = document.createElement('a');\n\n    anchor.href = url;\n\n    return {\n        hash: anchor.hash,\n        hostname: anchor.hostname,\n        href: anchor.href,\n        origin: anchor.origin,\n        pathname: anchor.pathname,\n        port: anchor.port,\n        protocol: anchor.protocol,\n        search: anchor.search,\n    };\n}\n","import cacheAction from './cache-action';\nimport isActionOptions from './is-action-options';\n\nexport default function cachableActionDecorator<TMethod extends (...args: any[]) => any>(\n    target: object,\n    key: string,\n    descriptor: TypedPropertyDescriptor<TMethod>\n): TypedPropertyDescriptor<TMethod> {\n    const memoizedMethods = new WeakMap<object, { [key: string]: TMethod }>();\n\n    function decorateMethod(this: object, method: TMethod): TMethod {\n        return ((...args: any[]) => {\n            const lastArg = args[args.length - 1];\n            const { useCache } = isActionOptions(lastArg) ? lastArg : { useCache: false };\n\n            if (!useCache) {\n                return method.call(this, ...args);\n            }\n\n            const instanceMethods = memoizedMethods.get(this) || {};\n\n            if (!memoizedMethods.get(this)) {\n                memoizedMethods.set(this, instanceMethods);\n            }\n\n            if (!instanceMethods[key]) {\n                instanceMethods[key] = cacheAction(method);\n            }\n\n            return instanceMethods[key].call(this, ...args);\n        }) as TMethod;\n    }\n\n    return {\n        get() {\n            if (typeof descriptor.value !== 'function') {\n                return descriptor.value;\n            }\n\n            const value = decorateMethod.call(this, descriptor.value);\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n    };\n}\n","import ActionOptions from './action-options';\n\nexport default function isActionOptions(param: any): param is ActionOptions {\n    return param && typeof param.useCache === 'boolean';\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { memoize } from 'lodash';\nimport { from, Observable } from 'rxjs';\nimport { shareReplay } from 'rxjs/operators';\n\nimport { CacheKeyResolver } from '../utility';\n\nexport default function cacheAction<TFunction extends CreateActionFn>(\n    fn: TFunction\n): TFunction {\n    const resolver = new CacheKeyResolver();\n\n    function decoratedFn(this: any, ...args: any[]) {\n        const action = fn.call(this, ...args);\n\n        if (action instanceof Observable) {\n            return from(action).pipe(shareReplay());\n        }\n\n        if (typeof action === 'function') {\n            return memoize(store => from(action(store)).pipe(shareReplay()));\n        }\n\n        return action;\n    }\n\n    return memoize(\n        decoratedFn as TFunction,\n        (...args) => resolver.getKey(...args)\n    );\n}\n\ntype CreateActionFn = (...args: any[]) => Observable<Action> | ThunkAction<Action> | Action;\n","/**\n * Decorates a class or a method by binding all its prototype methods or itself\n * to the calling instance respectively.\n */\nexport default function bindDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T>;\nexport default function bindDecorator<T extends Constructor<object>>(target: T): T;\nexport default function bindDecorator(target: any, key?: any, descriptor?: any): any {\n    if (!key || !descriptor) {\n        return bindClassDecorator(target);\n    }\n\n    return bindMethodDecorator(target, key, descriptor);\n}\n\n/**\n * Decorates a class by binding all its prototype methods to the calling\n * instance.\n */\nexport function bindClassDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                bindMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\n/**\n * Decorates a method by binding it to the calling instance.\n */\nexport function bindMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let method: T = descriptor.value;\n\n    return {\n        get() {\n            const boundMethod = method.bind(this);\n\n            Object.defineProperty(this, key, {\n                ...descriptor,\n                value: boundMethod,\n            });\n\n            return boundMethod;\n        },\n        set(value) {\n            method = value;\n        },\n    };\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type Method = (...args: any[]) => any;\n","import { isPlainObject, omitBy, transform } from 'lodash';\n\nexport default function omitDeep(object: any, predicate: (value: any, key: string) => boolean): any {\n    if (Array.isArray(object)) {\n        return object.map(value => omitDeep(value, predicate));\n    }\n\n    if (isPlainObject(object)) {\n        return transform(omitBy(object, predicate), (result, value, key) => {\n            result[key] = omitDeep(value, predicate);\n        }, {});\n    }\n\n    return object;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, merge, of, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { ConfigActionCreator } from '../config';\n\nimport { CheckoutRequestBody } from './checkout';\nimport { CheckoutActionType, LoadCheckoutAction, UpdateCheckoutAction } from './checkout-actions';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport default class CheckoutActionCreator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender,\n        private _configActionCreator: ConfigActionCreator\n    ) {}\n\n    loadCheckout(id: string, options?: RequestOptions): Observable<LoadCheckoutAction> {\n        return concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            merge(\n                this._configActionCreator.loadConfig({ ...options, useCache: true }),\n                defer(() => this._checkoutRequestSender.loadCheckout(id, options)\n                    .then(({ body }) => createAction(CheckoutActionType.LoadCheckoutSucceeded, body)))\n            )\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    loadDefaultCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CheckoutActionType.LoadCheckoutRequested)),\n            this._configActionCreator.loadConfig(),\n            defer(async () => {\n                const state = store.getState();\n                const context = state.config.getContextConfig();\n\n                if (!context || !context.checkoutId) {\n                    throw new StandardError('Unable to load checkout: no cart is available');\n                }\n\n                const { body } = await this._checkoutRequestSender.loadCheckout(context.checkoutId, options);\n\n                return createAction(CheckoutActionType.LoadCheckoutSucceeded, body);\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(CheckoutActionType.LoadCheckoutFailed, error))\n        );\n    }\n\n    updateCheckout(\n        body: CheckoutRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateCheckoutAction, InternalCheckoutSelectors> {\n        return store => new Observable(observer => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CheckoutActionType.UpdateCheckoutRequested));\n\n            this._checkoutRequestSender.updateCheckout(checkout.id, body, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CheckoutActionType.UpdateCheckoutSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CheckoutActionType.UpdateCheckoutFailed, response));\n                });\n        });\n    }\n\n    loadCurrentCheckout(options?: RequestOptions): ThunkAction<LoadCheckoutAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            return this.loadCheckout(checkout.id, options);\n        };\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { Cart } from '../cart';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { CheckoutIncludes } from '../checkout/checkout-params';\nimport CheckoutRequestSender from '../checkout/checkout-request-sender';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport Consignment, {\n    ConsignmentsRequestBody,\n    ConsignmentAssignmentRequestBody,\n    ConsignmentCreateRequestBody,\n    ConsignmentLineItem,\n    ConsignmentRequestBody,\n    ConsignmentShippingOptionRequestBody,\n    ConsignmentUpdateRequestBody\n} from './consignment';\nimport {\n    ConsignmentActionType,\n    CreateConsignmentsAction,\n    DeleteConsignmentAction,\n    LoadShippingOptionsAction,\n    UpdateConsignmentAction,\n    UpdateShippingOptionAction,\n} from './consignment-actions';\nimport ConsignmentRequestSender from './consignment-request-sender';\n\nexport default class ConsignmentActionCreator {\n    constructor(\n        private _consignmentRequestSender: ConsignmentRequestSender,\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    unassignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            if (!existingConsignment) {\n                throw new InvalidArgumentError('No consignment found for the specified address');\n            }\n\n            const lineItems = this._removeLineItems(\n                consignment.lineItems,\n                existingConsignment,\n                state.cart.getCart()\n            );\n\n            if (!lineItems.length) {\n                return this.deleteConsignment(existingConsignment.id, options)(store);\n            }\n\n            return this.updateConsignment({\n                id: existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems,\n            }, options)(store);\n        };\n    }\n\n    assignItemsByAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const state = store.getState();\n            const existingConsignment = state.consignments.getConsignmentByAddress(consignment.shippingAddress);\n\n            return this._createOrUpdateConsignment({\n                id: existingConsignment && existingConsignment.id,\n                shippingAddress: consignment.shippingAddress,\n                lineItems: this._addLineItems(\n                    consignment.lineItems,\n                    existingConsignment,\n                    state.cart.getCart()\n                ),\n            }, options)(store);\n        };\n    }\n\n    selectShippingOption(\n        id: string,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n            const consignments = state.consignments.getConsignments();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (!consignments || !consignments.length) {\n                throw new MissingDataError(MissingDataErrorType.MissingConsignments);\n            }\n\n            const consignmentUpdateBody = {\n                id: consignments[0].id,\n                shippingOptionId: id,\n            };\n\n            const consignmentMeta = {\n                id: consignments[0].id,\n            };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignmentUpdateBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(\n                        ConsignmentActionType.UpdateShippingOptionSucceeded,\n                        body,\n                        consignmentMeta\n                    ));\n\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(\n                        ConsignmentActionType.UpdateShippingOptionFailed,\n                        response,\n                        consignmentMeta\n                    ));\n                });\n        });\n    }\n\n    loadShippingOptions(options?: RequestOptions): ThunkAction<LoadShippingOptionsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadShippingOptionsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.LoadShippingOptionsRequested));\n\n            this._checkoutRequestSender.loadCheckout(checkout.id, {\n                ...options,\n                params: {\n                    include: [CheckoutIncludes.AvailableShippingOptions],\n                },\n            })\n            .then(({ body }) => {\n                observer.next(createAction(ConsignmentActionType.LoadShippingOptionsSucceeded, body));\n                observer.complete();\n            })\n            .catch(response => {\n                observer.error(createErrorAction(ConsignmentActionType.LoadShippingOptionsFailed, response));\n            });\n        });\n    }\n\n    updateAddress(\n        address: AddressRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction | UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => {\n            const consignment = this._getConsignmentRequestBody(address, store);\n            const consignments = store.getState().consignments.getConsignments();\n\n            if (consignments && consignments.length) {\n                (consignment as ConsignmentUpdateRequestBody).id = consignments[0].id;\n            }\n\n            return this._createOrUpdateConsignment(consignment, options)(store);\n        };\n    }\n\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CreateConsignmentsAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.CreateConsignmentsRequested));\n\n            this._consignmentRequestSender.createConsignments(checkout.id, consignments, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.CreateConsignmentsSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.CreateConsignmentsFailed, response));\n                });\n        });\n    }\n\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): ThunkAction<DeleteConsignmentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteConsignmentAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n            const consignmentMeta = { id: consignmentId };\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(ConsignmentActionType.DeleteConsignmentRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.deleteConsignment(checkout.id, consignmentId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.DeleteConsignmentSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.DeleteConsignmentFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    updateShippingOption(\n        consignment: ConsignmentShippingOptionRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateShippingOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateShippingOptionAction>) => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const consignmentMeta = { id: consignment.id };\n\n            observer.next(createAction(ConsignmentActionType.UpdateShippingOptionRequested, undefined, consignmentMeta));\n\n            this._consignmentRequestSender.updateConsignment(checkout.id, consignment, options)\n                .then(({ body }) => {\n                    observer.next(createAction(ConsignmentActionType.UpdateShippingOptionSucceeded, body, consignmentMeta));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConsignmentActionType.UpdateShippingOptionFailed, response, consignmentMeta));\n                });\n        });\n    }\n\n    private _createOrUpdateConsignment(\n        consignment: ConsignmentCreateRequestBody | ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): ThunkAction<UpdateConsignmentAction | CreateConsignmentsAction, InternalCheckoutSelectors> {\n        return store => {\n            const checkout = store.getState().checkout.getCheckout();\n\n            if (!checkout || !checkout.id) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            if (this._isUpdateConsignmentRequest(consignment)) {\n                return this.updateConsignment(consignment, options)(store);\n            }\n\n            return this.createConsignments([consignment], options)(store);\n        };\n    }\n\n    private _getConsignmentRequestBody(\n        shippingAddress: AddressRequestBody,\n        store: ReadableCheckoutStore\n    ): ConsignmentRequestBody {\n        const state = store.getState();\n        const cart = state.cart.getCart();\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return {\n            shippingAddress,\n            lineItems: (cart.lineItems && cart.lineItems.physicalItems || [])\n                .map(item => ({\n                    itemId: item.id,\n                    quantity: item.quantity,\n                })\n            ),\n        };\n    }\n\n    private _removeLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return this._hydrateLineItems(consignment.lineItemIds, cart).map(existingItem => {\n            const sharedItem = lineItems.find(lineItem => lineItem.itemId === existingItem.itemId);\n\n            return {\n                ...existingItem,\n                quantity: sharedItem ? (existingItem.quantity - sharedItem.quantity) : existingItem.quantity,\n            };\n        }).filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _addLineItems(\n        lineItems: ConsignmentLineItem[],\n        consignment?: Consignment,\n        cart?: Cart\n    ): ConsignmentLineItem[] {\n        if (!consignment) {\n            return lineItems;\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        return lineItems\n            .concat(this._hydrateLineItems(consignment.lineItemIds, cart))\n            .filter(lineItem => lineItem.quantity > 0);\n    }\n\n    private _hydrateLineItems(lineItemIds: string[], cart: Cart): ConsignmentLineItem[] {\n        return lineItemIds.map(itemId => {\n            const item = cart.lineItems.physicalItems.find(lineItem => lineItem.id === itemId );\n\n            return {\n                itemId,\n                quantity: item ? item.quantity : 0,\n            };\n        });\n    }\n\n    private _isUpdateConsignmentRequest(\n        request: ConsignmentRequestBody\n    ): request is ConsignmentUpdateRequestBody {\n        const updateRequest = request as ConsignmentUpdateRequestBody;\n\n        return !!updateRequest.id;\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { ConsignmentsRequestBody, ConsignmentUpdateRequestBody } from './consignment';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'consignments.availableShippingOptions',\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class ConsignmentRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createConsignments(checkoutId: string, consignments: ConsignmentsRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: consignments, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateConsignment(checkoutId: string, consignment: ConsignmentUpdateRequestBody, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = consignment;\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n\n    deleteConsignment(checkoutId: string, consignmentId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/consignments/${consignmentId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, { params: DEFAULT_PARAMS, headers, timeout });\n    }\n}\n","export default function getCallbackUrl(origin: string): string {\n    return `${window.location.origin}/checkout.php?action=set_external_checkout&provider=masterpass&gateway=stripe&origin=${origin}`;\n}\n","import InternalShippingOption from './internal-shipping-option';\nimport ShippingOption from './shipping-option';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalShippingOption(option: ShippingOption, isSelected: boolean): InternalShippingOption {\n    return {\n        description: option.description,\n        module: option.type,\n        price: option.cost,\n        id: option.id,\n        selected: isSelected,\n        isRecommended: option.isRecommended,\n        imageUrl: option.imageUrl,\n        transitTime: option.transitTime,\n    };\n}\n","export default function isPrivate(key: string): boolean {\n    return `${key}`.indexOf('$$') === 0 || `${key}`.indexOf('_') === 0;\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class UnrecoverableError extends RequestError {\n    constructor(response: Response, message?: string) {\n        super(response, {\n            message: message || 'An unexpected error has occurred. The checkout process cannot continue as a result.',\n        });\n\n        this.name = 'UnrecoverableError';\n        this.type = 'unrecoverable';\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromInternalErrorResponse(\n    response: Response<InternalErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || body.detail || body.title || message,\n        errors: errors.length ?\n            errors.map(message => ({ code: body.type, message })) :\n            [{ code: body.type, message: body.detail || body.title }],\n    });\n}\n\nfunction joinErrors(errors: string[]): string | undefined {\n    return errors.reduce((result: string[], error) => {\n        if (error) {\n            return [...result, error];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { PaymentErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromPaymentErrorResponse(\n    response: Response<PaymentErrorResponseBody>,\n    message?: string\n): RequestError {\n    const { body } = response;\n    const { errors = [] } = body;\n\n    return new RequestError(response, {\n        message: joinErrors(errors) || message,\n        errors,\n    });\n}\n\nfunction joinErrors(errors: Array<{ code: string; message?: string }>): string | undefined {\n    if (!Array.isArray(errors)) {\n        return;\n    }\n\n    return errors.reduce((result: string[], error) => {\n        if (error && error.message) {\n            return [...result, error.message];\n        }\n\n        return result;\n    }, []).join(' ');\n}\n","import { Response } from '@bigcommerce/request-sender';\nimport { last } from 'lodash';\n\nimport ErrorResponseBody, {\n    InternalErrorResponseBody,\n    StorefrontErrorResponseBody\n} from './error-response-body';\nimport { RequestError, TimeoutError } from './errors';\nimport mapFromInternalErrorResponse from './errors/map-from-internal-error-response';\nimport mapFromPaymentErrorResponse from './errors/map-from-payment-error-response';\nimport mapFromStorefrontErrorResponse from './errors/map-from-storefront-error-response';\n\nexport default class RequestErrorFactory {\n    private _factoryMethods: { [key: string]: ErrorFactoryMethod } = {};\n\n    constructor() {\n        this.register('default', (response, message) => new RequestError(response, { message }));\n        this.register('internal', (response, message) => mapFromInternalErrorResponse(response, message));\n        this.register('storefront', (response, message) => mapFromStorefrontErrorResponse(response, message));\n        this.register('payment', (response, message) => mapFromPaymentErrorResponse(response, message));\n        this.register('timeout', response => new TimeoutError(response));\n    }\n\n    register(type: string, factoryMethod: ErrorFactoryMethod): void {\n        this._factoryMethods[type] = factoryMethod;\n    }\n\n    createError(response: Response, message?: string): RequestError {\n        const factoryMethod = this._factoryMethods[this._getType(response)] || this._factoryMethods.default;\n\n        return factoryMethod(response, message);\n    }\n\n    private _getType(response: Response<ErrorResponseBody>): string {\n        if (response.status === 0) {\n            return 'timeout';\n        }\n\n        if (this._isStorefrontErrorResponseBody(response.body)) {\n            return 'storefront';\n        }\n\n        if (this._isInternalErrorResponseBody(response.body)) {\n            const internalType = last(response.body.type.split('/'));\n\n            return internalType && this._factoryMethods[internalType] ?\n                internalType :\n                'internal';\n        }\n\n        const error = last(response.body && response.body.errors);\n\n        if (error && error.code && this._factoryMethods[error.code]) {\n            return error.code;\n        }\n\n        return 'payment';\n    }\n\n    private _isStorefrontErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is StorefrontErrorResponseBody {\n        const storefrontErrorResponse = errorResponse as StorefrontErrorResponseBody;\n\n        return !this._isInternalErrorResponseBody(errorResponse) &&\n            typeof storefrontErrorResponse.title === 'string' &&\n            typeof storefrontErrorResponse.type === 'string' &&\n            typeof storefrontErrorResponse.status === 'number' &&\n            typeof storefrontErrorResponse.detail === 'string';\n    }\n\n    private _isInternalErrorResponseBody(\n        errorResponse: ErrorResponseBody\n    ): errorResponse is InternalErrorResponseBody {\n        const internalErrorResponse = errorResponse as InternalErrorResponseBody;\n\n        return typeof internalErrorResponse.errors === 'object' &&\n            typeof internalErrorResponse.title === 'string' &&\n            typeof internalErrorResponse.type === 'string' &&\n            typeof internalErrorResponse.status === 'number';\n    }\n}\n\nexport type ErrorFactoryMethod = (response: Response, message?: string) => RequestError;\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { StorefrontErrorResponseBody } from '../error-response-body';\n\nimport RequestError from './request-error';\n\nexport default function mapFromStorefrontErrorResponse(\n    response: Response<StorefrontErrorResponseBody>,\n    message?: string\n): RequestError<StorefrontErrorResponseBody> {\n    const { body } = response;\n\n    return new RequestError(response, {\n        message: message || body.detail || body.title,\n        errors: [{\n            code: body.code || body.type,\n            message: body.detail || body.title,\n        }],\n    });\n}\n","import { Action } from '@bigcommerce/data-store';\n\nimport { omitDeep } from '../utility';\n\nimport { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default function clearErrorReducer<TState extends { [key: string]: any }, TAction extends Action>(\n    state: TState,\n    action: TAction\n): TState | undefined {\n    if (isClearErrorAction(action)) {\n        return omitDeep(state, value => value === action.payload);\n    }\n\n    return state;\n}\n\nfunction isClearErrorAction(action: Action): action is ClearErrorAction {\n    return action.type === ErrorActionType.ClearError;\n}\n","import isEqual from './is-equal';\n\n/**\n * Replace the current value with a new value if the former is different to the\n * latter.\n */\nexport default function replace<T>(currentValue: T, newValue?: T): T {\n    if (newValue === undefined || isEqual(currentValue, newValue)) {\n        return currentValue;\n    }\n\n    return newValue;\n}\n","import isEqual from './is-equal';\n\n/**\n * Set a new value to an object under a key if the new value is different to the\n * current value of the key.\n */\nexport default function objectSet<T extends { [key: string]: any }, K extends keyof T>(\n    object: T | undefined,\n    key: K,\n    value: T[K]\n): T {\n    if (object && object.hasOwnProperty(key) && isEqual(object[key], value)) {\n        return object;\n    }\n\n    return {\n        ...object as any,\n        [key]: value,\n    };\n}\n","import BillingAddress from './billing-address';\n\nexport default interface BillingAddressState {\n    data?: BillingAddress;\n    errors: BillingAddressErrorsState;\n    statuses: BillingAddressStatusesState;\n}\n\nexport interface BillingAddressErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n    continueAsGuestError?: Error;\n}\n\nexport interface BillingAddressStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n    isContinuingAsGuest?: boolean;\n}\n\nexport const DEFAULT_STATE: BillingAddressState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet, replace } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport BillingAddress from './billing-address';\nimport { BillingAddressAction, BillingAddressActionType } from './billing-address-actions';\nimport BillingAddressState, { BillingAddressErrorsState, BillingAddressStatusesState, DEFAULT_STATE } from './billing-address-state';\n\nexport default function billingAddressReducer(\n    state: BillingAddressState = DEFAULT_STATE,\n    action: Action\n): BillingAddressState {\n    const reducer = combineReducers<BillingAddressState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: BillingAddress | undefined,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddress | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return replace(data, action.payload && action.payload.billingAddress);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: BillingAddressErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(errors, 'continueAsGuestError', undefined);\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n        return objectSet(errors, 'continueAsGuestError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: BillingAddressStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | BillingAddressAction | OrderAction\n): BillingAddressStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case BillingAddressActionType.UpdateBillingAddressRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case BillingAddressActionType.UpdateBillingAddressFailed:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    case BillingAddressActionType.ContinueAsGuestRequested:\n        return objectSet(statuses, 'isContinuingAsGuest', true);\n\n    case BillingAddressActionType.ContinueAsGuestFailed:\n    case BillingAddressActionType.ContinueAsGuestSucceeded:\n        return objectSet(statuses, 'isContinuingAsGuest', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { isPlainObject as lodashIsPlainObject } from 'lodash';\n\n// We need this wrapper because Lodash's version doesn't act as a type guard\nexport default function isPlainObject(value: any): value is object {\n    return lodashIsPlainObject(value);\n}\n","import { isArray } from 'lodash';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\nimport replace from './replace';\n\nexport interface ArrayReplaceOptions {\n    matchObject(objectA: any, objectB: any): boolean;\n}\n\nexport default function arrayReplace<T>(currentArray: T[] | undefined, newArray: T[], options?: ArrayReplaceOptions): T[];\nexport default function arrayReplace<T>(currentArray: T[], newArray?: T[], options?: ArrayReplaceOptions): undefined;\nexport default function arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined;\nexport default function arrayReplace<T>(currentArray?: T[], newArray?: T[], options?: ArrayReplaceOptions): T[] | undefined {\n    const { matchObject = (a: any, b: any) => a.id === b.id } = options || {};\n\n    // Return the new array if the current array does not exist\n    if (!currentArray) {\n        return newArray;\n    }\n\n    // If the new array does not exist, or the current array is strictly equal\n    // to the new array, exit early and return the current array so that the\n    // object reference doesn't change\n    if (!newArray || currentArray === newArray) {\n        return currentArray;\n    }\n\n    // Otherwise, try to replace the items of the current array with the new\n    // array. If the item from the two arrays are the same, keep the current\n    // one. Do it recursively until all arrays are replaced.\n    let sameAsCurrentCount = 0;\n    let sameAsNewCount = 0;\n\n    const countSameAsReplaced = <T>(replacedValue: T, currentValue: T, newValue: T): T => {\n        sameAsCurrentCount += replacedValue === currentValue ? 1 : 0;\n        sameAsNewCount += replacedValue === newValue ? 1 : 0;\n\n        return replacedValue;\n    };\n\n    const result = newArray.map((newItem, index) => {\n        const currentItem = currentArray && currentArray[index];\n\n        if (isPlainObject(currentItem) && isPlainObject(newItem)) {\n            if (matchObject(currentItem, newItem)) {\n                return countSameAsReplaced(\n                    objectMerge(currentItem, newItem),\n                    currentItem,\n                    newItem\n                );\n            }\n\n            return countSameAsReplaced(\n                replace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        if (isArray(currentItem) && isArray(newItem)) {\n            return countSameAsReplaced(\n                arrayReplace(currentItem, newItem),\n                currentItem,\n                newItem\n            );\n        }\n\n        return countSameAsReplaced(\n            replace(currentItem, newItem),\n            currentItem,\n            newItem\n        );\n    }) as T[];\n\n    // If all items in the result are identical to the current array, and the\n    // current array and the new array have the same size, simply return the\n    // current array instead of the result.\n    if (sameAsCurrentCount === newArray.length && (currentArray && currentArray.length === newArray.length)) {\n        return currentArray;\n    }\n\n    // If all items in the result are identical to the new array, simply return\n    // the new array.\n    if (sameAsNewCount === newArray.length) {\n        return newArray;\n    }\n\n    return result;\n}\n","import { isArray } from 'lodash';\n\nimport arrayReplace from './array-replace';\nimport isPlainObject from './is-plain-object';\nimport objectSet from './object-set';\n\nexport default function objectMerge<T extends object>(currentObject: T, newObject?: Partial<T>): T;\nexport default function objectMerge<T extends object>(currentObject: T | undefined, newObject: Partial<T>): Partial<T>;\nexport default function objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | undefined;\nexport default function objectMerge<T extends object>(currentObject?: T, newObject?: Partial<T>): T | Partial<T> | undefined {\n    if (!currentObject) {\n        return newObject;\n    }\n\n    // If the new object does not exist but the current object does, or the new\n    // object is strictly equal to the current object, return the current object\n    if (!newObject || currentObject === newObject) {\n        return currentObject;\n    }\n\n    // If both objects exist, but some values might be different, perform a merge.\n    // Retain values that are equal and only replace them with the new values if\n    // they are different.\n    return (Object.keys(newObject) as Array<keyof T>)\n        .reduce((result, key) => {\n            const currentValue = result[key];\n            const newValue = newObject[key];\n\n            if (isPlainObject(currentValue) && isPlainObject(newValue)) {\n                return objectSet(result, key, objectMerge(currentValue, newValue));\n            }\n\n            if (isArray(currentValue) && isArray(newValue)) {\n                return objectSet(result, key, arrayReplace(currentValue, newValue) as any);\n            }\n\n            return objectSet(result, key, newValue as any);\n        }, currentObject);\n}\n","import Cart from './cart';\n\nexport default interface CartState {\n    data?: Cart;\n    errors: CartErrorsState;\n    statuses: CartStatusesState;\n}\n\nexport interface CartErrorsState {\n    loadError?: Error;\n}\n\nexport interface CartStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CartState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing/billing-address-actions';\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType } from '../coupon/coupon-actions';\nimport { GiftCertificateAction, GiftCertificateActionType } from '../coupon/gift-certificate-actions';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport Cart from './cart';\nimport CartState, { CartErrorsState, CartStatusesState, DEFAULT_STATE } from './cart-state';\n\nexport default function cartReducer(\n    state: CartState = DEFAULT_STATE,\n    action: Action\n): CartState {\n    const reducer = combineReducers<CartState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Cart | undefined,\n    action: BillingAddressAction | CheckoutAction | ConsignmentAction | CouponAction | GiftCertificateAction\n): Cart | undefined {\n    switch (action.type) {\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectMerge(data, action.payload && action.payload.cart);\n\n    default:\n        return data;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CartStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction\n): CartStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n\nfunction errorsReducer(\n    errors: CartErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction\n): CartErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n","import { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonState {\n    data: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonDataState | undefined\n    };\n    errors: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonErrorsState | undefined\n    };\n    statuses: {\n        [key in CheckoutButtonMethodType]?: CheckoutButtonStatusesState | undefined\n    };\n}\n\nexport interface CheckoutButtonDataState {\n    initializedContainers: {\n        [key: string]: boolean;\n    };\n}\n\nexport interface CheckoutButtonErrorsState {\n    initializeError?: Error;\n    deinitializeError?: Error;\n}\n\nexport interface CheckoutButtonStatusesState {\n    isInitializing?: boolean;\n    isDeinitializing?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutButtonState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { CheckoutButtonAction, CheckoutButtonActionType } from './checkout-button-actions';\nimport CheckoutButtonState, { CheckoutButtonDataState, CheckoutButtonErrorsState, CheckoutButtonStatusesState, DEFAULT_STATE } from './checkout-button-state';\n\nconst DEFAULT_DATA_STATE: CheckoutButtonDataState = { initializedContainers: {} };\nconst DEFAULT_ERROR_STATE: CheckoutButtonErrorsState = {};\nconst DEFAULT_STATUS_STATE: CheckoutButtonStatusesState = {};\n\nexport default function checkoutButtonReducer(\n    state: CheckoutButtonState = DEFAULT_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<CheckoutButtonState>({\n        data: combineReducers({\n            [action.meta.methodId]: dataReducer,\n        }),\n        errors: combineReducers({\n            [action.meta.methodId]: errorsReducer,\n        }),\n        statuses: combineReducers({\n            [action.meta.methodId]: statusesReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutButtonDataState = DEFAULT_DATA_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonDataState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        if (!action.meta || !action.meta.containerId) {\n            return data;\n        }\n\n        return objectMerge(data, {\n            initializedContainers: {\n                [action.meta.containerId]: true,\n            },\n        });\n\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(data, 'initializedContainers', {});\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CheckoutButtonErrorsState = DEFAULT_ERROR_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonErrorsState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return objectSet(errors, 'initializeError', undefined);\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n        return objectSet(errors, 'initializeError', action.payload);\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(errors, 'deinitializeError', undefined);\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n        return objectSet(errors, 'deinitializeError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutButtonStatusesState = DEFAULT_STATUS_STATE,\n    action: CheckoutButtonAction\n): CheckoutButtonStatusesState {\n    switch (action.type) {\n    case CheckoutButtonActionType.InitializeButtonRequested:\n        return objectSet(statuses, 'isInitializing', true);\n\n    case CheckoutButtonActionType.InitializeButtonFailed:\n    case CheckoutButtonActionType.InitializeButtonSucceeded:\n        return objectSet(statuses, 'isInitializing', false);\n\n    case CheckoutButtonActionType.DeinitializeButtonRequested:\n        return objectSet(statuses, 'isDeinitializing', true);\n\n    case CheckoutButtonActionType.DeinitializeButtonFailed:\n    case CheckoutButtonActionType.DeinitializeButtonSucceeded:\n        return objectSet(statuses, 'isDeinitializing', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Config from './config';\n\nexport default interface ConfigState {\n    data?: Config;\n    meta?: ConfigMetaState;\n    errors: ConfigErrorsState;\n    statuses: ConfigStatusesState;\n}\n\nexport interface ConfigMetaState {\n    externalSource?: string;\n}\n\nexport interface ConfigErrorsState {\n    loadError?: Error;\n}\n\nexport interface ConfigStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ConfigState = {\n    meta: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport Config from './config';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\nimport ConfigState, { ConfigErrorsState, ConfigStatusesState, DEFAULT_STATE } from './config-state';\n\nexport default function configReducer(\n    state: ConfigState = DEFAULT_STATE,\n    action: Action\n): ConfigState {\n    const reducer = combineReducers<ConfigState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Config | undefined,\n    action: LoadConfigAction\n): Config | undefined {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConfigErrorsState = DEFAULT_STATE.errors,\n    action: LoadConfigAction\n): ConfigErrorsState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case ConfigActionType.LoadConfigFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConfigStatusesState = DEFAULT_STATE.statuses,\n    action: LoadConfigAction\n): ConfigStatusesState {\n    switch (action.type) {\n    case ConfigActionType.LoadConfigRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ConfigActionType.LoadConfigSucceeded:\n    case ConfigActionType.LoadConfigFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport Coupon from './coupon';\n\nexport default interface CouponState {\n    data?: Coupon[];\n    errors: CouponErrorsState;\n    statuses: CouponStatusesState;\n}\n\nexport interface CouponErrorsState {\n    applyCouponError?: RequestError<StorefrontErrorResponseBody>;\n    removeCouponError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface CouponStatusesState {\n    isApplyingCoupon?: boolean;\n    isRemovingCoupon?: boolean;\n}\n\nexport const DEFAULT_STATE: CouponState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { OrderAction, OrderActionType } from '../order';\n\nimport Coupon from './coupon';\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport CouponState, { CouponErrorsState, CouponStatusesState, DEFAULT_STATE } from './coupon-state';\n\nexport default function couponReducer(\n    state: CouponState = DEFAULT_STATE,\n    action: Action\n): CouponState {\n    const reducer = combineReducers<CouponState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Coupon[] | undefined,\n    action: CouponAction | CheckoutAction | OrderAction\n): Coupon[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case OrderActionType.LoadOrderSucceeded:\n        return arrayReplace(data, action.payload && action.payload.coupons);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CouponErrorsState = {},\n    action: CouponAction\n): CouponErrorsState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n    case CouponActionType.ApplyCouponSucceeded:\n        return objectSet(errors, 'applyCouponError', undefined);\n\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(errors, 'applyCouponError', action.payload);\n\n    case CouponActionType.RemoveCouponRequested:\n    case CouponActionType.RemoveCouponSucceeded:\n        return objectSet(errors, 'removeCouponError', undefined);\n\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(errors, 'removeCouponError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CouponStatusesState = {},\n    action: CouponAction\n): CouponStatusesState {\n    switch (action.type) {\n    case CouponActionType.ApplyCouponRequested:\n        return objectSet(statuses, 'isApplyingCoupon', true);\n\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.ApplyCouponFailed:\n        return objectSet(statuses, 'isApplyingCoupon', false);\n\n    case CouponActionType.RemoveCouponRequested:\n        return objectSet(statuses, 'isRemovingCoupon', true);\n\n    case CouponActionType.RemoveCouponSucceeded:\n    case CouponActionType.RemoveCouponFailed:\n        return objectSet(statuses, 'isRemovingCoupon', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nimport GiftCertificate from './gift-certificate';\n\nexport default interface GiftCertificateState {\n    data?: GiftCertificate[];\n    errors: GiftCertificateErrorsState;\n    statuses: GiftCertificateStatusesState;\n}\n\nexport interface GiftCertificateErrorsState {\n    applyGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n    removeGiftCertificateError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface GiftCertificateStatusesState {\n    isApplyingGiftCertificate?: boolean;\n    isRemovingGiftCertificate?: boolean;\n}\n\nexport const DEFAULT_STATE: GiftCertificateState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping/consignment-actions';\n\nimport { CouponAction, CouponActionType } from './coupon-actions';\nimport GiftCertificate from './gift-certificate';\nimport { GiftCertificateAction, GiftCertificateActionType } from './gift-certificate-actions';\nimport GiftCertificateState, { DEFAULT_STATE, GiftCertificateErrorsState, GiftCertificateStatusesState } from './gift-certificate-state';\n\nexport default function giftCertificateReducer(\n    state: GiftCertificateState = DEFAULT_STATE,\n    action: Action\n): GiftCertificateState {\n    const reducer = combineReducers<GiftCertificateState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: GiftCertificate[] | undefined,\n    action: CheckoutAction | GiftCertificateAction | ConsignmentAction | CouponAction\n): GiftCertificate[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return arrayReplace(data, action.payload && action.payload.giftCertificates);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: GiftCertificateErrorsState = DEFAULT_STATE.errors,\n    action: GiftCertificateAction\n): GiftCertificateErrorsState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n        return objectSet(errors, 'applyGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(errors, 'applyGiftCertificateError', action.payload);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectSet(errors, 'removeGiftCertificateError', undefined);\n\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(errors, 'removeGiftCertificateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: GiftCertificateStatusesState = DEFAULT_STATE.statuses,\n    action: GiftCertificateAction\n): GiftCertificateStatusesState {\n    switch (action.type) {\n    case GiftCertificateActionType.ApplyGiftCertificateRequested:\n        return objectSet(statuses, 'isApplyingGiftCertificate', true);\n\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateFailed:\n        return objectSet(statuses, 'isApplyingGiftCertificate', false);\n\n    case GiftCertificateActionType.RemoveGiftCertificateRequested:\n        return objectSet(statuses, 'isRemovingGiftCertificate', true);\n\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateFailed:\n        return objectSet(statuses, 'isRemovingGiftCertificate', false);\n\n    default:\n        return statuses;\n    }\n}\n","import Customer from './customer';\n\nexport default interface CustomerState {\n    data?: Customer;\n}\n\nexport const DEFAULT_STATE: CustomerState = {};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { objectMerge } from '../common/utility';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default function customerReducer(\n    state: CustomerState = DEFAULT_STATE,\n    action: CheckoutAction\n): CustomerState {\n    const reducer = combineReducers<CustomerState, CheckoutAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Customer | undefined,\n    action: CheckoutAction\n): Customer | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectMerge(data, action.payload && action.payload.customer);\n\n    default:\n        return data;\n    }\n}\n","export default interface CustomerStrategyState {\n    data: CustomerStrategyDataState;\n    errors: CustomerStrategyErrorsState;\n    statuses: CustomerStrategyStatusesState;\n}\n\nexport interface CustomerStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface CustomerStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    signInError?: Error;\n    signInMethodId?: string;\n    signOutError?: Error;\n    signOutMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface CustomerStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isSigningIn?: boolean;\n    isSigningOut?: boolean;\n    signInMethodId?: string;\n    signOutMethodId?: string;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: CustomerStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { CustomerStrategyAction, CustomerStrategyActionType } from './customer-strategy-actions';\nimport CustomerStrategyState, { CustomerStrategyDataState, CustomerStrategyErrorsState, CustomerStrategyStatusesState, DEFAULT_STATE } from './customer-strategy-state';\n\nexport default function customerStrategyReducer(\n    state: CustomerStrategyState = DEFAULT_STATE,\n    action: Action\n): CustomerStrategyState {\n    const reducer = combineReducers<CustomerStrategyState, CustomerStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CustomerStrategyDataState = DEFAULT_STATE.data,\n    action: CustomerStrategyAction\n): CustomerStrategyDataState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: CustomerStrategyErrorsState = DEFAULT_STATE.errors,\n    action: CustomerStrategyAction\n): CustomerStrategyErrorsState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignInRequested:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return objectMerge(errors, {\n            signInError: undefined,\n            signInMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignInFailed:\n        return objectMerge(errors, {\n            signInError: action.payload,\n            signInMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignOutRequested:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return objectMerge(errors, {\n            signOutError: undefined,\n            signOutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignOutFailed:\n        return objectMerge(errors, {\n            signOutError: action.payload,\n            signOutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CustomerStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: CustomerStrategyAction\n): CustomerStrategyStatusesState {\n    switch (action.type) {\n    case CustomerStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.InitializeFailed:\n    case CustomerStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.DeinitializeFailed:\n    case CustomerStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignInRequested:\n        return objectMerge(statuses, {\n            isSigningIn: true,\n            signInMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignInFailed:\n    case CustomerStrategyActionType.SignInSucceeded:\n        return objectMerge(statuses, {\n            isSigningIn: false,\n            signInMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.SignOutRequested:\n        return objectMerge(statuses, {\n            isSigningOut: true,\n            signOutMethodId: action.meta && action.meta.methodId,\n        });\n\n    case CustomerStrategyActionType.SignOutFailed:\n    case CustomerStrategyActionType.SignOutSucceeded:\n        return objectMerge(statuses, {\n            isSigningOut: false,\n            signOutMethodId: undefined,\n        });\n\n    case CustomerStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n         });\n\n    case CustomerStrategyActionType.WidgetInteractionFinished:\n    case CustomerStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n         });\n\n    default:\n        return statuses;\n    }\n}\n","import Country from './country';\n\nexport default interface CountryState {\n    data?: Country[];\n    errors: CountryErrorsState;\n    statuses: CountryStatusesState;\n}\n\nexport interface CountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface CountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: CountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\n\nimport Country from './country';\nimport { CountryActionType, LoadCountriesAction } from './country-actions';\nimport CountryState, { CountryErrorsState, CountryStatusesState, DEFAULT_STATE } from './country-state';\n\nexport default function countryReducer(\n    state: CountryState = DEFAULT_STATE,\n    action: Action\n): CountryState {\n    const reducer = combineReducers<CountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesSucceeded:\n        return arrayReplace(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadCountriesAction\n): CountryErrorsState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n    case CountryActionType.LoadCountriesSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CountryActionType.LoadCountriesFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadCountriesAction\n): CountryStatusesState {\n    switch (action.type) {\n    case CountryActionType.LoadCountriesRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CountryActionType.LoadCountriesSucceeded:\n    case CountryActionType.LoadCountriesFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport { InternalOrderMeta, InternalOrderPayment } from './internal-order';\nimport Order from './order';\n\nexport default interface OrderState {\n    data?: OrderDataState;\n    meta?: OrderMetaState;\n    errors: OrderErrorsState;\n    statuses: OrderStatusesState;\n}\n\nexport type OrderDataState = Omit<Order, 'billingAddress' | 'coupons'>;\n\nexport interface OrderMetaState extends InternalOrderMeta {\n    token?: string;\n    orderToken?: string;\n    callbackUrl?: string;\n    payment?: InternalOrderPayment;\n    spamProtectionToken?: string;\n}\n\nexport interface OrderErrorsState {\n    loadError?: Error;\n    submitError?: Error;\n    finalizeError?: Error;\n}\n\nexport interface OrderStatusesState {\n    isLoading?: boolean;\n    isSubmitting?: boolean;\n    isFinalizing?: boolean;\n}\n\nexport const DEFAULT_STATE: OrderState = {\n    errors: {},\n    meta: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport { OrderAction, OrderActionType } from './order-actions';\nimport OrderState, { DEFAULT_STATE, OrderDataState, OrderErrorsState, OrderMetaState, OrderStatusesState } from './order-state';\nimport { SpamProtectionAction, SpamProtectionActionType } from './spam-protection';\n\nexport default function orderReducer(\n    state: OrderState = DEFAULT_STATE,\n    action: Action\n): OrderState {\n    const reducer = combineReducers<OrderState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: OrderDataState | undefined,\n    action: OrderAction\n): OrderDataState | undefined {\n    switch (action.type) {\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n        return objectMerge(data, omit(action.payload, ['billingAddress', 'coupons'])) as OrderDataState;\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: OrderMetaState | undefined,\n    action: OrderAction | SpamProtectionAction\n): OrderMetaState | undefined {\n    switch (action.type) {\n    case OrderActionType.FinalizeOrderSucceeded:\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectMerge(meta, {\n            ...action.meta,\n            callbackUrl: action.payload && action.payload.order.callbackUrl,\n            orderToken: action.payload && action.payload.order.token,\n            payment: action.payload && action.payload.order && action.payload.order.payment,\n        });\n\n    case SpamProtectionActionType.Completed:\n        return objectSet(meta, 'spamProtectionToken', action.payload);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: OrderErrorsState = DEFAULT_STATE.errors,\n    action: OrderAction\n): OrderErrorsState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: OrderStatusesState = DEFAULT_STATE.statuses,\n    action: OrderAction\n): OrderStatusesState {\n    switch (action.type) {\n    case OrderActionType.LoadOrderRequested:\n    case OrderActionType.LoadOrderPaymentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case OrderActionType.LoadOrderSucceeded:\n    case OrderActionType.LoadOrderFailed:\n    case OrderActionType.LoadOrderPaymentsSucceeded:\n    case OrderActionType.LoadOrderPaymentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { PaymentAction, PaymentActionType } from './payment-actions';\nimport PaymentResponseBody from './payment-response-body';\nimport PaymentState from './payment-state';\n\nexport default function paymentReducer(state: PaymentState = {}, action: PaymentAction): PaymentState {\n    const reducer = combineReducers<PaymentState, PaymentAction>({\n        data: dataReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(data: PaymentResponseBody | undefined, action: PaymentAction): PaymentResponseBody | undefined {\n    switch (action.type) {\n    case PaymentActionType.SubmitPaymentSucceeded:\n        return action.payload;\n\n    default:\n        return data;\n    }\n}\n","import PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\n\nexport default interface PaymentMethodState {\n    data?: PaymentMethod[];\n    meta?: PaymentMethodMeta;\n    errors: PaymentMethodErrorsState;\n    statuses: PaymentMethodStatusesState;\n}\n\nexport interface PaymentMethodErrorsState {\n    loadMethodId?: string;\n    loadError?: Error;\n    loadMethodError?: Error;\n}\n\nexport interface PaymentMethodStatusesState {\n    loadMethodId?: string;\n    isLoading?: boolean;\n    isLoadingMethod?: boolean;\n}\n\nexport const DEFAULT_STATE: PaymentMethodState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, mergeOrPush, objectMerge, objectSet } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport { PaymentMethodAction, PaymentMethodActionType } from './payment-method-actions';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE, PaymentMethodErrorsState, PaymentMethodStatusesState } from './payment-method-state';\n\nexport default function paymentMethodReducer(\n    state: PaymentMethodState = DEFAULT_STATE,\n    action: Action\n): PaymentMethodState {\n    const reducer = combineReducers<PaymentMethodState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentMethod[] | undefined,\n    action: PaymentMethodAction\n): PaymentMethod[] | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return mergeOrPush(data || [], action.payload, action.payload && {\n            id: action.payload.id,\n            gateway: action.payload.gateway,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return arrayReplace(data, action.payload, {\n            matchObject: (methodA, methodB) => (\n                methodA.id === methodB.id && methodA.gateway === methodB.gateway\n            ),\n        });\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: PaymentMethodMeta | undefined,\n    action: PaymentMethodAction\n): PaymentMethodMeta | undefined {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return objectMerge(meta, action.meta);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: PaymentMethodErrorsState = DEFAULT_STATE.errors,\n    action: PaymentMethodAction\n): PaymentMethodErrorsState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n        return objectMerge(errors, {\n            loadMethodId: undefined,\n            loadMethodError: undefined,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return objectMerge(errors, {\n            loadMethodId: action.meta.methodId,\n            loadMethodError: action.payload,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentMethodStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentMethodAction\n): PaymentMethodStatusesState {\n    switch (action.type) {\n    case PaymentMethodActionType.LoadPaymentMethodsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case PaymentMethodActionType.LoadPaymentMethodsSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case PaymentMethodActionType.LoadPaymentMethodRequested:\n        return objectMerge(statuses, {\n            isLoadingMethod: true,\n            loadMethodId: action.meta.methodId,\n        });\n\n    case PaymentMethodActionType.LoadPaymentMethodSucceeded:\n    case PaymentMethodActionType.LoadPaymentMethodFailed:\n        return objectMerge(statuses, {\n            isLoadingMethod: false,\n            loadMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { findIndex, pick, pickBy } from 'lodash';\n\nimport { PartialDeep } from '../types';\n\nimport isPlainObject from './is-plain-object';\nimport objectMerge from './object-merge';\n\n/**\n * Push an item to an array if it doesn't exist in the array. Otherwise, merge\n * with the existing item in the array. This function always returns a new array.\n */\nexport default function mergeOrPush<T>(\n    array: T[],\n    item?: T,\n    predicate?: ((item: T) => boolean) | PartialDeep<T>\n): T[] {\n    if (!item) {\n        return array;\n    }\n\n    const defaultPredicate = pick(item, 'id');\n    const index = findIndex(array, typeof predicate === 'object' ? pickBy(predicate) : (predicate || defaultPredicate));\n    const newArray = [...array];\n\n    if (index === -1) {\n        newArray.push(item);\n    } else {\n        const existingItem = array[index];\n\n        newArray[index] = isPlainObject(existingItem) && isPlainObject(item) ?\n            objectMerge(existingItem, item) :\n            item;\n    }\n\n    return newArray;\n}\n","export default interface PaymentStrategyState {\n    data: PaymentStrategyDataState;\n    errors: PaymentStrategyErrorsState;\n    statuses: PaymentStrategyStatusesState;\n}\n\nexport interface PaymentStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface PaymentStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    executeError?: Error;\n    executeMethodId?: string;\n    finalizeError?: Error;\n    finalizeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    widgetInteractionError?: Error;\n    widgetInteractionMethodId?: string;\n}\n\nexport interface PaymentStrategyStatusesState {\n    deinitializeMethodId?: string;\n    executeMethodId?: string;\n    finalizeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isExecuting?: boolean;\n    isFinalizing?: boolean;\n    isInitializing?: boolean;\n    isWidgetInteracting?: boolean;\n    widgetInteractionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: PaymentStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { PaymentStrategyAction, PaymentStrategyActionType } from './payment-strategy-actions';\nimport PaymentStrategyState, { DEFAULT_STATE, PaymentStrategyDataState, PaymentStrategyErrorsState, PaymentStrategyStatusesState } from './payment-strategy-state';\n\nexport default function paymentStrategyReducer(\n    state: PaymentStrategyState = DEFAULT_STATE,\n    action: Action\n): PaymentStrategyState {\n    const reducer = combineReducers<PaymentStrategyState, PaymentStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: PaymentStrategyDataState = DEFAULT_STATE.data,\n    action: PaymentStrategyAction\n): PaymentStrategyDataState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: PaymentStrategyErrorsState = DEFAULT_STATE.errors,\n    action: PaymentStrategyAction\n): PaymentStrategyErrorsState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.ExecuteRequested:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return objectMerge(errors, {\n            executeError: undefined,\n            executeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.ExecuteFailed:\n        return objectMerge(errors, {\n            executeError: action.payload,\n            executeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.FinalizeRequested:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return objectMerge(errors, {\n            finalizeError: undefined,\n            finalizeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.FinalizeFailed:\n        return objectMerge(errors, {\n            finalizeError: action.payload,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n        return objectMerge(errors, {\n            widgetInteractionError: undefined,\n            widgetInteractionMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(errors, {\n            widgetInteractionError: action.payload,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: PaymentStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: PaymentStrategyAction\n): PaymentStrategyStatusesState {\n    switch (action.type) {\n    case PaymentStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.InitializeFailed:\n    case PaymentStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.DeinitializeFailed:\n    case PaymentStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.ExecuteRequested:\n        return objectMerge(statuses, {\n            isExecuting: true,\n            executeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.ExecuteFailed:\n    case PaymentStrategyActionType.ExecuteSucceeded:\n        return objectMerge(statuses, {\n            isExecuting: false,\n            executeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.FinalizeRequested:\n        return objectMerge(statuses, {\n            isFinalizing: true,\n            finalizeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.FinalizeFailed:\n    case PaymentStrategyActionType.FinalizeSucceeded:\n        return objectMerge(statuses, {\n            isFinalizing: false,\n            finalizeMethodId: undefined,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionStarted:\n        return objectMerge(statuses, {\n            isWidgetInteracting: true,\n            widgetInteractionMethodId: action.meta.methodId,\n        });\n\n    case PaymentStrategyActionType.WidgetInteractionFinished:\n    case PaymentStrategyActionType.WidgetInteractionFailed:\n        return objectMerge(statuses, {\n            isWidgetInteracting: false,\n            widgetInteractionMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import Instrument, { VaultAccessToken } from './instrument';\n\nexport default interface InstrumentState {\n    data?: Instrument[];\n    meta?: InstrumentMeta;\n    errors: InstrumentErrorState;\n    statuses: InstrumentStatusState;\n}\n\nexport interface InstrumentErrorState {\n    deleteError?: Error;\n    failedInstrument?: string;\n    loadError?: Error;\n    vaultError?: Error;\n}\n\nexport interface InstrumentStatusState {\n    isDeleting?: boolean;\n    isLoading?: boolean;\n    isVaulting?: boolean;\n    deletingInstrument?: string;\n}\n\nexport type InstrumentMeta = VaultAccessToken;\n\nexport const DEFAULT_STATE = {\n    data: [],\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../../common/utility';\n\nimport Instrument from './instrument';\nimport { InstrumentAction, InstrumentActionType } from './instrument-actions';\nimport InstrumentState, { DEFAULT_STATE, InstrumentErrorState, InstrumentMeta, InstrumentStatusState } from './instrument-state';\n\nexport default function instrumentReducer(\n    state: InstrumentState = DEFAULT_STATE,\n    action: Action\n): InstrumentState {\n    const reducer = combineReducers<InstrumentState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        meta: metaReducer,\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Instrument[] = DEFAULT_STATE.data,\n    action: InstrumentAction\n): Instrument[] {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return arrayReplace(data, action.payload && action.payload.vaultedInstruments || []);\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return arrayReplace(data, data.filter(instrument =>\n            instrument.bigpayToken !== (action.meta && action.meta.instrumentId)\n        ));\n\n    default:\n        return data;\n    }\n}\n\nfunction metaReducer(\n    meta: InstrumentMeta | undefined,\n    action: InstrumentAction\n): InstrumentMeta | undefined {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return objectMerge(meta, action.meta);\n\n    default:\n        return meta;\n    }\n}\n\nfunction errorsReducer(\n    errors: InstrumentErrorState = DEFAULT_STATE.errors,\n    action: InstrumentAction\n): InstrumentErrorState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n        return objectMerge(errors, {\n            deleteError: undefined,\n            failedInstrument: undefined,\n        });\n\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return objectMerge(errors, {\n            deleteError: action.payload,\n            failedInstrument: action.meta.instrumentId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: InstrumentStatusState = DEFAULT_STATE.statuses,\n    action: InstrumentAction\n): InstrumentStatusState {\n    switch (action.type) {\n    case InstrumentActionType.LoadInstrumentsRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case InstrumentActionType.DeleteInstrumentRequested:\n        return objectMerge(statuses, {\n            isDeleting: true,\n            deletingInstrument: action.meta.instrumentId,\n        });\n\n    case InstrumentActionType.LoadInstrumentsSucceeded:\n    case InstrumentActionType.LoadInstrumentsFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case InstrumentActionType.DeleteInstrumentSucceeded:\n    case InstrumentActionType.DeleteInstrumentFailed:\n        return objectMerge(statuses, {\n            isDeleting: false,\n            deletingInstrument: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { AmazonPayRemoteCheckout } from './methods';\n\nexport default interface RemoteCheckoutState {\n    data: RemoteCheckoutStateData;\n}\n\nexport interface RemoteCheckoutStateData {\n    amazon?: AmazonPayRemoteCheckout;\n}\n\nexport const DEFAULT_STATE: RemoteCheckoutState = {\n    data: {},\n};\n","import { combineReducers } from '@bigcommerce/data-store';\n\nimport { objectMerge, objectSet } from '../common/utility';\n\nimport RemoteCheckout from './remote-checkout';\nimport { RemoteCheckoutAction, RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutState, { DEFAULT_STATE, RemoteCheckoutStateData } from './remote-checkout-state';\n\nexport default function remoteCheckoutReducer(\n    state: RemoteCheckoutState = DEFAULT_STATE,\n    action: RemoteCheckoutAction\n): RemoteCheckoutState {\n    if (!action.meta || !action.meta.methodId) {\n        return state;\n    }\n\n    const reducer = combineReducers<RemoteCheckoutState>({\n        data: combineReducers<RemoteCheckoutStateData>({\n            [action.meta.methodId]: dataReducer,\n        }),\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: RemoteCheckout,\n    action: RemoteCheckoutAction\n): RemoteCheckout {\n    switch (action.type) {\n    case RemoteCheckoutActionType.InitializeRemoteBillingSucceeded:\n        return objectSet(data, 'billing' as any, action.payload && action.payload.billing);\n\n    case RemoteCheckoutActionType.InitializeRemoteShippingSucceeded:\n        return objectSet(data, 'shipping' as any, action.payload && action.payload.shipping);\n\n    case RemoteCheckoutActionType.LoadRemoteSettingsSucceeded:\n        return objectSet(data, 'settings', action.payload);\n\n    case RemoteCheckoutActionType.UpdateRemoteCheckout:\n        return objectMerge(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n","import Consignment from './consignment';\n\nexport default interface ConsignmentState {\n    data?: Consignment[];\n    errors: ConsignmentErrorsState;\n    statuses: ConsignmentStatusesState;\n}\n\nexport interface ConsignmentErrorsState {\n    loadError?: Error;\n    loadShippingOptionsError?: Error;\n    createError?: Error;\n    updateError: { [key: string]: Error | undefined };\n    deleteError: { [key: string]: Error | undefined };\n    updateShippingOptionError: { [key: string]: Error | undefined };\n}\n\nexport interface ConsignmentStatusesState {\n    isLoading?: boolean;\n    isLoadingShippingOptions?: boolean;\n    isCreating?: boolean;\n    isUpdating: { [key: string]: boolean };\n    isDeleting: { [key: string]: boolean };\n    isUpdatingShippingOption: { [key: string]: boolean };\n}\n\nexport const DEFAULT_STATE: ConsignmentState = {\n    errors: {\n        updateShippingOptionError: {},\n        updateError: {},\n        deleteError: {},\n    },\n    statuses: {\n        isUpdating: {},\n        isUpdatingShippingOption: {},\n        isDeleting: {},\n    },\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { CheckoutAction, CheckoutActionType } from '../checkout';\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType } from '../coupon';\nimport { CustomerAction, CustomerActionType } from '../customer';\n\nimport Consignment from './consignment';\nimport { ConsignmentAction, ConsignmentActionType } from './consignment-actions';\nimport ConsignmentState, { ConsignmentErrorsState, ConsignmentStatusesState, DEFAULT_STATE } from './consignment-state';\n\nexport default function consignmentReducer(\n    state: ConsignmentState = DEFAULT_STATE,\n    action: Action\n): ConsignmentState {\n    const reducer = combineReducers<ConsignmentState, ConsignmentAction | CheckoutAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Consignment[] | undefined,\n    action: ConsignmentAction | CheckoutAction | CouponAction | CustomerAction\n): Consignment[] | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n        return arrayReplace(data, action.payload && action.payload.consignments);\n\n    case CustomerActionType.SignOutCustomerSucceeded:\n        return arrayReplace(data, []);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ConsignmentErrorsState = DEFAULT_STATE.errors,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n        return objectSet(errors, 'createError', undefined);\n\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return objectSet(errors, 'createError', action.payload);\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(errors, {\n                deleteError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                deleteError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateShippingOptionError: {\n                    [action.meta.id]: undefined,\n                },\n            });\n        }\n\n        return errors;\n\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            return objectMerge(errors, {\n                updateShippingOptionError: {\n                    [action.meta.id]: action.payload,\n                },\n            });\n        }\n\n        return errors;\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ConsignmentStatusesState = DEFAULT_STATE.statuses,\n    action: ConsignmentAction | CheckoutAction\n): ConsignmentStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ConsignmentActionType.LoadShippingOptionsRequested:\n        return objectSet(statuses, 'isLoadingShippingOptions', true);\n\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    case ConsignmentActionType.LoadShippingOptionsSucceeded:\n    case ConsignmentActionType.LoadShippingOptionsFailed:\n        return objectSet(statuses, 'isLoadingShippingOptions', false);\n\n    case ConsignmentActionType.CreateConsignmentsRequested:\n        return objectSet(statuses, 'isCreating', true);\n\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.CreateConsignmentsFailed:\n        return objectSet(statuses, 'isCreating', false);\n\n    case ConsignmentActionType.UpdateConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdating: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.UpdateConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdating: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isDeleting: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isDeleting: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionRequested:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdatingShippingOption: {\n                    [action.meta.id]: true,\n                },\n            });\n        }\n\n        return statuses;\n\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionFailed:\n        if (action.meta) {\n            return objectMerge(statuses, {\n                isUpdatingShippingOption: {\n                    [action.meta.id]: false,\n                },\n            });\n        }\n\n        return statuses;\n\n    default:\n        return statuses;\n    }\n}\n","import { Country } from '../geography';\n\nexport default interface ShippingCountryState {\n    data?: Country[];\n    errors: ShippingCountryErrorsState;\n    statuses: ShippingCountryStatusesState;\n}\n\nexport interface ShippingCountryErrorsState {\n    loadError?: Error;\n}\n\nexport interface ShippingCountryStatusesState {\n    isLoading?: boolean;\n}\n\nexport const DEFAULT_STATE: ShippingCountryState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { arrayReplace, objectSet } from '../common/utility';\nimport { Country } from '../geography';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryState, { DEFAULT_STATE, ShippingCountryErrorsState, ShippingCountryStatusesState } from './shipping-country-state';\n\nexport default function shippingCountryReducer(\n    state: ShippingCountryState = DEFAULT_STATE,\n    action: Action\n): ShippingCountryState {\n    const reducer = combineReducers<ShippingCountryState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: Country[] | undefined,\n    action: LoadShippingCountriesAction\n): Country[] | undefined {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return arrayReplace(data, action.payload);\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: ShippingCountryErrorsState = DEFAULT_STATE.errors,\n    action: LoadShippingCountriesAction\n): ShippingCountryErrorsState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingCountryStatusesState = DEFAULT_STATE.statuses,\n    action: LoadShippingCountriesAction\n): ShippingCountryStatusesState {\n    switch (action.type) {\n    case ShippingCountryActionType.LoadShippingCountriesRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case ShippingCountryActionType.LoadShippingCountriesSucceeded:\n    case ShippingCountryActionType.LoadShippingCountriesFailed:\n        return objectSet(statuses, 'isLoading', false);\n\n    default:\n        return statuses;\n    }\n}\n","export default interface ShippingStrategyState {\n    data: ShippingStrategyDataState;\n    errors: ShippingStrategyErrorsState;\n    statuses: ShippingStrategyStatusesState;\n}\n\nexport interface ShippingStrategyDataState {\n    [key: string]: {\n        isInitialized: boolean;\n    };\n}\n\nexport interface ShippingStrategyErrorsState {\n    deinitializeError?: Error;\n    deinitializeMethodId?: string;\n    initializeError?: Error;\n    initializeMethodId?: string;\n    updateAddressError?: Error;\n    updateAddressMethodId?: string;\n    selectOptionError?: Error;\n    selectOptionMethodId?: string;\n}\n\nexport interface ShippingStrategyStatusesState {\n    deinitializeMethodId?: string;\n    initializeMethodId?: string;\n    isDeinitializing?: boolean;\n    isInitializing?: boolean;\n    isUpdatingAddress?: boolean;\n    isSelectingOption?: boolean;\n    updateAddressMethodId?: string;\n    selectOptionMethodId?: string;\n}\n\nexport const DEFAULT_STATE: ShippingStrategyState = {\n    data: {},\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge } from '../common/utility';\n\nimport { ShippingStrategyAction, ShippingStrategyActionType } from './shipping-strategy-actions';\nimport ShippingStrategyState, { DEFAULT_STATE, ShippingStrategyDataState, ShippingStrategyErrorsState, ShippingStrategyStatusesState } from './shipping-strategy-state';\n\nexport default function shippingStrategyReducer(\n    state: ShippingStrategyState = DEFAULT_STATE,\n    action: Action\n): ShippingStrategyState {\n    const reducer = combineReducers<ShippingStrategyState, ShippingStrategyAction>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: ShippingStrategyDataState = DEFAULT_STATE.data,\n    action: ShippingStrategyAction\n): ShippingStrategyDataState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: true,\n            },\n        });\n\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(data, {\n            [action.meta && action.meta.methodId]: {\n                isInitialized: false,\n            },\n        });\n    }\n\n    return data;\n}\n\nfunction errorsReducer(\n    errors: ShippingStrategyErrorsState = DEFAULT_STATE.errors,\n    action: ShippingStrategyAction\n): ShippingStrategyErrorsState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(errors, {\n            initializeError: undefined,\n            initializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.InitializeFailed:\n        return objectMerge(errors, {\n            initializeError: action.payload,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(errors, {\n            deinitializeError: undefined,\n            deinitializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n        return objectMerge(errors, {\n            deinitializeError: action.payload,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return objectMerge(errors, {\n            updateAddressError: undefined,\n            updateAddressMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n        return objectMerge(errors, {\n            updateAddressError: action.payload,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return objectMerge(errors, {\n            selectOptionError: undefined,\n            selectOptionMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n        return objectMerge(errors, {\n            selectOptionError: action.payload,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        });\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: ShippingStrategyStatusesState = DEFAULT_STATE.statuses,\n    action: ShippingStrategyAction\n): ShippingStrategyStatusesState {\n    switch (action.type) {\n    case ShippingStrategyActionType.InitializeRequested:\n        return objectMerge(statuses, {\n            isInitializing: true,\n            initializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.InitializeFailed:\n    case ShippingStrategyActionType.InitializeSucceeded:\n        return objectMerge(statuses, {\n            isInitializing: false,\n            initializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.DeinitializeRequested:\n        return objectMerge(statuses, {\n            isDeinitializing: true,\n            deinitializeMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.DeinitializeFailed:\n    case ShippingStrategyActionType.DeinitializeSucceeded:\n        return objectMerge(statuses, {\n            isDeinitializing: false,\n            deinitializeMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressRequested:\n        return objectMerge(statuses, {\n            isUpdatingAddress: true,\n            updateAddressMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.UpdateAddressFailed:\n    case ShippingStrategyActionType.UpdateAddressSucceeded:\n        return objectMerge(statuses, {\n            isUpdatingAddress: false,\n            updateAddressMethodId: undefined,\n        });\n\n    case ShippingStrategyActionType.SelectOptionRequested:\n        return objectMerge(statuses, {\n            isSelectingOption: true,\n            selectOptionMethodId: action.meta && action.meta.methodId,\n        });\n\n    case ShippingStrategyActionType.SelectOptionFailed:\n    case ShippingStrategyActionType.SelectOptionSucceeded:\n        return objectMerge(statuses, {\n            isSelectingOption: false,\n            selectOptionMethodId: undefined,\n        });\n\n    default:\n        return statuses;\n    }\n}\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\n\nimport { clearErrorReducer } from '../common/error';\nimport { objectSet } from '../common/utility';\n\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\nimport StoreCreditState, { StoreCreditErrorsState, StoreCreditStatusesState } from './store-credit-state';\n\nconst DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n\nexport default function storeCreditReducer(\n    state: StoreCreditState = DEFAULT_STATE,\n    action: Action\n): StoreCreditState {\n    const reducer = combineReducers<StoreCreditState>({\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction errorsReducer(\n    errors: StoreCreditErrorsState = DEFAULT_STATE.errors,\n    action: StoreCreditAction\n): StoreCreditErrorsState {\n    switch (action.type) {\n    case StoreCreditActionType.ApplyStoreCreditRequested:\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n        return objectSet(errors, 'applyError', undefined);\n\n    case StoreCreditActionType.ApplyStoreCreditFailed:\n        return objectSet(errors, 'applyError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: StoreCreditStatusesState = DEFAULT_STATE.statuses,\n    action: StoreCreditAction\n): StoreCreditStatusesState {\n    switch (action.type) {\n    case StoreCreditActionType.ApplyStoreCreditRequested:\n        return objectSet(statuses, 'isApplying', true);\n\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n    case StoreCreditActionType.ApplyStoreCreditFailed:\n        return objectSet(statuses, 'isApplying', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { Omit } from '../common/types';\n\nimport Checkout from './checkout';\n\nexport default interface CheckoutState {\n    data?: CheckoutDataState;\n    errors: CheckoutErrorsState;\n    statuses: CheckoutStatusesState;\n}\n\nexport type CheckoutDataState = Omit<Checkout, 'billingAddress' | 'cart' | 'consignments' | 'coupons' | 'giftCertificates'>;\n\nexport interface CheckoutErrorsState {\n    loadError?: Error;\n    updateError?: Error;\n}\n\nexport interface CheckoutStatusesState {\n    isLoading?: boolean;\n    isUpdating?: boolean;\n}\n\nexport const DEFAULT_STATE: CheckoutState = {\n    errors: {},\n    statuses: {},\n};\n","import { combineReducers, composeReducers, Action } from '@bigcommerce/data-store';\nimport { omit } from 'lodash';\n\nimport { BillingAddressAction, BillingAddressActionType } from '../billing';\nimport { clearErrorReducer } from '../common/error';\nimport { objectMerge, objectSet } from '../common/utility';\nimport { CouponAction, CouponActionType, GiftCertificateAction, GiftCertificateActionType } from '../coupon';\nimport { OrderAction, OrderActionType } from '../order';\nimport { ConsignmentAction, ConsignmentActionType } from '../shipping';\nimport { StoreCreditAction, StoreCreditActionType } from '../store-credit/store-credit-actions';\n\nimport { CheckoutAction, CheckoutActionType } from './checkout-actions';\nimport CheckoutState, { CheckoutDataState, CheckoutErrorsState, CheckoutStatusesState, DEFAULT_STATE } from './checkout-state';\n\nexport default function checkoutReducer(\n    state: CheckoutState = DEFAULT_STATE,\n    action: Action\n): CheckoutState {\n    const reducer = combineReducers<CheckoutState>({\n        data: dataReducer,\n        errors: composeReducers(errorsReducer, clearErrorReducer),\n        statuses: statusesReducer,\n    });\n\n    return reducer(state, action);\n}\n\nfunction dataReducer(\n    data: CheckoutDataState | undefined,\n    action: CheckoutAction | BillingAddressAction | ConsignmentAction | CouponAction |\n        GiftCertificateAction | OrderAction | StoreCreditAction\n): CheckoutDataState | undefined {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutSucceeded:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n    case StoreCreditActionType.ApplyStoreCreditSucceeded:\n    case BillingAddressActionType.UpdateBillingAddressSucceeded:\n    case CouponActionType.ApplyCouponSucceeded:\n    case CouponActionType.RemoveCouponSucceeded:\n    case ConsignmentActionType.CreateConsignmentsSucceeded:\n    case ConsignmentActionType.UpdateConsignmentSucceeded:\n    case ConsignmentActionType.DeleteConsignmentSucceeded:\n    case ConsignmentActionType.UpdateShippingOptionSucceeded:\n    case GiftCertificateActionType.ApplyGiftCertificateSucceeded:\n    case GiftCertificateActionType.RemoveGiftCertificateSucceeded:\n        return objectMerge(data, omit(action.payload, [\n            'billingAddress',\n            'cart',\n            'consignments',\n            'customer',\n            'coupons',\n            'giftCertificates',\n        ])) as CheckoutDataState;\n\n    case OrderActionType.SubmitOrderSucceeded:\n        return objectSet(data, 'orderId', action.payload && action.payload.order.orderId) ;\n\n    default:\n        return data;\n    }\n}\n\nfunction errorsReducer(\n    errors: CheckoutErrorsState = DEFAULT_STATE.errors,\n    action: CheckoutAction | OrderAction\n): CheckoutErrorsState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(errors, 'loadError', undefined);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n        return objectSet(errors, 'loadError', action.payload);\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return objectSet(errors, 'updateError', undefined);\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n        return objectSet(errors, 'updateError', action.payload);\n\n    default:\n        return errors;\n    }\n}\n\nfunction statusesReducer(\n    statuses: CheckoutStatusesState = DEFAULT_STATE.statuses,\n    action: CheckoutAction | OrderAction\n): CheckoutStatusesState {\n    switch (action.type) {\n    case CheckoutActionType.LoadCheckoutRequested:\n        return objectSet(statuses, 'isLoading', true);\n\n    case CheckoutActionType.LoadCheckoutFailed:\n    case CheckoutActionType.LoadCheckoutSucceeded:\n        return objectSet(statuses, 'isLoading', false);\n\n    case CheckoutActionType.UpdateCheckoutRequested:\n        return objectSet(statuses, 'isUpdating', true);\n\n    case CheckoutActionType.UpdateCheckoutFailed:\n    case CheckoutActionType.UpdateCheckoutSucceeded:\n        return objectSet(statuses, 'isUpdating', false);\n\n    default:\n        return statuses;\n    }\n}\n","import { deepFreeze } from '@bigcommerce/data-store';\n\n// tslint:disable-next-line:ban-types\ntype FunctionProperties<T> = { [K in keyof T]: T[K] extends Function ? T[K] : never };\n\nexport default function createFreezeProxy<T extends object>(target: T): T {\n    return createProxy(target, (target, name) =>\n        (...args: any[]) => deepFreeze(target[name].call(target, ...args))\n    );\n}\n\nexport function createFreezeProxies<T extends { [key: string]: object }>(map: T): T {\n    return Object.keys(map)\n        .reduce((result, key) => {\n            result[key] = createFreezeProxy(map[key]);\n\n            return result;\n        }, {} as T);\n}\n\nfunction createProxy<T extends object>(target: T, trap: (target: FunctionProperties<T>, name: keyof FunctionProperties<T>, proxy: T) => any): T {\n    const proxy = Object.create(target);\n\n    traversePrototypeOf(target, prototype => {\n        Object.getOwnPropertyNames(prototype)\n            .forEach(name => {\n                if (name === 'constructor' || typeof proxy[name] !== 'function' || name.charAt(0) === '_') {\n                    return;\n                }\n\n                proxy[name] = trap(target as FunctionProperties<T>, name as keyof T, proxy);\n            });\n    });\n\n    return proxy;\n}\n\nfunction traversePrototypeOf(target: object, iteratee: (prototype: object) => void): void {\n    let prototype = Object.getPrototypeOf(target);\n\n    while (prototype) {\n        iteratee(prototype);\n\n        prototype = Object.getPrototypeOf(prototype);\n    }\n}\n","import { find } from 'lodash';\n\nimport { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\nimport { ConfigState } from '../config';\nimport { DEFAULT_STATE } from '../config/config-state';\nimport { Country } from '../geography';\n\nimport FormField from './form-field';\n\nexport default interface FormSelector {\n    getShippingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n    getBillingAddressFields(countries: Country[] | undefined, countryCode: string): FormField[];\n}\n\nexport type FormSelectorFactory = (state: ConfigState) => FormSelector;\n\nexport function createFormSelectorFactory(): FormSelectorFactory {\n    const getShippingAddressFields = createSelector(\n        (state: ConfigState) => state.data,\n        config => (countries: Country[] = [], countryCode: string) => {\n            const selectedCountry = find(countries, { code: countryCode });\n            const fields = config ? config.storeConfig.formFields.shippingAddressFields : [];\n\n            return fields.map((field: any) => processField(field, countries, selectedCountry));\n        }\n    );\n\n    const getBillingAddressFields = createSelector(\n        (state: ConfigState) => state.data,\n        config => (countries: Country[] = [], countryCode: string) => {\n            const selectedCountry = find(countries, { code: countryCode });\n            const fields = config ? config.storeConfig.formFields.billingAddressFields : [];\n\n            return fields.map((field: any) => processField(field, countries, selectedCountry));\n        }\n    );\n\n    function processField(field: FormField, countries: Country[], selectedCountry?: Country): FormField {\n        if (field.name === 'countryCode') {\n            return processCountry(field, countries, selectedCountry);\n        }\n\n        if (field.name === 'stateOrProvince') {\n            return processProvince(field, selectedCountry);\n        }\n\n        if (field.name === 'postalCode') {\n            return processsPostCode(field, selectedCountry);\n        }\n\n        return field;\n    }\n\n    function processCountry(field: FormField, countries: Country[] = [], country?: Country): FormField {\n        if (!countries.length) {\n            return field;\n        }\n\n        const { code = '' } = country || {};\n        const items = countries.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            options: { items },\n            default: code,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processProvince(field: FormField, country?: Country): FormField {\n        const { subdivisions = [] } = country || {};\n\n        if (!subdivisions.length) {\n            return {\n                ...field,\n                required: false,\n            };\n        }\n\n        const items = subdivisions.map(({ code, name }: any) => ({\n            value: code,\n            label: name,\n        }));\n\n        return {\n            ...field,\n            name: 'stateOrProvinceCode',\n            options: { items },\n            required: true,\n            type: 'array',\n            fieldType: 'dropdown',\n            itemtype: 'string',\n        };\n    }\n\n    function processsPostCode(field: FormField, country?: Country): FormField {\n        const { hasPostalCodes = [] } = country || {};\n\n        if (hasPostalCodes === undefined) {\n            return field;\n        }\n\n        return { ...field, required: Boolean(hasPostalCodes) };\n    }\n\n    return memoizeOne((\n        state: ConfigState = DEFAULT_STATE\n    ): FormSelector => {\n        return {\n            getShippingAddressFields: getShippingAddressFields(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n        };\n    });\n}\n","import { identity, isEqual, pickBy } from 'lodash';\n\nimport Address from './address';\n\nexport default function isAddressEqual(addressA: Partial<Address>, addressB: Partial<Address>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<Address>): Partial<Address> {\n    return pickBy({\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.address1,\n        address2: address.address2,\n        city: address.city,\n        stateOrProvince: address.stateOrProvince,\n        countryCode: address.countryCode,\n        postalCode: address.postalCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    }, identity);\n}\n","import { find } from 'lodash';\n\nimport { isAddressEqual, AddressRequestBody } from '../address';\nimport { CartSelector, PhysicalItem } from '../cart';\nimport { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport Consignment from './consignment';\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\nimport ShippingOption from './shipping-option';\n\nexport default interface ConsignmentSelector {\n    getConsignments(): Consignment[] | undefined;\n    getConsignmentById(id: string): Consignment | undefined;\n    getConsignmentByAddress(address: AddressRequestBody): Consignment | undefined;\n    getShippingOption(): ShippingOption | undefined;\n    getLoadError(): Error | undefined;\n    getCreateError(): Error | undefined;\n    getLoadShippingOptionsError(): Error | undefined;\n    getUnassignedItems(): PhysicalItem[];\n    getUpdateError(consignmentId?: string): Error | undefined;\n    getDeleteError(consignmentId?: string): Error | undefined;\n    getItemAssignmentError(address: AddressRequestBody): Error | undefined;\n    getUpdateShippingOptionError(consignmentId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingShippingOptions(): boolean;\n    isCreating(): boolean;\n    isUpdating(consignmentId?: string): boolean;\n    isDeleting(consignmentId?: string): boolean;\n    isAssigningItems(address: AddressRequestBody): boolean;\n    isUpdatingShippingOption(consignmentId?: string): boolean;\n}\n\nexport type ConsignmentSelectorFactory = (\n    state: ConsignmentState,\n    cart: CartSelector\n) => ConsignmentSelector;\n\ninterface ConsignmentSelectorDependencies {\n    cart: CartSelector;\n}\n\nexport function createConsignmentSelectorFactory(): ConsignmentSelectorFactory {\n    const getConsignments = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => consignments\n    );\n\n    const getConsignmentById = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => (id: string) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, { id });\n        }\n    );\n\n    const getConsignmentByAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => (address: AddressRequestBody) => {\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return find(consignments, consignment =>\n                isAddressEqual(consignment.shippingAddress, address)\n            );\n        }\n    );\n\n    const getShippingOption = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => {\n            if (consignments && consignments.length) {\n                return consignments[0].selectedShippingOption;\n            }\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: ConsignmentState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const getCreateError = createSelector(\n        (state: ConsignmentState) => state.errors.createError,\n        error => () => error\n    );\n\n    const getLoadShippingOptionsError = createSelector(\n        (state: ConsignmentState) => state.errors.loadShippingOptionsError,\n        error => () => error\n    );\n\n    const getUnassignedItems = createSelector(\n        getConsignments,\n        (_: ConsignmentState, { cart }: ConsignmentSelectorDependencies) => cart.getCart,\n        (getConsignments, getCart) => () => {\n            const cart = getCart();\n\n            if (!cart) {\n                return [];\n            }\n\n            const assignedLineItemIds = (getConsignments() || []).reduce(\n                (itemIds, consignment) => itemIds.concat(consignment.lineItemIds),\n                [] as string[]\n            );\n\n            return (cart.lineItems.physicalItems || []).filter(\n                item => assignedLineItemIds.indexOf(item.id as string) < 0\n            );\n        }\n    );\n\n    const getUpdateError = createSelector(\n        (state: ConsignmentState) => state.errors.updateError,\n        updateError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateError[consignmentId];\n            }\n\n            return find(updateError);\n        }\n    );\n\n    const getDeleteError = createSelector(\n        (state: ConsignmentState) => state.errors.deleteError,\n        deleteError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return deleteError[consignmentId];\n            }\n\n            return find(deleteError);\n        }\n    );\n\n    const getItemAssignmentError = createSelector(\n        getConsignmentByAddress,\n        getUpdateError,\n        getCreateError,\n        (getConsignmentByAddress, getUpdateError, getCreateError) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? getUpdateError(consignment.id) : getCreateError();\n        }\n    );\n\n    const getUpdateShippingOptionError = createSelector(\n        (state: ConsignmentState) => state.errors.updateShippingOptionError,\n        updateShippingOptionError => (consignmentId?: string) => {\n            if (consignmentId) {\n                return updateShippingOptionError[consignmentId];\n            }\n\n            return find(updateShippingOptionError);\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoading,\n        isLoading => () => isLoading === true\n    );\n\n    const isLoadingShippingOptions = createSelector(\n        (state: ConsignmentState) => state.statuses.isLoadingShippingOptions,\n        isLoadingShippingOptions => () => isLoadingShippingOptions === true\n    );\n\n    const isCreating = createSelector(\n        (state: ConsignmentState) => state.statuses.isCreating,\n        isCreating => () => isCreating === true\n    );\n\n    const isUpdating = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdating,\n        isUpdating => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdating[consignmentId] === true;\n            }\n\n            return find(isUpdating) === true;\n        }\n    );\n\n    const isDeleting = createSelector(\n        (state: ConsignmentState) => state.statuses.isDeleting,\n        isDeleting => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isDeleting[consignmentId] === true;\n            }\n\n            return find(isDeleting) === true;\n        }\n    );\n\n    const isAssigningItems = createSelector(\n        getConsignmentByAddress,\n        isUpdating,\n        isCreating,\n        (getConsignmentByAddress, isUpdating, isCreating) => (address: AddressRequestBody) => {\n            const consignment = getConsignmentByAddress(address);\n\n            return consignment ? isUpdating(consignment.id) : isCreating();\n        }\n    );\n\n    const isUpdatingShippingOption = createSelector(\n        (state: ConsignmentState) => state.statuses.isUpdatingShippingOption,\n        isUpdatingShippingOption => (consignmentId?: string) => {\n            if (consignmentId) {\n                return isUpdatingShippingOption[consignmentId] === true;\n            }\n\n            return find(isUpdatingShippingOption) === true;\n        }\n    );\n\n    return memoizeOne((\n        state: ConsignmentState = DEFAULT_STATE,\n        cart: CartSelector\n    ): ConsignmentSelector => {\n        return {\n            getConsignments: getConsignments(state),\n            getConsignmentById: getConsignmentById(state),\n            getConsignmentByAddress: getConsignmentByAddress(state),\n            getShippingOption: getShippingOption(state),\n            getLoadError: getLoadError(state),\n            getCreateError: getCreateError(state),\n            getLoadShippingOptionsError: getLoadShippingOptionsError(state),\n            getUnassignedItems: getUnassignedItems(state, { cart }),\n            getUpdateError: getUpdateError(state),\n            getDeleteError: getDeleteError(state),\n            getItemAssignmentError: getItemAssignmentError(state),\n            getUpdateShippingOptionError: getUpdateShippingOptionError(state),\n            isLoading: isLoading(state),\n            isLoadingShippingOptions: isLoadingShippingOptions(state),\n            isCreating: isCreating(state),\n            isUpdating: isUpdating(state),\n            isDeleting: isDeleting(state),\n            isAssigningItems: isAssigningItems(state),\n            isUpdatingShippingOption: isUpdatingShippingOption(state),\n        };\n    });\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\n\nexport default interface StoreCreditState {\n    errors: StoreCreditErrorsState;\n    statuses: StoreCreditStatusesState;\n}\n\nexport interface StoreCreditErrorsState {\n    applyError?: RequestError<StorefrontErrorResponseBody>;\n}\n\nexport interface StoreCreditStatusesState {\n    isApplying?: boolean;\n}\n\nexport const DEFAULT_STATE: StoreCreditState = {\n    errors: {},\n    statuses: {},\n};\n","import { createBillingAddressSelectorFactory } from '../billing';\nimport { createCartSelectorFactory } from '../cart/cart-selector';\nimport { createCheckoutButtonSelectorFactory } from '../checkout-buttons';\nimport { createFreezeProxies } from '../common/utility';\nimport { createConfigSelectorFactory } from '../config';\nimport { createCouponSelectorFactory, createGiftCertificateSelectorFactory } from '../coupon';\nimport { createCustomerSelectorFactory, createCustomerStrategySelectorFactory } from '../customer';\nimport { createFormSelectorFactory } from '../form';\nimport { createCountrySelectorFactory } from '../geography';\nimport { createOrderSelectorFactory } from '../order';\nimport { createPaymentMethodSelectorFactory, createPaymentSelectorFactory, createPaymentStrategySelectorFactory } from '../payment';\nimport { createInstrumentSelectorFactory } from '../payment/instrument';\nimport { createRemoteCheckoutSelectorFactory } from '../remote-checkout';\nimport { createConsignmentSelectorFactory, createShippingAddressSelectorFactory, createShippingCountrySelectorFactory, createShippingStrategySelectorFactory } from '../shipping';\nimport { createStoreCreditSelectorFactory } from '../store-credit/store-credit-selector';\n\nimport { createCheckoutSelectorFactory } from './checkout-selector';\nimport { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\nexport type InternalCheckoutSelectorsFactory = (\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n) => InternalCheckoutSelectors;\n\nexport function createInternalCheckoutSelectorsFactory(): InternalCheckoutSelectorsFactory {\n    const createBillingAddressSelector = createBillingAddressSelectorFactory();\n    const createCartSelector = createCartSelectorFactory();\n    const createCheckoutButtonSelector = createCheckoutButtonSelectorFactory();\n    const createConfigSelector = createConfigSelectorFactory();\n    const createCountrySelector = createCountrySelectorFactory();\n    const createCouponSelector = createCouponSelectorFactory();\n    const createCustomerSelector = createCustomerSelectorFactory();\n    const createCustomerStrategySelector = createCustomerStrategySelectorFactory();\n    const createGiftCertificateSelector = createGiftCertificateSelectorFactory();\n    const createInstrumentSelector = createInstrumentSelectorFactory();\n    const createFormSelector = createFormSelectorFactory();\n    const createPaymentMethodSelector = createPaymentMethodSelectorFactory();\n    const createPaymentStrategySelector = createPaymentStrategySelectorFactory();\n    const createRemoteCheckoutSelector = createRemoteCheckoutSelectorFactory();\n    const createShippingAddressSelector = createShippingAddressSelectorFactory();\n    const createShippingCountrySelector = createShippingCountrySelectorFactory();\n    const createShippingStrategySelector = createShippingStrategySelectorFactory();\n    const createConsignmentSelector = createConsignmentSelectorFactory();\n    const createCheckoutSelector = createCheckoutSelectorFactory();\n    const createOrderSelector = createOrderSelectorFactory();\n    const createPaymentSelector = createPaymentSelectorFactory();\n    const createStoreCreditSelector = createStoreCreditSelectorFactory();\n\n    return (state, options = {}) => {\n        const billingAddress = createBillingAddressSelector(state.billingAddress);\n        const cart = createCartSelector(state.cart);\n        const checkoutButton = createCheckoutButtonSelector(state.checkoutButton);\n        const config = createConfigSelector(state.config);\n        const countries = createCountrySelector(state.countries);\n        const coupons = createCouponSelector(state.coupons);\n        const customer = createCustomerSelector(state.customer);\n        const customerStrategies = createCustomerStrategySelector(state.customerStrategies);\n        const form = createFormSelector(state.config);\n        const giftCertificates = createGiftCertificateSelector(state.giftCertificates);\n        const instruments = createInstrumentSelector(state.instruments);\n        const paymentMethods = createPaymentMethodSelector(state.paymentMethods);\n        const paymentStrategies = createPaymentStrategySelector(state.paymentStrategies);\n        const remoteCheckout = createRemoteCheckoutSelector(state.remoteCheckout);\n        const shippingAddress = createShippingAddressSelector(state.consignments);\n        const shippingCountries = createShippingCountrySelector(state.shippingCountries);\n        const shippingStrategies = createShippingStrategySelector(state.shippingStrategies);\n        const storeCredit = createStoreCreditSelector(state.storeCredit);\n\n        // Compose selectors\n        const consignments = createConsignmentSelector(state.consignments, cart);\n        const checkout = createCheckoutSelector(state.checkout, billingAddress, cart, consignments, coupons, customer, giftCertificates);\n        const order = createOrderSelector(state.order, billingAddress, coupons);\n        const payment = createPaymentSelector(checkout, order);\n\n        const selectors = {\n            billingAddress,\n            cart,\n            checkout,\n            checkoutButton,\n            config,\n            consignments,\n            countries,\n            coupons,\n            customer,\n            customerStrategies,\n            form,\n            giftCertificates,\n            instruments,\n            order,\n            payment,\n            paymentMethods,\n            paymentStrategies,\n            remoteCheckout,\n            shippingAddress,\n            shippingCountries,\n            shippingStrategies,\n            storeCredit,\n        };\n\n        return options.shouldWarnMutation ? createFreezeProxies(selectors) : selectors;\n    };\n}\n\nexport default function createInternalCheckoutSelectors(\n    state: CheckoutStoreState,\n    options?: CheckoutStoreOptions\n): InternalCheckoutSelectors {\n    return createInternalCheckoutSelectorsFactory()(state, options);\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport BillingAddress from './billing-address';\nimport BillingAddressState, { DEFAULT_STATE } from './billing-address-state';\n\nexport default interface BillingAddressSelector {\n    getBillingAddress(): BillingAddress | undefined;\n    getUpdateError(): Error | undefined;\n    getContinueAsGuestError(): Error | undefined;\n    getLoadError(): Error | undefined;\n    isUpdating(): boolean;\n    isContinuingAsGuest(): boolean;\n    isLoading(): boolean;\n}\n\nexport type BillingAddressSelectorFactory = (state: BillingAddressState) => BillingAddressSelector;\n\nexport function createBillingAddressSelectorFactory(): BillingAddressSelectorFactory {\n    const getBillingAddress = createSelector(\n        (state: BillingAddressState) => state.data,\n        data => () => data\n    );\n\n    const getUpdateError = createSelector(\n        (state: BillingAddressState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const getContinueAsGuestError = createSelector(\n        (state: BillingAddressState) => state.errors.continueAsGuestError,\n        error => () => error\n    );\n\n    const getLoadError = createSelector(\n        (state: BillingAddressState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isUpdating = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isUpdating,\n        status => () => status\n    );\n\n    const isContinuingAsGuest = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isContinuingAsGuest,\n        status => () => status\n    );\n\n    const isLoading = createSelector(\n        (state: BillingAddressState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: BillingAddressState = DEFAULT_STATE\n    ): BillingAddressSelector => {\n        return {\n            getBillingAddress: getBillingAddress(state),\n            getUpdateError: getUpdateError(state),\n            getContinueAsGuestError: getContinueAsGuestError(state),\n            getLoadError: getLoadError(state),\n            isUpdating: isUpdating(state),\n            isContinuingAsGuest: isContinuingAsGuest(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { find, some, values } from 'lodash';\n\nimport { createSelector } from '../common/selector';\nimport { memoize, memoizeOne } from '../common/utility';\n\nimport CheckoutButtonState, { DEFAULT_STATE } from './checkout-button-state';\nimport { CheckoutButtonMethodType } from './strategies';\n\nexport default interface CheckoutButtonSelector {\n    getState(): CheckoutButtonState;\n    isInitializing(methodId?: CheckoutButtonMethodType): boolean;\n    isInitialized(methodId: CheckoutButtonMethodType, containerId?: string): boolean;\n    isDeinitializing(methodId?: CheckoutButtonMethodType): boolean;\n    getInitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n    getDeinitializeError(methodId?: CheckoutButtonMethodType): Error | undefined;\n}\n\nexport type CheckoutButtonSelectorFactory = (state: CheckoutButtonState) => CheckoutButtonSelector;\n\nexport function createCheckoutButtonSelectorFactory(): CheckoutButtonSelectorFactory {\n    const getState = createSelector(\n        (state: CheckoutButtonState) => state,\n        state => () => state\n    );\n\n    const isInitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        statuses => memoize((methodId?: CheckoutButtonMethodType) => {\n            if (methodId) {\n                const method = statuses[methodId];\n\n                return (method && method.isInitializing) === true;\n            }\n\n            return some(statuses, { isInitializing: true });\n        })\n    );\n\n    const isInitialized = createSelector(\n        (state: CheckoutButtonState) => state.data,\n        data => memoize((methodId: CheckoutButtonMethodType, containerId?: string) => {\n            const method = data[methodId];\n\n            if (!method) {\n                return false;\n            }\n\n            if (!containerId) {\n                return some(method.initializedContainers, isInitialized => isInitialized === true);\n            }\n\n            return method.initializedContainers[containerId] === true;\n        })\n    );\n\n    const isDeinitializing = createSelector(\n        (state: CheckoutButtonState) => state.statuses,\n        statuses => memoize((methodId?: CheckoutButtonMethodType) => {\n            if (methodId) {\n                const method = statuses[methodId];\n\n                return (method && method.isDeinitializing) === true;\n            }\n\n            return some(statuses, { isDeinitializing: true });\n        })\n    );\n\n    const getInitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        errors => memoize((methodId?: CheckoutButtonMethodType) => {\n            const method = methodId ?\n                errors[methodId] :\n                find(values(errors), method => !!(method && method.initializeError));\n\n            return method && method.initializeError;\n        })\n    );\n\n    const getDeinitializeError = createSelector(\n        (state: CheckoutButtonState) => state.errors,\n        errors => memoize((methodId?: CheckoutButtonMethodType) => {\n            const method = methodId ?\n                errors[methodId] :\n                find(values(errors), method => !!(method && method.deinitializeError));\n\n            return method && method.deinitializeError;\n        })\n    );\n\n    return memoizeOne((\n        state: CheckoutButtonState = DEFAULT_STATE\n    ): CheckoutButtonSelector => {\n        return {\n            getState: getState(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isDeinitializing: isDeinitializing(state),\n            getInitializeError: getInitializeError(state),\n            getDeinitializeError: getDeinitializeError(state),\n        };\n    });\n}\n","import { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport Coupon from './coupon';\nimport CouponState, { DEFAULT_STATE } from './coupon-state';\n\nexport default interface CouponSelector {\n    getCoupons(): Coupon[] | undefined;\n    getRemoveError(): RequestError | undefined;\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type CouponSelectorFactory = (state: CouponState) => CouponSelector;\n\nexport function createCouponSelectorFactory(): CouponSelectorFactory {\n    const getCoupons = createSelector(\n        (state: CouponState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: CouponState) => state.errors.removeCouponError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: CouponState) => state.errors.applyCouponError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: CouponState) => !!state.statuses.isApplyingCoupon,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: CouponState) => !!state.statuses.isRemovingCoupon,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CouponState = DEFAULT_STATE\n    ): CouponSelector => {\n        return {\n            getCoupons: getCoupons(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport Customer from './customer';\nimport CustomerState, { DEFAULT_STATE } from './customer-state';\n\nexport default interface CustomerSelector {\n    getCustomer(): Customer | undefined;\n}\n\nexport type CustomerSelectorFactory = (state: CustomerState) => CustomerSelector;\n\nexport function createCustomerSelectorFactory(): CustomerSelectorFactory {\n    const getCustomer = createSelector(\n        (state: CustomerState) => state.data,\n        customer => () => customer\n    );\n\n    return memoizeOne((\n        state: CustomerState = DEFAULT_STATE\n    ): CustomerSelector => {\n        return {\n            getCustomer: getCustomer(state),\n        };\n    });\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport RemoteCheckoutState, { DEFAULT_STATE, RemoteCheckoutStateData } from './remote-checkout-state';\n\nexport default interface RemoteCheckoutSelector {\n    getCheckout<TMethodId extends keyof RemoteCheckoutStateData>(\n        methodId: TMethodId\n    ): RemoteCheckoutStateData[TMethodId] | undefined;\n}\n\nexport type RemoteCheckoutSelectorFactory = (state: RemoteCheckoutState) => RemoteCheckoutSelector;\n\nexport function createRemoteCheckoutSelectorFactory(): RemoteCheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: RemoteCheckoutState) => state.data,\n        data => <TMethodId extends keyof RemoteCheckoutStateData>(methodId: TMethodId) => {\n            return data[methodId];\n        }\n    );\n\n    return memoizeOne((\n        state: RemoteCheckoutState = DEFAULT_STATE\n    ): RemoteCheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state),\n        };\n    });\n}\n","import { Address } from '../address';\nimport { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport ConsignmentState, { DEFAULT_STATE } from './consignment-state';\n\nexport default interface ShippingAddressSelector {\n    getShippingAddress(): Address | undefined;\n}\n\nexport type ShippingAddressSelectorFactory = (state: ConsignmentState) => ShippingAddressSelector;\n\nexport function createShippingAddressSelectorFactory(): ShippingAddressSelectorFactory {\n    const getShippingAddress = createSelector(\n        (state: ConsignmentState) => state.data,\n        consignments => () => {\n            if (!consignments || !consignments[0]) {\n                return;\n            }\n\n            return consignments[0].shippingAddress;\n        }\n    );\n\n    return memoizeOne((\n        state: ConsignmentState = DEFAULT_STATE\n    ): ShippingAddressSelector => {\n        return {\n            getShippingAddress: getShippingAddress(state),\n        };\n    });\n}\n","import { find } from 'lodash';\n\nimport { CheckoutSelector } from '../checkout';\nimport { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\nimport { GatewayOrderPayment, OrderSelector } from '../order';\n\nimport PaymentMethod from './payment-method';\nimport { HOSTED } from './payment-method-types';\nimport { ACKNOWLEDGE, FINALIZE } from './payment-status-types';\n\nexport default interface PaymentSelector {\n    getPaymentId(): { providerId: string; gatewayId?: string } | undefined;\n    getPaymentStatus(): string | undefined;\n    getPaymentToken(): string | undefined;\n    getPaymentRedirectUrl(): string | undefined;\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n    isPaymentDataSubmitted(paymentMethod?: PaymentMethod): boolean;\n}\n\nexport type PaymentSelectorFactory = (\n    checkout: CheckoutSelector,\n    order: OrderSelector\n) => PaymentSelector;\n\ninterface PaymentSelectorDependencies {\n    checkout: CheckoutSelector;\n    order: OrderSelector;\n}\n\nexport function createPaymentSelectorFactory(): PaymentSelectorFactory {\n    const getInternalPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        getOrderMeta => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.payment;\n        }\n    );\n\n    const getGatewayPayment = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrder,\n        getOrder => () => {\n            const order = getOrder();\n\n            return find(order && order.payments, ({ providerId }) =>\n                providerId !== 'giftcertificate' && providerId !== 'storecredit'\n            ) as GatewayOrderPayment;\n        }\n    );\n\n    const getHostedPayment = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getCheckout,\n        getCheckout => () => {\n            const checkout = getCheckout();\n\n            return find(checkout && checkout.payments, ({ providerType }) =>\n                providerType === HOSTED\n            );\n        }\n    );\n\n    const getPaymentId = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.id) {\n                return {\n                    providerId: internalPayment.id,\n                    gatewayId: internalPayment.gateway,\n                };\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment && payment.providerId) {\n                return {\n                    providerId: payment.providerId,\n                    gatewayId: payment.gatewayId,\n                };\n            }\n        }\n    );\n\n    const getPaymentStatus = createSelector(\n        getInternalPayment,\n        getHostedPayment,\n        getGatewayPayment,\n        (getInternalPayment, getHostedPayment, getGatewayPayment) => () => {\n            const internalPayment = getInternalPayment();\n\n            if (internalPayment && internalPayment.status) {\n                return internalPayment.status.replace('PAYMENT_STATUS_', '');\n            }\n\n            const payment = getHostedPayment() || getGatewayPayment();\n\n            if (payment) {\n                return payment.detail.step;\n            }\n        }\n    );\n\n    const getPaymentToken = createSelector(\n        ({ order }: PaymentSelectorDependencies) => order.getOrderMeta,\n        getOrderMeta => () => {\n            const meta = getOrderMeta();\n\n            return meta && meta.token;\n        }\n    );\n\n    const getPaymentRedirectUrl = createSelector(\n        getInternalPayment,\n        getInternalPayment => () => {\n            const payment = getInternalPayment();\n\n            return payment && payment.redirectUrl;\n        }\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ checkout }: PaymentSelectorDependencies) => checkout.getOutstandingBalance,\n        getOutstandingBalance => (useStoreCredit: boolean = false) => {\n            const grandTotal = getOutstandingBalance(useStoreCredit);\n\n            return grandTotal ? grandTotal > 0 : false;\n        }\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        getPaymentStatus,\n        getPaymentStatus => (paymentMethod?: PaymentMethod) => {\n            if (paymentMethod && paymentMethod.nonce) {\n                return true;\n            }\n\n            return getPaymentStatus() === ACKNOWLEDGE || getPaymentStatus() === FINALIZE;\n        }\n    );\n\n    return memoizeOne((\n        checkout: CheckoutSelector,\n        order: OrderSelector\n    ): PaymentSelector => {\n        return {\n            getPaymentId: getPaymentId({ checkout, order }),\n            getPaymentStatus: getPaymentStatus({ checkout, order }),\n            getPaymentToken: getPaymentToken({ checkout, order }),\n            getPaymentRedirectUrl: getPaymentRedirectUrl({ checkout, order }),\n            isPaymentDataRequired: isPaymentDataRequired({ checkout, order }),\n            isPaymentDataSubmitted: isPaymentDataSubmitted({ checkout, order }),\n        };\n    });\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport Cart from './cart';\nimport CartState, { DEFAULT_STATE } from './cart-state';\n\nexport default interface CartSelector {\n    getCart(): Cart | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CartSelectorFactory = (state: CartState) => CartSelector;\n\nexport function createCartSelectorFactory() {\n    const getCart = createSelector(\n        (state: CartState) => state.data,\n        cart => () => cart\n    );\n\n    const getLoadError = createSelector(\n        (state: CartState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CartState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CartState = DEFAULT_STATE\n    ): CartSelector => {\n        return {\n            getCart: getCart(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport Config, { ContextConfig, StoreConfig } from './config';\nimport ConfigState, { DEFAULT_STATE } from './config-state';\n\nexport default interface ConfigSelector {\n    getConfig(): Config | undefined;\n    getStoreConfig(): StoreConfig | undefined;\n    getContextConfig(): ContextConfig | undefined;\n    getExternalSource(): string | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ConfigSelectorFactory = (state: ConfigState) => ConfigSelector;\n\nexport function createConfigSelectorFactory(): ConfigSelectorFactory {\n\n    const getConfig = createSelector(\n        (state: ConfigState) => state.data,\n        data => () => data\n    );\n\n    const getStoreConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.storeConfig,\n        data => () => data\n    );\n\n    const getContextConfig = createSelector(\n        (state: ConfigState) => state.data && state.data.context,\n        data => () => data\n    );\n\n    const getExternalSource = createSelector(\n        (state: ConfigState) => state.meta && state.meta.externalSource,\n        data => () => data\n    );\n\n    const getLoadError = createSelector(\n        (state: ConfigState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: ConfigState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: ConfigState = DEFAULT_STATE\n    ): ConfigSelector => {\n        return {\n            getConfig: getConfig(state),\n            getStoreConfig: getStoreConfig(state),\n            getContextConfig: getContextConfig(state),\n            getExternalSource: getExternalSource(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport Country from './country';\nimport CountryState, { DEFAULT_STATE } from './country-state';\n\nexport default interface CountrySelector {\n    getCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type CountrySelectorFactory = (state: CountryState) => CountrySelector;\n\nexport function createCountrySelectorFactory(): CountrySelectorFactory {\n    const getCountries = createSelector(\n        (state: CountryState) => state.data,\n        countries => () => countries\n    );\n\n    const getLoadError = createSelector(\n        (state: CountryState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CountryState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: CountryState = DEFAULT_STATE\n    ): CountrySelector => {\n        return {\n            getCountries: getCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport CustomerStrategyState, { DEFAULT_STATE } from './customer-strategy-state';\n\nexport default interface CustomerStrategySelector {\n    getSignInError(methodId?: string): Error | undefined;\n    getSignOutError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    getWidgetInteractionError(methodId?: string): Error | undefined;\n    isSigningIn(methodId?: string): boolean;\n    isSigningOut(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type CustomerStrategySelectorFactory = (state: CustomerStrategyState) => CustomerStrategySelector;\n\nexport function createCustomerStrategySelectorFactory(): CustomerStrategySelectorFactory {\n    const getSignInError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signInMethodId,\n        (state: CustomerStrategyState) => state.errors.signInError,\n        (signInMethodId, signInError) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return;\n            }\n\n            return signInError;\n        }\n    );\n\n    const getSignOutError = createSelector(\n        (state: CustomerStrategyState) => state.errors.signOutMethodId,\n        (state: CustomerStrategyState) => state.errors.signOutError,\n        (signOutMethodId, signOutError) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return;\n            }\n\n            return signOutError;\n        }\n    );\n\n    const getInitializeError = createSelector(\n        (state: CustomerStrategyState) => state.errors.initializeMethodId,\n        (state: CustomerStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getWidgetInteractionError = createSelector(\n        (state: CustomerStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isSigningIn = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signInMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningIn,\n        (signInMethodId, isSigningIn) => (methodId?: string) => {\n            if (methodId && signInMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningIn;\n        }\n    );\n\n    const isSigningOut = createSelector(\n        (state: CustomerStrategyState) => state.statuses.signOutMethodId,\n        (state: CustomerStrategyState) => state.statuses.isSigningOut,\n        (signOutMethodId, isSigningOut) => (methodId?: string) => {\n            if (methodId && signOutMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSigningOut;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: CustomerStrategyState) => state.statuses.initializeMethodId,\n        (state: CustomerStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: CustomerStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: CustomerStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: CustomerStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: CustomerStrategyState = DEFAULT_STATE\n    ): CustomerStrategySelector => {\n        return {\n            getSignInError: getSignInError(state),\n            getSignOutError: getSignOutError(state),\n            getInitializeError: getInitializeError(state),\n            getWidgetInteractionError: getWidgetInteractionError(state),\n            isSigningIn: isSigningIn(state),\n            isSigningOut: isSigningOut(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { StorefrontErrorResponseBody } from '../common/error';\nimport { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport GiftCertificate from './gift-certificate';\nimport GiftCertificateState, { DEFAULT_STATE } from './gift-certificate-state';\n\nexport default interface GiftCertificateSelector {\n    getGiftCertificates(): GiftCertificate[] | undefined;\n    getRemoveError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    getApplyError(): RequestError<StorefrontErrorResponseBody> | undefined;\n    isApplying(): boolean;\n    isRemoving(): boolean;\n}\n\nexport type GiftCertificateSelectorFactory = (state: GiftCertificateState) => GiftCertificateSelector;\n\nexport function createGiftCertificateSelectorFactory(): GiftCertificateSelectorFactory {\n    const getGiftCertificates = createSelector(\n        (state: GiftCertificateState) => state.data,\n        data => () => data\n    );\n\n    const getRemoveError = createSelector(\n        (state: GiftCertificateState) => state.errors.removeGiftCertificateError,\n        error => () => error\n    );\n\n    const getApplyError = createSelector(\n        (state: GiftCertificateState) => state.errors.applyGiftCertificateError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isApplyingGiftCertificate,\n        status => () => status\n    );\n\n    const isRemoving = createSelector(\n        (state: GiftCertificateState) => !!state.statuses.isRemovingGiftCertificate,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: GiftCertificateState = DEFAULT_STATE\n    ): GiftCertificateSelector => {\n        return {\n            getGiftCertificates: getGiftCertificates(state),\n            getRemoveError: getRemoveError(state),\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n            isRemoving: isRemoving(state),\n        };\n    });\n}\n","import { createSelector } from '../../common/selector';\nimport { memoizeOne } from '../../common/utility';\n\nimport Instrument from './instrument';\nimport InstrumentState, { DEFAULT_STATE, InstrumentMeta } from './instrument-state';\n\nexport default interface InstrumentSelector {\n    getInstruments(): Instrument[] | undefined;\n    getInstrumentsMeta(): InstrumentMeta | undefined;\n    getLoadError(): Error | undefined;\n    getDeleteError(instrumentId?: string): Error | undefined;\n    isLoading(): boolean ;\n    isDeleting(instrumentId?: string): boolean;\n}\n\nexport type InstrumentSelectorFactory = (state: InstrumentState) => InstrumentSelector;\n\nexport function createInstrumentSelectorFactory(): InstrumentSelectorFactory {\n    const getInstruments = createSelector(\n        (state: InstrumentState) => state.data,\n        instruments => () => instruments\n    );\n\n    const getInstrumentsMeta = createSelector(\n        (state: InstrumentState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: InstrumentState) => state.errors.loadError,\n        loadError => () => loadError\n    );\n\n    const getDeleteError = createSelector(\n        (state: InstrumentState) => state.errors.failedInstrument,\n        (state: InstrumentState) => state.errors.deleteError,\n        (failedInstrument, deleteError) => (instrumentId?: string) => {\n            if (instrumentId && failedInstrument !== instrumentId) {\n                return;\n            }\n\n            return deleteError;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: InstrumentState) => state.statuses.isLoading,\n        isLoading => () => !!isLoading\n    );\n\n    const isDeleting = createSelector(\n        (state: InstrumentState) => state.statuses.deletingInstrument,\n        (state: InstrumentState) => state.statuses.isDeleting,\n        (deletingInstrument, isDeleting) => (instrumentId?: string) => {\n            if (instrumentId && deletingInstrument !== instrumentId) {\n                return false;\n            }\n\n            return !!isDeleting;\n        }\n    );\n\n    return memoizeOne((\n        state: InstrumentState = DEFAULT_STATE\n    ): InstrumentSelector => {\n        return {\n            getInstruments: getInstruments(state),\n            getInstrumentsMeta: getInstrumentsMeta(state),\n            getLoadError: getLoadError(state),\n            getDeleteError: getDeleteError(state),\n            isLoading: isLoading(state),\n            isDeleting: isDeleting(state),\n        };\n    });\n}\n","import { find } from 'lodash';\n\nimport { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport PaymentMethod from './payment-method';\nimport PaymentMethodMeta from './payment-method-meta';\nimport PaymentMethodState, { DEFAULT_STATE } from './payment-method-state';\n\nexport default interface PaymentMethodSelector {\n    getPaymentMethods(): PaymentMethod[] | undefined;\n    getPaymentMethodsMeta(): PaymentMethodMeta | undefined;\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n    getLoadError(): Error | undefined;\n    getLoadMethodError(methodId?: string): Error | undefined;\n    isLoading(): boolean;\n    isLoadingMethod(methodId?: string): boolean;\n}\n\nexport type PaymentMethodSelectorFactory = (state: PaymentMethodState) => PaymentMethodSelector;\n\nexport function createPaymentMethodSelectorFactory(): PaymentMethodSelectorFactory {\n    const getPaymentMethods = createSelector(\n        (state: PaymentMethodState) => state.data,\n        paymentMethods => () => paymentMethods\n    );\n\n    const getPaymentMethodsMeta = createSelector(\n        (state: PaymentMethodState) => state.meta,\n        meta => () => meta\n    );\n\n    const getPaymentMethod = createSelector(\n        (state: PaymentMethodState) => state.data,\n        paymentMethods => (methodId: string, gatewayId?: string) => {\n            return gatewayId ?\n                find(paymentMethods, { id: methodId, gateway: gatewayId }) :\n                find(paymentMethods, { id: methodId });\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadError,\n        loadError => () => loadError\n    );\n\n    const getLoadMethodError = createSelector(\n        (state: PaymentMethodState) => state.errors.loadMethodId,\n        (state: PaymentMethodState) => state.errors.loadMethodError,\n        (loadMethodId, loadMethodError) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return;\n            }\n\n            return loadMethodError;\n        }\n    );\n\n    const isLoading = createSelector(\n        (state: PaymentMethodState) => state.statuses.isLoading,\n        isLoading => () => !!isLoading\n    );\n\n    const isLoadingMethod = createSelector(\n        (state: PaymentMethodState) => state.statuses.loadMethodId,\n        (state: PaymentMethodState) => state.statuses.isLoadingMethod,\n        (loadMethodId, isLoadingMethod) => (methodId?: string) => {\n            if (methodId && loadMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isLoadingMethod;\n        }\n    );\n\n    return memoizeOne((\n        state: PaymentMethodState = DEFAULT_STATE\n    ): PaymentMethodSelector => {\n        return {\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethodsMeta: getPaymentMethodsMeta(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getLoadError: getLoadError(state),\n            getLoadMethodError: getLoadMethodError(state),\n            isLoading: isLoading(state),\n            isLoadingMethod: isLoadingMethod(state),\n        };\n    });\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport PaymentStrategyState, { DEFAULT_STATE } from './payment-strategy-state';\n\nexport default interface PaymentStrategySelector {\n    getInitializeError(methodId?: string): Error | undefined;\n    getExecuteError(methodId?: string): Error | undefined;\n    getFinalizeError(methodId?: string): Error | undefined;\n    getWidgetInteractingError(methodId?: string): Error | undefined;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n    isExecuting(methodId?: string): boolean;\n    isFinalizing(methodId?: string): boolean;\n    isWidgetInteracting(methodId?: string): boolean;\n}\n\nexport type PaymentStrategySelectorFactory = (state: PaymentStrategyState) => PaymentStrategySelector;\n\nexport function createPaymentStrategySelectorFactory(): PaymentStrategySelectorFactory {\n    const getInitializeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.initializeMethodId,\n        (state: PaymentStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const getExecuteError = createSelector(\n        (state: PaymentStrategyState) => state.errors.executeMethodId,\n        (state: PaymentStrategyState) => state.errors.executeError,\n        (executeMethodId, executeError) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return;\n            }\n\n            return executeError;\n        }\n    );\n\n    const getFinalizeError = createSelector(\n        (state: PaymentStrategyState) => state.errors.finalizeMethodId,\n        (state: PaymentStrategyState) => state.errors.finalizeError,\n        (finalizeMethodId, finalizeError) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return;\n            }\n\n            return finalizeError;\n        }\n    );\n\n    const getWidgetInteractingError = createSelector(\n        (state: PaymentStrategyState) => state.errors.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.errors.widgetInteractionError,\n        (widgetInteractionMethodId, widgetInteractionError) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return;\n            }\n\n            return widgetInteractionError;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.initializeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: PaymentStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    const isExecuting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.executeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isExecuting,\n        (executeMethodId, isExecuting) => (methodId?: string) => {\n            if (methodId && executeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isExecuting;\n        }\n    );\n\n    const isFinalizing = createSelector(\n        (state: PaymentStrategyState) => state.statuses.finalizeMethodId,\n        (state: PaymentStrategyState) => state.statuses.isFinalizing,\n        (finalizeMethodId, isFinalizing) => (methodId?: string) => {\n            if (methodId && finalizeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isFinalizing;\n        }\n    );\n\n    const isWidgetInteracting = createSelector(\n        (state: PaymentStrategyState) => state.statuses.widgetInteractionMethodId,\n        (state: PaymentStrategyState) => state.statuses.isWidgetInteracting,\n        (widgetInteractionMethodId, isWidgetInteracting) => (methodId?: string) => {\n            if (methodId && widgetInteractionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isWidgetInteracting;\n        }\n    );\n\n    return memoizeOne((\n        state: PaymentStrategyState = DEFAULT_STATE\n    ): PaymentStrategySelector => {\n        return {\n            getInitializeError: getInitializeError(state),\n            getExecuteError: getExecuteError(state),\n            getFinalizeError: getFinalizeError(state),\n            getWidgetInteractingError: getWidgetInteractingError(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n            isExecuting: isExecuting(state),\n            isFinalizing: isFinalizing(state),\n            isWidgetInteracting: isWidgetInteracting(state),\n        };\n    });\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\nimport { Country } from '../geography';\n\nimport ShippingCountryState, { DEFAULT_STATE } from './shipping-country-state';\n\nexport default interface ShippingCountrySelector {\n    getShippingCountries(): Country[] | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type ShippingCountrySelectorFactory = (state: ShippingCountryState) => ShippingCountrySelector;\n\nexport function createShippingCountrySelectorFactory(): ShippingCountrySelectorFactory {\n    const getShippingCountries = createSelector(\n        (state: ShippingCountryState) => state.data,\n        data => () => data\n    );\n\n    const getLoadError = createSelector(\n        (state: ShippingCountryState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: ShippingCountryState) => state.statuses.isLoading,\n        status => () => !!status\n    );\n\n    return memoizeOne((\n        state: ShippingCountryState = DEFAULT_STATE\n    ): ShippingCountrySelector => {\n        return {\n            getShippingCountries: getShippingCountries(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport ShippingStrategyState, { DEFAULT_STATE } from './shipping-strategy-state';\n\nexport default interface ShippingStrategySelector {\n    getUpdateAddressError(methodId?: string): Error | undefined;\n    getSelectOptionError(methodId?: string): Error | undefined;\n    getInitializeError(methodId?: string): Error | undefined;\n    isUpdatingAddress(methodId?: string): boolean;\n    isSelectingOption(methodId?: string): boolean;\n    isInitializing(methodId?: string): boolean;\n    isInitialized(methodId: string): boolean;\n}\n\nexport type ShippingStrategySelectorFactory = (state: ShippingStrategyState) => ShippingStrategySelector;\n\nexport function createShippingStrategySelectorFactory(): ShippingStrategySelectorFactory {\n    const getUpdateAddressError = createSelector(\n        (state: ShippingStrategyState) => state.errors.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.errors.updateAddressError,\n        (updateAddressMethodId, updateAddressError) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return;\n            }\n\n            return updateAddressError;\n        }\n    );\n\n    const getSelectOptionError = createSelector(\n        (state: ShippingStrategyState) => state.errors.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.errors.selectOptionError,\n        (selectOptionMethodId, selectOptionError) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return;\n            }\n\n            return selectOptionError;\n        }\n    );\n\n    const getInitializeError = createSelector(\n        (state: ShippingStrategyState) => state.errors.initializeMethodId,\n        (state: ShippingStrategyState) => state.errors.initializeError,\n        (initializeMethodId, initializeError) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return;\n            }\n\n            return initializeError;\n        }\n    );\n\n    const isUpdatingAddress = createSelector(\n        (state: ShippingStrategyState) => state.statuses.updateAddressMethodId,\n        (state: ShippingStrategyState) => state.statuses.isUpdatingAddress,\n        (updateAddressMethodId, isUpdatingAddress) => (methodId?: string) => {\n            if (methodId && updateAddressMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isUpdatingAddress;\n        }\n    );\n\n    const isSelectingOption = createSelector(\n        (state: ShippingStrategyState) => state.statuses.selectOptionMethodId,\n        (state: ShippingStrategyState) => state.statuses.isSelectingOption,\n        (selectOptionMethodId, isSelectingOption) => (methodId?: string) => {\n            if (methodId && selectOptionMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isSelectingOption;\n        }\n    );\n\n    const isInitializing = createSelector(\n        (state: ShippingStrategyState) => state.statuses.initializeMethodId,\n        (state: ShippingStrategyState) => state.statuses.isInitializing,\n        (initializeMethodId, isInitializing) => (methodId?: string) => {\n            if (methodId && initializeMethodId !== methodId) {\n                return false;\n            }\n\n            return !!isInitializing;\n        }\n    );\n\n    const isInitialized = createSelector(\n        (state: ShippingStrategyState) => state.data,\n        data => (methodId: string) => {\n            return !!(\n                data[methodId] &&\n                data[methodId].isInitialized\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: ShippingStrategyState = DEFAULT_STATE\n    ): ShippingStrategySelector => {\n        return {\n            getUpdateAddressError: getUpdateAddressError(state),\n            getSelectOptionError: getSelectOptionError(state),\n            getInitializeError: getInitializeError(state),\n            isUpdatingAddress: isUpdatingAddress(state),\n            isSelectingOption: isSelectingOption(state),\n            isInitializing: isInitializing(state),\n            isInitialized: isInitialized(state),\n        };\n    });\n}\n","import { BillingAddressSelector } from '../billing';\nimport { CartSelector } from '../cart';\nimport { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\nimport { CouponSelector, GiftCertificateSelector } from '../coupon';\nimport { CustomerSelector } from '../customer';\nimport { ConsignmentSelector } from '../shipping';\n\nimport Checkout from './checkout';\nimport CheckoutState, { DEFAULT_STATE } from './checkout-state';\n\nexport default interface CheckoutSelector {\n    getCheckout(): Checkout | undefined;\n    getOutstandingBalance(useStoreCredit?: boolean): number | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n    getUpdateError(): Error | undefined;\n    isUpdating(): boolean;\n}\n\nexport type CheckoutSelectorFactory = (\n    state: CheckoutState,\n    billingAddress: BillingAddressSelector,\n    cart: CartSelector,\n    consignments: ConsignmentSelector,\n    coupons: CouponSelector,\n    customer: CustomerSelector,\n    giftCertificates: GiftCertificateSelector\n) => CheckoutSelector;\n\ninterface CheckoutSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    cart: CartSelector;\n    consignments: ConsignmentSelector;\n    coupons: CouponSelector;\n    customer: CustomerSelector;\n    giftCertificates: GiftCertificateSelector;\n}\n\nexport function createCheckoutSelectorFactory(): CheckoutSelectorFactory {\n    const getCheckout = createSelector(\n        (state: CheckoutState) => state.data,\n        (_: CheckoutState, { billingAddress }: CheckoutSelectorDependencies) => billingAddress.getBillingAddress,\n        (_: CheckoutState, { cart }: CheckoutSelectorDependencies) => cart.getCart,\n        (_: CheckoutState, { customer }: CheckoutSelectorDependencies) => customer.getCustomer,\n        (_: CheckoutState, { consignments }: CheckoutSelectorDependencies) => consignments.getConsignments,\n        (_: CheckoutState, { coupons }: CheckoutSelectorDependencies) => coupons.getCoupons,\n        (_: CheckoutState, { giftCertificates }: CheckoutSelectorDependencies) => giftCertificates.getGiftCertificates,\n        (data, getBillingAddress, getCart, getCustomer, getConsignments, getCoupons, getGiftCertificates) => () => {\n            const billingAddress = getBillingAddress();\n            const cart = getCart();\n            const customer = getCustomer();\n            const consignments = getConsignments() || [];\n            const coupons = getCoupons() || [];\n            const giftCertificates = getGiftCertificates() || [];\n\n            if (!data || !cart || !customer) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                cart,\n                customer,\n                consignments,\n                coupons,\n                giftCertificates,\n            };\n        }\n    );\n\n    const getOutstandingBalance = createSelector(\n        getCheckout,\n        getCheckout => (useStoreCredit?: boolean) => {\n            const checkout = getCheckout();\n\n            if (!checkout) {\n                return;\n            }\n\n            const grandTotal = checkout.grandTotal || 0;\n            const storeCredit = checkout.customer.storeCredit || 0;\n\n            return useStoreCredit ? Math.max(grandTotal - storeCredit, 0) : checkout.outstandingBalance;\n        }\n    );\n\n    const getLoadError = createSelector(\n        (state: CheckoutState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: CheckoutState) => state.statuses.isLoading,\n        isLoading => () => isLoading === true\n    );\n\n    const getUpdateError = createSelector(\n        (state: CheckoutState) => state.errors.updateError,\n        error => () => error\n    );\n\n    const isUpdating = createSelector(\n        (state: CheckoutState) => state.statuses.isUpdating,\n        isUpdating => () => isUpdating === true\n    );\n\n    return memoizeOne((\n        state: CheckoutState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        cart: CartSelector,\n        consignments: ConsignmentSelector,\n        coupons: CouponSelector,\n        customer: CustomerSelector,\n        giftCertificates: GiftCertificateSelector\n    ): CheckoutSelector => {\n        return {\n            getCheckout: getCheckout(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getOutstandingBalance: getOutstandingBalance(state, {\n                billingAddress,\n                cart,\n                consignments,\n                coupons,\n                customer,\n                giftCertificates,\n            }),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n            getUpdateError: getUpdateError(state),\n            isUpdating: isUpdating(state),\n        };\n    });\n}\n","import { BillingAddressSelector } from '../billing';\nimport { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\nimport { CouponSelector } from '../coupon';\n\nimport Order from './order';\nimport OrderState, { DEFAULT_STATE, OrderMetaState } from './order-state';\n\nexport default interface OrderSelector {\n    getOrder(): Order | undefined;\n    getOrderMeta(): OrderMetaState | undefined;\n    getLoadError(): Error | undefined;\n    isLoading(): boolean;\n}\n\nexport type OrderSelectorFactory = (\n    state: OrderState,\n    billingAddress: BillingAddressSelector,\n    coupons: CouponSelector\n) => OrderSelector;\n\ninterface OrderSelectorDependencies {\n    billingAddress: BillingAddressSelector;\n    coupons: CouponSelector;\n}\n\nexport function createOrderSelectorFactory(): OrderSelectorFactory {\n    const getOrder = createSelector(\n        (state: OrderState) => state.data,\n        (_: OrderState, { billingAddress }: OrderSelectorDependencies) => billingAddress.getBillingAddress(),\n        (_: OrderState, { coupons }: OrderSelectorDependencies) => coupons.getCoupons(),\n        (data, billingAddress, coupons = []) => () => {\n            if (!data || !billingAddress) {\n                return;\n            }\n\n            return {\n                ...data,\n                billingAddress,\n                coupons,\n            };\n        }\n    );\n\n    const getOrderMeta = createSelector(\n        (state: OrderState) => state.meta,\n        meta => () => meta\n    );\n\n    const getLoadError = createSelector(\n        (state: OrderState) => state.errors.loadError,\n        error => () => error\n    );\n\n    const isLoading = createSelector(\n        (state: OrderState) => !!state.statuses.isLoading,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: OrderState = DEFAULT_STATE,\n        billingAddress: BillingAddressSelector,\n        coupons: CouponSelector\n    ): OrderSelector => {\n        return {\n            getOrder: getOrder(state, { billingAddress, coupons }),\n            getOrderMeta: getOrderMeta(state),\n            getLoadError: getLoadError(state),\n            isLoading: isLoading(state),\n        };\n    });\n}\n","import { RequestError } from '../common/error/errors';\nimport { createSelector } from '../common/selector';\nimport { memoizeOne } from '../common/utility';\n\nimport StoreCreditState, { DEFAULT_STATE } from './store-credit-state';\n\nexport default interface StoreCreditSelector {\n    getApplyError(): RequestError | undefined;\n    isApplying(): boolean;\n}\n\nexport type StoreCreditSelectorFactory = (state: StoreCreditState) => StoreCreditSelector;\n\nexport function createStoreCreditSelectorFactory(): StoreCreditSelectorFactory {\n    const getApplyError = createSelector(\n        (state: StoreCreditState) => state.errors.applyError,\n        error => () => error\n    );\n\n    const isApplying = createSelector(\n        (state: StoreCreditState) => !!state.statuses.isApplying,\n        status => () => status\n    );\n\n    return memoizeOne((\n        state: StoreCreditState = DEFAULT_STATE\n    ): StoreCreditSelector => {\n        return {\n            getApplyError: getApplyError(state),\n            isApplying: isApplying(state),\n        };\n    });\n}\n","import { createDataStore } from '@bigcommerce/data-store';\n\nimport { createRequestErrorFactory } from '../common/error';\n\nimport CheckoutStore, { CheckoutStoreOptions } from './checkout-store';\nimport CheckoutStoreState from './checkout-store-state';\nimport createActionTransformer from './create-action-transformer';\nimport createCheckoutStoreReducer from './create-checkout-store-reducer';\nimport { createInternalCheckoutSelectorsFactory } from './create-internal-checkout-selectors';\n\nexport default function createCheckoutStore(\n    initialState: Partial<CheckoutStoreState> = {},\n    options?: CheckoutStoreOptions\n): CheckoutStore {\n    const actionTransformer = createActionTransformer(createRequestErrorFactory());\n    const createInternalCheckoutSelectors = createInternalCheckoutSelectorsFactory();\n    const stateTransformer = (state: CheckoutStoreState) => createInternalCheckoutSelectors(state);\n\n    return createDataStore(\n        createCheckoutStoreReducer(),\n        initialState,\n        { actionTransformer, stateTransformer, ...options }\n    );\n}\n","import { Action } from '@bigcommerce/data-store';\nimport { from, Observable, Subscribable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { RequestErrorFactory } from '../common/error';\n\nexport default function createActionTransformer(\n    requestErrorFactory: RequestErrorFactory\n): (action: Subscribable<Action>) => Observable<Action> {\n    return action$ => from(action$).pipe(catchError<Action, never>(action => {\n        if (action instanceof Error || action.payload instanceof Error) {\n            throw action;\n        }\n\n        if (isResponse(action.payload)) {\n            const message = action.payload.body && action.payload.body.detail;\n\n            throw { ...action, payload: requestErrorFactory.createError(action.payload, message) };\n        }\n\n        throw action;\n    }));\n}\n\nfunction isResponse(object: any) {\n    if (!object || typeof object !== 'object') {\n        return false;\n    }\n\n    return ['body', 'headers', 'status', 'statusText'].every(key =>\n        object.hasOwnProperty(key)\n    );\n}\n","import { PaymentMethodInvalidError } from '../../payment/errors';\n\nimport { UnrecoverableError } from './errors';\nimport RequestErrorFactory from './request-error-factory';\n\nexport default function createRequestErrorFactory(): RequestErrorFactory {\n    const factory = new RequestErrorFactory();\n\n    const unrecoverableErrorTypes = [\n        'catalog_only',\n        'empty_cart',\n        'invalid_order_id',\n        'invalid_order_token',\n        'missing_order_token',\n        'missing_provider_token',\n        'missing_shipping_method',\n        'order_completion_error',\n        'order_could_not_be_finalized_error',\n        'order_create_failed',\n        'provider_fatal_error',\n        'provider_setup_error',\n        'stock_too_low',\n    ];\n\n    unrecoverableErrorTypes.forEach(type => {\n        factory.register(type, (response, message) => new UnrecoverableError(response, message));\n    });\n\n    factory.register('invalid_payment_provider', response => new PaymentMethodInvalidError(response));\n    factory.register('payment_config_not_found', response => new PaymentMethodInvalidError(response));\n\n    return factory;\n}\n","import { combineReducers, Action, Reducer } from '@bigcommerce/data-store';\n\nimport { billingAddressReducer } from '../billing';\nimport { cartReducer } from '../cart';\nimport { checkoutButtonReducer } from '../checkout-buttons';\nimport { configReducer } from '../config';\nimport { couponReducer, giftCertificateReducer } from '../coupon';\nimport { customerReducer, customerStrategyReducer } from '../customer';\nimport { countryReducer } from '../geography';\nimport { orderReducer } from '../order';\nimport { paymentMethodReducer, paymentReducer, paymentStrategyReducer } from '../payment';\nimport { instrumentReducer } from '../payment/instrument';\nimport { remoteCheckoutReducer } from '../remote-checkout';\nimport { consignmentReducer, shippingCountryReducer, shippingStrategyReducer } from '../shipping';\nimport { storeCreditReducer } from '../store-credit';\n\nimport checkoutReducer from './checkout-reducer';\nimport CheckoutStoreState from './checkout-store-state';\n\nexport default function createCheckoutStoreReducer(): Reducer<CheckoutStoreState, Action> {\n    return combineReducers({\n        billingAddress: billingAddressReducer,\n        cart: cartReducer,\n        checkout: checkoutReducer,\n        checkoutButton: checkoutButtonReducer,\n        config: configReducer,\n        consignments: consignmentReducer,\n        countries: countryReducer,\n        coupons: couponReducer,\n        customer: customerReducer,\n        customerStrategies: customerStrategyReducer,\n        giftCertificates: giftCertificateReducer,\n        instruments: instrumentReducer,\n        order: orderReducer,\n        payment: paymentReducer,\n        paymentMethods: paymentMethodReducer,\n        paymentStrategies: paymentStrategyReducer,\n        remoteCheckout: remoteCheckoutReducer,\n        shippingCountries: shippingCountryReducer,\n        shippingStrategies: shippingStrategyReducer,\n        storeCredit: storeCreditReducer,\n    });\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\nexport default class CheckoutNotAvailableError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'CheckoutNotAvailableError';\n        this.type = 'checkout_not_available';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport Checkout, { CheckoutRequestBody } from './checkout';\nimport CHECKOUT_DEFAULT_INCLUDES from './checkout-default-includes';\nimport CheckoutParams from './checkout-params';\nimport { CheckoutNotAvailableError } from './errors';\n\nexport default class CheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadCheckout(id: string, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        }).catch(error => {\n            if (error.status >= 400 && error.status < 500) {\n                throw new CheckoutNotAvailableError(error);\n            }\n\n            throw error;\n        });\n    }\n\n    updateCheckout(id: string, body: CheckoutRequestBody, { params, timeout }: RequestOptions<CheckoutParams> = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkout/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, {\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    ...(params && params.include || []),\n                ]),\n            },\n            body,\n            headers,\n            timeout,\n        });\n    }\n}\n","import Coupon from './coupon';\nimport InternalCoupon from './internal-coupon';\n\nconst couponTypes = [\n    'per_item_discount',\n    'percentage_discount',\n    'per_total_discount',\n    'shipping_discount',\n    'free_shipping',\n];\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCoupon(coupon: Coupon): InternalCoupon {\n    return {\n        code: coupon.code,\n        discount: coupon.displayName,\n        discountType: couponTypes.indexOf(coupon.couponType),\n    };\n}\n","import { isBillingAddressLike } from '../billing';\nimport BillingAddress from '../billing/billing-address';\nimport { Consignment } from '../shipping';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalAddress(address: Address | BillingAddress, consignments?: Consignment[]): InternalAddress {\n    let addressId;\n\n    if (isBillingAddressLike(address)) {\n        addressId = address.id;\n    } else if (consignments && consignments.length) {\n        addressId = consignments[0].id;\n    }\n\n    return {\n        id: addressId,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        addressLine1: address.address1,\n        addressLine2: address.address2,\n        city: address.city,\n        province: address.stateOrProvince,\n        provinceCode: address.stateOrProvinceCode,\n        postCode: address.postalCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import Address from '../address/address';\n\nimport BillingAddress from './billing-address';\n\nexport default function isBillingAddressLike(address: Address): address is BillingAddress {\n    const billingAddress = address as BillingAddress;\n\n    return typeof billingAddress.id !== 'undefined';\n}\n","import { memoize } from 'lodash';\n\nimport { bindDecorator, isEqual, isPrivate, CacheKeyResolver } from '../utility';\n\n/**\n * Decorates a class by patching all of its methods to cache their return values\n * and return them if they are called again with the same set of parameters. The\n * decorator also binds all the methods to the calling instance so it can be\n * destructed.\n */\nexport default function selectorDecorator<T extends Constructor<object>>(target: T): T {\n    const decoratedTarget = class extends target {};\n\n    Object.getOwnPropertyNames(target.prototype)\n        .forEach(key => {\n            const descriptor = Object.getOwnPropertyDescriptor(target.prototype, key);\n\n            if (!descriptor || key === 'constructor') {\n                return;\n            }\n\n            Object.defineProperty(\n                decoratedTarget.prototype,\n                key,\n                selectorMethodDecorator(target.prototype, key, descriptor)\n            );\n        });\n\n    return decoratedTarget;\n}\n\nfunction selectorMethodDecorator<T extends Method>(target: object, key: string, descriptor: TypedPropertyDescriptor<T>): TypedPropertyDescriptor<T> {\n    if (typeof descriptor.value !== 'function') {\n        return descriptor;\n    }\n\n    let resolver = new CacheKeyResolver();\n    let method = descriptor.value;\n    let memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n\n    return bindDecorator(target, key, {\n        get() {\n            const value = ((...args: any[]) => {\n                const cachedValue = memoizedMethod.call(this, ...args);\n\n                if (resolver.getUsedCount(...args) === 1) {\n                    return cachedValue;\n                }\n\n                const newValue = method.call(this, ...args);\n\n                if (isEqual(newValue, cachedValue, { keyFilter: key => !isPrivate(key) })) {\n                    return cachedValue;\n                }\n\n                memoizedMethod.cache.set(resolver.getKey(...args), newValue);\n\n                return newValue;\n            }) as T;\n\n            Object.defineProperty(this, key, { ...descriptor, value });\n\n            return value;\n        },\n        set(value) {\n            resolver = new CacheKeyResolver();\n            method = value;\n            memoizedMethod = memoize(method, (...args) => resolver.getKey(...args));\n        },\n    });\n}\n\nexport type Constructor<T> = new (...args: any[]) => T;\ntype Method = (...args: any[]) => any;\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonErrorSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    getInitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getInitializeError(methodId);\n    }\n\n    getDeinitializeButtonError(methodId?: CheckoutButtonMethodType): Error | undefined {\n        return this._checkoutButton.getDeinitializeError(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\nimport { selector } from '../common/selector';\n\nimport CheckoutButtonSelector from './checkout-button-selector';\nimport { CheckoutButtonMethodType } from './strategies';\n\n@selector\nexport default class CheckoutButtonStatusSelector {\n    private _checkoutButton: CheckoutButtonSelector;\n\n    /**\n     * @internal\n     */\n    constructor(selectors: InternalCheckoutSelectors) {\n        this._checkoutButton = selectors.checkoutButton;\n    }\n\n    isInitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isInitializing(methodId);\n    }\n\n    isDeinitializingButton(methodId?: CheckoutButtonMethodType): boolean {\n        return this._checkoutButton.isDeinitializing(methodId);\n    }\n}\n","import { InternalCheckoutSelectors } from '../checkout';\n\nimport CheckoutButtonErrorSelector from './checkout-button-error-selector';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStatusSelector from './checkout-button-status-selector';\n\nexport default function createCheckoutButtonSelectors(selectors: InternalCheckoutSelectors): CheckoutButtonSelectors {\n    const errors = new CheckoutButtonErrorSelector(selectors);\n    const statuses = new CheckoutButtonStatusSelector(selectors);\n\n    return {\n        errors,\n        statuses,\n    };\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../checkout';\nimport { isElementId, setUniqueElementId } from '../common/dom';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport CheckoutButtonSelectors from './checkout-button-selectors';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonSelectors from './create-checkout-button-selectors';\n\n@bind\nexport default class CheckoutButtonInitializer {\n    private _state: CheckoutButtonSelectors;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _buttonStrategyActionCreator: CheckoutButtonStrategyActionCreator\n    ) {\n        this._state = createCheckoutButtonSelectors(this._store.getState());\n\n        this._store.subscribe(state => {\n            this._state = createCheckoutButtonSelectors(state);\n        });\n    }\n\n    /**\n     * Returns a snapshot of the current state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * state. You can query the state by calling any of its getter methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.errors.getInitializeButtonError());\n     * console.log(state.statuses.isInitializingButton());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutButtonSelectors {\n        return this._state;\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the current state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.statuses.isInitializingButton());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.errors.getInitializeButtonError();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.errors.getInitializeButtonError())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutButtonSelectors) => void,\n        ...filters: Array<(state: CheckoutButtonSelectors) => any>\n    ): () => void {\n        return this._store.subscribe(\n            () => subscriber(this.getState()),\n            state => state.checkoutButton.getState(),\n            ...filters.map(filter => (state: InternalCheckoutSelectors) => filter(createCheckoutButtonSelectors(state)))\n        );\n    }\n\n    /**\n     * Initializes the checkout button of a payment method.\n     *\n     * When the checkout button is initialized, it will be inserted into the DOM,\n     * ready to be interacted with by the customer.\n     *\n     * ```js\n     * initializer.initializeButton({\n     *     methodId: 'braintreepaypal',\n     *     containerId: 'checkoutButton',\n     *     braintreepaypal: {\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeButton(options: CheckoutButtonInitializeOptions): Promise<CheckoutButtonSelectors> {\n        const containerIds = isElementId(options.containerId) ?\n            [options.containerId] :\n            setUniqueElementId(options.containerId, `${options.methodId}-container`);\n\n        return Promise.all(\n            containerIds.map(containerId => {\n                const action = this._buttonStrategyActionCreator.initialize({ ...options, containerId });\n                const queueId = `checkoutButtonStrategy:${options.methodId}:${containerId}`;\n\n                return this._store.dispatch(action, { queueId });\n            })\n        )\n            .then(() => this.getState());\n    }\n\n    /**\n     * De-initializes the checkout button by performing any necessary clean-ups.\n     *\n     * ```js\n     * await service.deinitializeButton({\n     *     methodId: 'braintreepaypal',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the checkout button.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeButton(options: CheckoutButtonOptions): Promise<CheckoutButtonSelectors> {\n        const action = this._buttonStrategyActionCreator.deinitialize(options);\n        const queueId = `checkoutButtonStrategy:${options.methodId}`;\n\n        return this._store.dispatch(action, { queueId })\n            .then(() => this.getState());\n    }\n}\n","enum CheckoutButtonMethodType {\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    GOOGLEPAY_BRAINTREE = 'googlepaybraintree',\n    GOOGLEPAY_STRIPE = 'googlepaystripe',\n    MASTERPASS = 'masterpass',\n    PAYPALEXPRESS = 'paypalexpress',\n}\n\nexport default CheckoutButtonMethodType;\n","export default function isElementId(id: string): boolean {\n    return /^\\w[\\w\\-\\:\\.]*$/.test(id);\n}\n","import { uniqueId } from 'lodash';\n\nimport { InvalidArgumentError } from '../error/errors';\n\nexport default function setUniqueElementId(selector: string, idPrefix: string): string[] {\n    const containers = document.querySelectorAll(selector);\n\n    if (!containers.length) {\n        throw new InvalidArgumentError(`Unable to find any element with the specified selector: ${selector}`);\n    }\n\n    return Array.prototype.slice.call(containers)\n        .map((container: HTMLElement) => {\n            if (!container.id) {\n                container.id = uniqueId(idPrefix);\n            }\n\n            return container.id;\n        });\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator } from '../payment';\n\nimport { CheckoutButtonActionType, DeinitializeButtonAction, InitializeButtonAction } from './checkout-button-actions';\nimport { CheckoutButtonInitializeOptions, CheckoutButtonOptions } from './checkout-button-options';\nimport { CheckoutButtonStrategy } from './strategies';\n\nexport default class CheckoutButtonStrategyActionCreator {\n    constructor(\n        private _registry: Registry<CheckoutButtonStrategy>,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): ThunkAction<InitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId, containerId: options.containerId };\n\n            if (store.getState().checkoutButton.isInitialized(options.methodId, options.containerId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.InitializeButtonRequested, undefined, meta)),\n                this._paymentMethodActionCreator.loadPaymentMethod(options.methodId, { timeout: options.timeout, useCache: true }),\n                defer(() => this._registry.get(options.methodId).initialize(options)\n                    .then(() => createAction(CheckoutButtonActionType.InitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.InitializeButtonFailed, error, meta))\n            );\n        };\n    }\n\n    deinitialize(options: CheckoutButtonOptions): ThunkAction<DeinitializeButtonAction, InternalCheckoutSelectors> {\n        return store => {\n            const meta = { methodId: options.methodId };\n\n            if (!store.getState().checkoutButton.isInitialized(options.methodId)) {\n                return empty();\n            }\n\n            return concat(\n                of(createAction(CheckoutButtonActionType.DeinitializeButtonRequested, undefined, meta)),\n                defer(() => this._registry.get(options.methodId).deinitialize()\n                    .then(() => createAction(CheckoutButtonActionType.DeinitializeButtonSucceeded, undefined, meta)))\n            ).pipe(\n                catchError(error => throwErrorAction(CheckoutButtonActionType.DeinitializeButtonFailed, error, meta))\n            );\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { Address, LegacyAddress } from '../../../address';\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { PaymentMethod } from '../../../payment';\nimport { BraintreeAddress, BraintreeError, BraintreePaypalCheckout, BraintreeSDKCreator, BraintreeTokenizePayload } from '../../../payment/strategies/braintree';\nimport { PaypalAuthorizeData, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class BraintreePaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paypalCheckout?: BraintreePaypalCheckout;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _offerCredit: boolean = false\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = (this._offerCredit ? options.braintreepaypalcredit : options.braintreepaypal) || {};\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod || !paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return Promise.all([\n            this._braintreeSDKCreator.getPaypalCheckout(),\n            this._paypalScriptLoader.loadPaypal(),\n        ])\n            .then(([paypalCheckout, paypal]) => {\n                this._paypalCheckout = paypalCheckout;\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env: paymentMethod.config.testMode ? 'sandbox' : 'production',\n                    commit: paypalOptions.shouldProcessPayment ? true : false,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        label: this._offerCredit ? 'credit' : undefined,\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: () => this._setupPayment(paypalOptions.onPaymentError),\n                    onAuthorize: data => this._tokenizePayment(data, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paypalCheckout = undefined;\n        this._paymentMethod = undefined;\n\n        this._braintreeSDKCreator.teardown();\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(onError?: (error: BraintreeError | StandardError) => void): Promise<string> {\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const checkout = state.checkout.getCheckout();\n                const config = state.config.getStoreConfig();\n                const customer = state.customer.getCustomer();\n                const address = customer && customer.addresses && customer.addresses[0];\n\n                if (!this._paypalCheckout) {\n                    throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                return this._paypalCheckout.createPayment({\n                    flow: 'checkout',\n                    enableShippingAddress: true,\n                    shippingAddressEditable: false,\n                    shippingAddressOverride: address ? this._mapToBraintreeAddress(address) : undefined,\n                    amount: checkout.outstandingBalance,\n                    currency: config.currency.code,\n                    offerCredit: this._offerCredit,\n                });\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        shouldProcessPayment?: boolean,\n        onError?: (error: BraintreeError | StandardError) => void\n    ): Promise<BraintreeTokenizePayload> {\n        if (!this._paypalCheckout || !this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return Promise.all([\n            this._paypalCheckout.tokenizePayment(data),\n            this._braintreeSDKCreator.getDataCollector({ paypal: true }),\n        ])\n            .then(([payload, { deviceData }]) => {\n                this._formPoster.postForm('/checkout.php', {\n                    payment_type: 'paypal',\n                    provider: methodId,\n                    action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                    nonce: payload.nonce,\n                    device_data: deviceData,\n                    shipping_address: JSON.stringify(this._mapToLegacyShippingAddress(payload)),\n                    billing_address: JSON.stringify(this._mapToLegacyBillingAddress(payload)),\n                });\n\n                return payload;\n            })\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _mapToLegacyShippingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const shippingAddress = payload.details.shippingAddress;\n        const recipientName = shippingAddress && shippingAddress.recipientName || '';\n        const [firstName, lastName] = recipientName.split(' ');\n\n        return {\n            email: payload.details.email,\n            first_name: firstName,\n            last_name: lastName,\n            phone_number: shippingAddress && shippingAddress.phone || payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToLegacyBillingAddress(payload: BraintreeTokenizePayload): Partial<LegacyAddress> {\n        const billingAddress = payload.details.billingAddress;\n        const shippingAddress = payload.details.shippingAddress;\n\n        if (billingAddress) {\n            return {\n                email: payload.details.email,\n                first_name: billingAddress.firstName || payload.details.firstName,\n                last_name: billingAddress.lastName || payload.details.lastName,\n                phone_number: billingAddress.phone || payload.details.phone,\n                address_line_1: billingAddress.line1,\n                address_line_2: billingAddress.line2,\n                city: billingAddress.city,\n                state: billingAddress.state,\n                country_code: billingAddress.countryCode,\n                postal_code: billingAddress.postalCode,\n            };\n        }\n\n        return {\n            email: payload.details.email,\n            first_name: payload.details.firstName,\n            last_name: payload.details.lastName,\n            phone_number: payload.details.phone,\n            address_line_1: shippingAddress && shippingAddress.line1,\n            address_line_2: shippingAddress && shippingAddress.line2,\n            city: shippingAddress && shippingAddress.city,\n            state: shippingAddress && shippingAddress.state,\n            country_code: shippingAddress && shippingAddress.countryCode,\n            postal_code: shippingAddress && shippingAddress.postalCode,\n        };\n    }\n\n    private _mapToBraintreeAddress(address: Address): BraintreeAddress {\n        return {\n            line1: address.address1,\n            line2: address.address2,\n            city: address.city,\n            state: address.stateOrProvinceCode,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phone,\n            recipientName: `${address.firstName} ${address.lastName}`,\n        };\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class GooglePayButtonStrategy implements CheckoutButtonStrategy {\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _formPoster: FormPoster,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(() => this._googlePayPaymentProcessor.initialize(this._getMethodId()))\n            .then(() => {\n                this._walletButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.getElementById(containerId);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const googlePayButton = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(googlePayButton);\n\n        return googlePayButton;\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n}\n","import { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { getCallbackUrl, Masterpass, MasterpassCheckoutOptions, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class MasterpassButtonStrategy implements CheckoutButtonStrategy {\n    private _masterpassClient?: Masterpass;\n    private _methodId?: string;\n    private _signInButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const { containerId, methodId } = options;\n\n        if (!containerId || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"containerId\" argument is not provided.');\n        }\n\n        this._methodId = methodId;\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod || !paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._masterpassScriptLoader.load(paymentMethod.config.testMode);\n            })\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n                this._signInButton = this._createSignInButton(containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.removeEventListener('click', this._handleWalletButtonClick);\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve();\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const buttonContainer = document.getElementById(containerId);\n\n        if (!buttonContainer) {\n            throw new Error('Need a container to place the button');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        buttonContainer.appendChild(button);\n\n        button.addEventListener('click', this._handleWalletButtonClick);\n\n        return button;\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const paymentMethod = this._methodId ? state.paymentMethods.getPaymentMethod(this._methodId) : null;\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.cart.cartAmount.toString(),\n            currency: checkout.cart.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('cart'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(): void {\n        if (!this._masterpassClient) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        this._masterpassClient.checkout(this._createMasterpassPayload());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { pick } from 'lodash';\n\nimport { CheckoutActionCreator, CheckoutStore } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { PaymentMethod } from '../../../payment';\nimport { PaypalActions, PaypalAuthorizeData, PaypalClientToken, PaypalScriptLoader } from '../../../payment/strategies/paypal';\nimport { CheckoutButtonInitializeOptions } from '../../checkout-button-options';\nimport CheckoutButtonStrategy from '../checkout-button-strategy';\n\nexport default class PaypalButtonStrategy implements CheckoutButtonStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paypalScriptLoader: PaypalScriptLoader,\n        private _formPoster: FormPoster,\n        private _host: string = ''\n    ) {}\n\n    initialize(options: CheckoutButtonInitializeOptions): Promise<void> {\n        const paypalOptions = options.paypal;\n        const state = this._store.getState();\n        const paymentMethod = this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paypalOptions) {\n            throw new InvalidArgumentError();\n        }\n\n        return this._paypalScriptLoader.loadPaypal()\n            .then(paypal => {\n                if (!paymentMethod || !paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const merchantId = paymentMethod.config.merchantId;\n                const env = paymentMethod.config.testMode ? 'sandbox' : 'production';\n                const clientToken: PaypalClientToken = { [env]: paypalOptions.clientId };\n\n                const allowedSources = [];\n                const disallowedSources = [];\n\n                if (paypalOptions.allowCredit) {\n                    allowedSources.push(paypal.FUNDING.CREDIT);\n                } else {\n                    disallowedSources.push(paypal.FUNDING.CREDIT);\n                }\n\n                return paypal.Button.render({\n                    env,\n                    client: clientToken,\n                    commit: paypalOptions.shouldProcessPayment,\n                    funding: {\n                        allowed: allowedSources,\n                        disallowed: disallowedSources,\n                    },\n                    style: {\n                        shape: 'rect',\n                        ...pick(paypalOptions.style, 'layout', 'size', 'color', 'label', 'shape', 'tagline', 'fundingicons'),\n                    },\n                    payment: (data, actions) => this._setupPayment(merchantId, actions, paypalOptions.onPaymentError),\n                    onAuthorize: (data, actions) => this._tokenizePayment(data, actions, paypalOptions.shouldProcessPayment, paypalOptions.onAuthorizeError),\n                }, options.containerId);\n            });\n    }\n\n    deinitialize(): Promise<void> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve();\n    }\n\n    private _setupPayment(merchantId: string, actions?: PaypalActions, onError?: (error: StandardError) => void): Promise<string> {\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        return this._store.dispatch(this._checkoutActionCreator.loadDefaultCheckout())\n            .then(state => {\n                const cart = state.cart.getCart();\n                const cartId = cart ? cart.id : '';\n\n                return actions.request.post(`${this._host}/api/storefront/payment/paypalexpress`, { merchantId, cartId }, {\n                    headers: {\n                        'X-API-INTERNAL': INTERNAL_USE_ONLY,\n                    },\n                });\n            })\n            .then(res => res.id)\n            .catch(error => {\n                if (onError) {\n                    onError(error);\n                }\n\n                throw error;\n            });\n    }\n\n    private _tokenizePayment(\n        data: PaypalAuthorizeData,\n        actions?: PaypalActions,\n        shouldProcessPayment?: boolean,\n        onError?: (error: StandardError) => void\n    ): Promise<void> {\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!actions) {\n            throw new NotInitializedError(NotInitializedErrorType.CheckoutButtonNotInitialized);\n        }\n\n        if (!data.paymentID || !data.payerID) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const methodId = this._paymentMethod.id;\n\n        return actions.payment.get(data.paymentID).then(payload => {\n            this._formPoster.postForm('/checkout.php', {\n                payment_type: 'paypal',\n                provider: methodId,\n                action: shouldProcessPayment ? 'process_payment' : 'set_external_checkout',\n                paymentId: data.paymentID,\n                payerId: data.payerID,\n                payerInfo: JSON.stringify(payload.payer.payer_info),\n            });\n        });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { createCheckoutStore } from '../checkout';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\n\nimport CheckoutButtonInitializer from './checkout-button-initializer';\nimport CheckoutButtonInitializerOptions from './checkout-button-initializer-options';\nimport CheckoutButtonStrategyActionCreator from './checkout-button-strategy-action-creator';\nimport createCheckoutButtonRegistry from './create-checkout-button-registry';\n\n/**\n * Creates an instance of `CheckoutButtonInitializer`.\n *\n * @remarks\n * ```js\n * const initializer = createCheckoutButtonInitializer();\n *\n * initializer.initializeButton({\n *     methodId: 'braintreepaypal',\n *     braintreepaypal: {\n *         container: '#checkoutButton',\n *     },\n * });\n * ```\n *\n * @alpha\n * Please note that `CheckoutButtonInitializer` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutButtonInitializer`.\n */\nexport default function createCheckoutButtonInitializer(\n    options?: CheckoutButtonInitializerOptions\n): CheckoutButtonInitializer {\n    const host = options && options.host;\n    const store = createCheckoutStore();\n    const requestSender = createRequestSender({ host });\n    const formPoster = createFormPoster({ host });\n\n    return new CheckoutButtonInitializer(\n        store,\n        new CheckoutButtonStrategyActionCreator(\n            createCheckoutButtonRegistry(store, requestSender, formPoster, host),\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender))\n        )\n    );\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { BraintreeScriptLoader, BraintreeSDKCreator } from '../payment/strategies/braintree';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { PaypalScriptLoader } from '../payment/strategies/paypal';\n\nimport { CheckoutButtonMethodType, CheckoutButtonStrategy } from './strategies';\nimport { BraintreePaypalButtonStrategy } from './strategies/braintree';\nimport { GooglePayButtonStrategy } from './strategies/googlepay';\nimport { MasterpassButtonStrategy } from './strategies/masterpass';\nimport { PaypalButtonStrategy } from './strategies/paypal';\n\nexport default function createCheckoutButtonRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender,\n    formPoster: FormPoster,\n    host?: string\n): Registry<CheckoutButtonStrategy, CheckoutButtonMethodType> {\n    const registry = new Registry<CheckoutButtonStrategy, CheckoutButtonMethodType>();\n    const scriptLoader = getScriptLoader();\n    const checkoutActionCreator = new CheckoutActionCreator(\n        new CheckoutRequestSender(requestSender),\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new BraintreeSDKCreator(new BraintreeScriptLoader(scriptLoader)),\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            true\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.MASTERPASS, () =>\n        new MasterpassButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        ));\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_BRAINTREE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.GOOGLEPAY_STRIPE, () =>\n        new GooglePayButtonStrategy(\n            store,\n            formPoster,\n            checkoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(CheckoutButtonMethodType.PAYPALEXPRESS, () =>\n        new PaypalButtonStrategy(\n            store,\n            checkoutActionCreator,\n            new PaypalScriptLoader(scriptLoader),\n            formPoster,\n            host\n        )\n    );\n\n    return registry;\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport enum NotEmbeddableErrorType {\n    MissingContainer = 'missing_container',\n    MissingContent = 'missing_content',\n    UnknownError = 'unknown_error',\n}\n\nexport default class NotEmbeddableError extends StandardError {\n    constructor(\n        message?: string,\n        public subtype: NotEmbeddableErrorType = NotEmbeddableErrorType.UnknownError\n    ) {\n        super(message || 'Unable to embed the checkout form.');\n\n        this.name = 'NotEmbeddableError';\n        this.type = 'not_embeddable';\n    }\n}\n","import { default as storage } from 'local-storage-fallback';\n\nexport default class BrowserStorage {\n    constructor(\n        private _namespace: string\n    ) {}\n\n    getItem<TValue = any>(key: string): TValue | null {\n        const rawValue = storage.getItem(this.withNamespace(key));\n\n        if (rawValue === null) {\n            return null;\n        }\n\n        try {\n            return JSON.parse(rawValue);\n        } catch (error) {\n            // Clean up invalid values\n            this.removeItem(this.withNamespace(key));\n\n            return null;\n        }\n    }\n\n    getItemOnce<TValue = any>(key: string): TValue | null {\n        const value = this.getItem(key);\n\n        this.removeItem(key);\n\n        return value;\n    }\n\n    setItem<TValue = any>(key: string, value: TValue): void {\n        return storage.setItem(this.withNamespace(key), JSON.stringify(value));\n    }\n\n    removeItem(key: string): void {\n        return storage.removeItem(this.withNamespace(key));\n    }\n\n    private withNamespace(key: string): string {\n        return `${this._namespace}.${key}`;\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport { InternalErrorResponseBody } from '../../common/error';\nimport { RequestError } from '../../common/error/errors';\n\nexport default class InvalidLoginTokenError extends RequestError {\n    constructor(response: Response<InternalErrorResponseBody>) {\n        super(response, { message: response.body.title });\n\n        this.name = 'InvalidLoginTokenError';\n        this.type = 'invalid_login_token';\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { IFrameComponent } from 'iframe-resizer';\n\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport EmbeddedCheckoutError from './embedded-checkout-error';\nimport { EmbeddedCheckoutEventMap, EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { InvalidLoginTokenError, NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport { EmbeddedContentEvent, EmbeddedContentEventType } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst CAN_RETRY_ALLOW_COOKIE = 'canRetryAllowCookie';\nconst IS_COOKIE_ALLOWED_KEY = 'isCookieAllowed';\n\n@bind\nexport default class EmbeddedCheckout {\n    private _iframe?: IFrameComponent;\n    private _isAttached: boolean;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _iframeCreator: ResizableIframeCreator,\n        private _messageListener: IframeEventListener<EmbeddedCheckoutEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedContentEvent>,\n        private _loadingIndicator: LoadingIndicator,\n        private _requestSender: RequestSender,\n        private _storage: BrowserStorage,\n        private _location: Location,\n        private _options: EmbeddedCheckoutOptions\n    ) {\n        this._isAttached = false;\n\n        if (this._options.onComplete) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutComplete, this._options.onComplete);\n        }\n\n        if (this._options.onError) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutError, this._options.onError);\n        }\n\n        if (this._options.onLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.CheckoutLoaded, this._options.onLoad);\n        }\n\n        if (this._options.onFrameLoad) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, this._options.onFrameLoad);\n        }\n\n        if (this._options.onSignOut) {\n            this._messageListener.addListener(EmbeddedCheckoutEventType.SignedOut, this._options.onSignOut);\n        }\n\n        this._messageListener.addListener(EmbeddedCheckoutEventType.FrameLoaded, () => this._configureStyles());\n    }\n\n    attach(): Promise<this> {\n        if (this._isAttached) {\n            return Promise.resolve(this);\n        }\n\n        this._isAttached = true;\n        this._messageListener.listen();\n        this._loadingIndicator.show(this._options.containerId);\n\n        return this._allowCookie()\n            .then(() => this._attemptLogin())\n            .then(url => this._iframeCreator.createFrame(url, this._options.containerId))\n            .then(iframe => {\n                this._iframe = iframe;\n\n                this._configureStyles();\n                this._loadingIndicator.hide();\n            })\n            .catch(error => {\n                this._isAttached = false;\n\n                return this._retryAllowCookie(error)\n                    .catch(() => {\n                        this._messageListener.trigger({\n                            type: EmbeddedCheckoutEventType.FrameError,\n                            payload: error,\n                        });\n\n                        this._loadingIndicator.hide();\n\n                        throw error;\n                    });\n            })\n            .then(() => this);\n    }\n\n    detach(): void {\n        if (!this._isAttached) {\n            return;\n        }\n\n        this._isAttached = false;\n        this._messageListener.stopListen();\n\n        if (this._iframe && this._iframe.parentNode) {\n            this._iframe.parentNode.removeChild(this._iframe);\n            this._iframe.iFrameResizer.close();\n        }\n    }\n\n    private _configureStyles(): void {\n        if (!this._iframe || !this._iframe.contentWindow || !this._options.styles) {\n            return;\n        }\n\n        this._messagePoster.setTarget(this._iframe.contentWindow);\n\n        this._messagePoster.post({\n            type: EmbeddedContentEventType.StyleConfigured,\n            payload: this._options.styles,\n        });\n    }\n\n    private _attemptLogin(): Promise<string> {\n        if (!/^\\/login\\/token/.test(parseUrl(this._options.url).pathname)) {\n            return Promise.resolve(this._options.url);\n        }\n\n        return this._requestSender.post(this._options.url)\n            .then(({ body: { redirectUrl } }) => redirectUrl)\n            .catch(response => Promise.reject(new InvalidLoginTokenError(response)));\n    }\n\n    /**\n     * This workaround is required for certain browsers (namely Safari) that\n     * prevent session cookies to be set for a third party website unless the\n     * user has recently visited such website. Therefore, before we attempt to\n     * login or set an active cart in the session, we need to first redirect the\n     * user to the domain of Embedded Checkout.\n     */\n    private _allowCookie(): Promise<void> {\n        if (this._storage.getItem(IS_COOKIE_ALLOWED_KEY)) {\n            // It could be possible that the flag is set to true but the browser\n            // has already removed the permission to store cookie. In that case,\n            // we should try to redirect the user again.\n            this._storage.setItem(CAN_RETRY_ALLOW_COOKIE, true);\n\n            return Promise.resolve();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.setItem(IS_COOKIE_ALLOWED_KEY, true);\n\n        const { origin } = parseUrl(this._options.url);\n        const redirectUrl = `${origin}/embedded-checkout/allow-cookie?returnUrl=${encodeURIComponent(this._location.href)}`;\n\n        document.body.style.visibility = 'hidden';\n        this._location.replace(redirectUrl);\n\n        return new Promise<never>(() => {});\n    }\n\n    private _retryAllowCookie(error: EmbeddedCheckoutError): Promise<void> {\n        const canRetry = (\n            this._storage.getItem(CAN_RETRY_ALLOW_COOKIE) &&\n            error instanceof NotEmbeddableError &&\n            error.subtype === NotEmbeddableErrorType.MissingContent\n        );\n\n        if (!canRetry) {\n            return Promise.reject();\n        }\n\n        this._storage.removeItem(CAN_RETRY_ALLOW_COOKIE);\n        this._storage.removeItem(IS_COOKIE_ALLOWED_KEY);\n\n        return this._allowCookie();\n    }\n}\n","import { LoadingIndicatorStyles } from './embedded-checkout-styles';\n\nconst DEFAULT_STYLES: LoadingIndicatorStyles = {\n    size: 70,\n    color: '#d9d9d9',\n    backgroundColor: '#ffffff',\n};\n\nconst ROTATION_ANIMATION = 'embedded-checkout-loading-indicator-rotation';\n\nexport default class LoadingIndicator {\n    private _container: HTMLElement;\n    private _indicator: HTMLElement;\n    private _styles: LoadingIndicatorStyles;\n\n    constructor(\n        options?: { styles?: LoadingIndicatorStyles }\n    ) {\n        this._styles = { ...DEFAULT_STYLES, ...options && options.styles };\n\n        this._defineAnimation();\n\n        this._container = this._buildContainer();\n        this._indicator = this._buildIndicator();\n\n        this._container.appendChild(this._indicator);\n    }\n\n    show(parentId?: string): void {\n        if (parentId) {\n            const parent = document.getElementById(parentId);\n\n            if (!parent) {\n                throw new Error('Unable to attach the loading indicator because the parent ID is not valid.');\n            }\n\n            parent.appendChild(this._container);\n        }\n\n        this._container.style.visibility = 'visible';\n        this._container.style.opacity = '1';\n    }\n\n    hide(): void {\n        const handleTransitionEnd = () => {\n            this._container.style.visibility = 'hidden';\n\n            this._container.removeEventListener('transitionend', handleTransitionEnd);\n        };\n\n        this._container.addEventListener('transitionend', handleTransitionEnd);\n\n        this._container.style.opacity = '0';\n    }\n\n    private _buildContainer(): HTMLElement {\n        const container = document.createElement('div');\n\n        container.style.display = 'block';\n        container.style.bottom = '0';\n        container.style.left = '0';\n        container.style.height = '100%';\n        container.style.width = '100%';\n        container.style.position = 'absolute';\n        container.style.right = '0';\n        container.style.top = '0';\n        container.style.transition = 'all 250ms ease-out';\n        container.style.opacity = '0';\n\n        return container;\n    }\n\n    private _buildIndicator(): HTMLElement {\n        const indicator = document.createElement('div');\n\n        indicator.style.display = 'block';\n        indicator.style.width = `${this._styles.size}px`;\n        indicator.style.height = `${this._styles.size}px`;\n        indicator.style.borderRadius = `${this._styles.size}px`;\n        indicator.style.border = 'solid 1px';\n        indicator.style.borderColor = `${this._styles.backgroundColor} ${this._styles.backgroundColor} ${this._styles.color} ${this._styles.color}`;\n        indicator.style.margin = '0 auto';\n        indicator.style.position = 'absolute';\n        indicator.style.left = '0';\n        indicator.style.right = '0';\n        indicator.style.top = '50%';\n        indicator.style.transform = 'translateY(-50%) rotate(0deg)';\n        indicator.style.transformStyle = 'preserve-3d';\n        indicator.style.animation = `${ROTATION_ANIMATION} 500ms infinite cubic-bezier(0.69, 0.31, 0.56, 0.83)`;\n\n        return indicator;\n    }\n\n    private _defineAnimation(): void {\n        // In order to define CSS animation, we need to insert a stylesheet into the host frame.\n        // We only have to do it once.\n        if (document.getElementById(ROTATION_ANIMATION)) {\n            return;\n        }\n\n        const style = document.createElement('style');\n\n        style.id = ROTATION_ANIMATION;\n\n        document.head.appendChild(style);\n\n        if (style.sheet instanceof CSSStyleSheet) {\n            style.sheet.insertRule(`\n                @keyframes ${ROTATION_ANIMATION} {\n                    0% { transform: translateY(-50%) rotate(0deg); }\n                    100% { transform: translateY(-50%) rotate(360deg); }\n                }\n            `);\n        }\n    }\n}\n","import { iframeResizer, IFrameComponent } from 'iframe-resizer';\n\nimport { parseUrl } from '../common/url';\n\nimport { EmbeddedCheckoutEventType } from './embedded-checkout-events';\nimport { NotEmbeddableError, NotEmbeddableErrorType } from './errors';\nimport isIframeEvent from './is-iframe-event';\n\nexport default class ResizableIframeCreator {\n    constructor(\n        private _options?: { timeout: number }\n    ) {}\n\n    createFrame(src: string, containerId: string): Promise<IFrameComponent> {\n        const container = document.getElementById(containerId);\n        const { timeout = 60000 } = this._options || {};\n\n        if (!container) {\n            throw new NotEmbeddableError(\n                'Unable to embed the iframe because the container element could not be found.',\n                NotEmbeddableErrorType.MissingContainer\n            );\n        }\n\n        const iframe = document.createElement('iframe');\n\n        iframe.src = src;\n        iframe.style.border = 'none';\n        iframe.style.display = 'none';\n        iframe.style.width = '100%';\n        iframe.allowPaymentRequest = true;\n\n        container.appendChild(iframe);\n\n        return this._toResizableFrame(iframe, timeout)\n            .catch(error => {\n                container.removeChild(iframe);\n\n                throw error;\n            });\n    }\n\n    private _toResizableFrame(iframe: HTMLIFrameElement, timeoutInterval: number): Promise<IFrameComponent> {\n        // Can't simply listen to `load` event because it always gets triggered even if there's an error.\n        // Instead, listen to the `load` inside the iframe and let the parent frame know when it happens.\n        return new Promise((resolve, reject) => {\n            const timeout = window.setTimeout(() => {\n                reject(new NotEmbeddableError('Unable to embed the iframe because the content could not be loaded.'));\n            }, timeoutInterval);\n\n            const handleMessage = (event: MessageEvent) => {\n                if (event.origin !== parseUrl(iframe.src).origin) {\n                    return;\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameError)) {\n                    teardown();\n                    reject(new NotEmbeddableError(event.data.payload.message, NotEmbeddableErrorType.MissingContent));\n                }\n\n                if (isIframeEvent(event.data, EmbeddedCheckoutEventType.FrameLoaded)) {\n                    iframe.style.display = '';\n\n                    const contentId = event.data.payload && event.data.payload.contentId;\n                    const iframes = iframeResizer({\n                        scrolling: false,\n                        sizeWidth: false,\n                        heightCalculationMethod: contentId ? 'taggedElement' : 'lowestElement',\n                    }, iframe);\n\n                    teardown();\n                    resolve(iframes[iframes.length - 1]);\n                }\n            };\n\n            const teardown = () => {\n                window.removeEventListener('message', handleMessage);\n                window.clearTimeout(timeout);\n            };\n\n            window.addEventListener('message', handleMessage);\n        });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\n\nimport { BrowserStorage } from '../common/storage';\nimport { parseUrl } from '../common/url';\n\nimport EmbeddedCheckout from './embedded-checkout';\nimport { EmbeddedCheckoutEventMap } from './embedded-checkout-events';\nimport EmbeddedCheckoutOptions from './embedded-checkout-options';\nimport { EmbeddedContentEvent } from './iframe-content/embedded-content-events';\nimport IframeEventListener from './iframe-event-listener';\nimport IframeEventPoster from './iframe-event-poster';\nimport LoadingIndicator from './loading-indicator';\nimport ResizableIframeCreator from './resizable-iframe-creator';\n\nconst STORAGE_PREFIX = 'BigCommerce.EmbeddedCheckout';\n\n/**\n * Embed the checkout form in an iframe.\n *\n * @remarks\n * Once the iframe is embedded, it will automatically resize according to the\n * size of the checkout form. It will also notify the parent window when certain\n * events have occurred. i.e.: when the form is loaded and ready to be used.\n *\n * ```js\n * embedCheckout({\n *     url: 'https://checkout/url',\n *     containerId: 'container-id',\n * });\n * ```\n *\n * @param options - Options for embedding the checkout form.\n * @returns A promise that resolves to an instance of `EmbeddedCheckout`.\n */\nexport default function embedCheckout(options: EmbeddedCheckoutOptions): Promise<EmbeddedCheckout> {\n    const origin = parseUrl(options.url).origin;\n    const embeddedCheckout = new EmbeddedCheckout(\n        new ResizableIframeCreator(),\n        new IframeEventListener<EmbeddedCheckoutEventMap>(origin),\n        new IframeEventPoster<EmbeddedContentEvent>(origin),\n        new LoadingIndicator({ styles: options.styles && options.styles.loadingIndicator }),\n        createRequestSender(),\n        new BrowserStorage(STORAGE_PREFIX),\n        window.location,\n        options\n    );\n\n    return embeddedCheckout.attach();\n}\n","module.exports = require(\"@bigcommerce/bigpay-client\");","module.exports = require(\"messageformat\");","import { Response } from '@bigcommerce/request-sender';\n\nimport RequestError from './request-error';\n\nexport default class TimeoutError extends RequestError<{}> {\n    constructor(response?: Response) {\n        super(response, {\n            message: 'The request has timed out or aborted.',\n        });\n\n        this.name = 'TimeoutError';\n        this.type = 'timeout';\n    }\n}\n","import { createSelector as defaultSelectorCreator } from 'reselect';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\n/**\n * This is a decorated version of Reselect's default `createSelector` function.\n * If the return value of the combiner function is a function, it will create a\n * memorized version of that function and return it instead.\n */\nexport default withMemoizedCombiner(defaultSelectorCreator);\n","import { uniq } from 'lodash';\n\nexport default function joinIncludes(includes: string[]): string {\n    return uniq(includes).join(',');\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { cachableAction, ActionOptions } from '../common/data-store';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ConfigRequestSender } from '.';\nimport { ConfigActionType, LoadConfigAction } from './config-actions';\n\nexport default class ConfigActionCreator {\n    constructor(\n        private _configRequestSender: ConfigRequestSender\n    ) {}\n\n    @cachableAction\n    loadConfig(options?: RequestOptions & ActionOptions): Observable<LoadConfigAction> {\n        return Observable.create((observer: Observer<LoadConfigAction>) => {\n            observer.next(createAction(ConfigActionType.LoadConfigRequested));\n\n            this._configRequestSender.loadConfig(options)\n                .then(response => {\n                    observer.next(createAction(ConfigActionType.LoadConfigSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ConfigActionType.LoadConfigFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { ContentType, INTERNAL_USE_ONLY, RequestOptions } from '../common/http-request';\n\nimport Config from './config';\n\nexport default class ConfigRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadConfig({ timeout }: RequestOptions = {}): Promise<Response<Config>> {\n        const url = '/api/storefront/checkout-settings';\n\n        return this._requestSender.get(url, {\n            timeout,\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Response } from '@bigcommerce/request-sender';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Checkout, InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { GuestCredentials } from '../customer';\n\nimport { BillingAddressRequestSender } from '.';\nimport { BillingAddressUpdateRequestBody } from './billing-address';\nimport { BillingAddressActionType, ContinueAsGuestAction, UpdateBillingAddressAction } from './billing-address-actions';\n\nexport default class BillingAddressActionCreator {\n    constructor(\n        private _requestSender: BillingAddressRequestSender\n    ) {}\n\n    continueAsGuest(\n        credentials: GuestCredentials,\n        options?: RequestOptions\n    ): ThunkAction<ContinueAsGuestAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ContinueAsGuestAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            const customer = state.customer.getCustomer();\n\n            if (customer && !customer.isGuest) {\n                throw new StandardError('Cannot continue as guest: customer is logged in.');\n            }\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            let billingAddressRequestBody;\n\n            if (!billingAddress) {\n                billingAddressRequestBody = credentials;\n            } else {\n                const { country, ...existingBillingAddressRequestBody } = billingAddress;\n\n                billingAddressRequestBody = {\n                    ...existingBillingAddressRequestBody,\n                    ...credentials,\n                };\n            }\n\n            observer.next(createAction(BillingAddressActionType.ContinueAsGuestRequested));\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.ContinueAsGuestSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.ContinueAsGuestFailed, response));\n                });\n        });\n    }\n\n    updateAddress(\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): ThunkAction<UpdateBillingAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<UpdateBillingAddressAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(BillingAddressActionType.UpdateBillingAddressRequested));\n\n            const billingAddress = state.billingAddress.getBillingAddress();\n\n            // If email is not present in the address provided by the client, then\n            // fall back to the stored email as it could have been set separately\n            // using a convenience method. We can't rely on billingAddress having\n            // an ID to consider that there's a preexisting email, as billingAddress\n            // object from Order doesn't have an ID.\n            const billingAddressRequestBody = {\n                ...address,\n                email: typeof address.email === 'undefined' && billingAddress ? billingAddress.email : address.email,\n            };\n\n            if (billingAddress && billingAddress.id) {\n                billingAddressRequestBody.id = billingAddress.id;\n            }\n\n            this._createOrUpdateBillingAddress(checkout.id, billingAddressRequestBody, options)\n                .then(({ body }) => {\n                    observer.next(createAction(BillingAddressActionType.UpdateBillingAddressSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(BillingAddressActionType.UpdateBillingAddressFailed, response));\n                });\n        });\n    }\n\n    private _createOrUpdateBillingAddress(\n        checkoutId: string,\n        address: Partial<BillingAddressUpdateRequestBody>,\n        options?: RequestOptions\n    ): Promise<Response<Checkout>> {\n        if (!address.id) {\n            return this._requestSender.createAddress(checkoutId, address, options);\n        }\n\n        return this._requestSender.updateAddress(checkoutId, address, options);\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../address';\nimport { Checkout } from '../checkout';\nimport { ContentType, RequestOptions } from '../common/http-request';\n\nimport { BillingAddressUpdateRequestBody } from './billing-address';\n\nconst DEFAULT_PARAMS = {\n    include: [\n        'cart.lineItems.physicalItems.options',\n        'cart.lineItems.digitalItems.options',\n        'customer',\n        'promotions.banners',\n    ].join(','),\n};\n\nexport default class BillingAddressRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    createAddress(checkoutId: string, address: Partial<AddressRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, { body: address, params: DEFAULT_PARAMS, headers, timeout });\n    }\n\n    updateAddress(checkoutId: string, address: Partial<BillingAddressUpdateRequestBody>, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const { id, ...body } = address;\n        const url = `/api/storefront/checkouts/${checkoutId}/billing-address/${id}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.put(url, { params: DEFAULT_PARAMS, body, headers, timeout });\n    }\n}\n","import { InvalidArgumentError } from '../error/errors';\n\nexport default class Registry<T, K extends string = string> {\n    private _factories: { [key: string]: Factory<T> };\n    private _instances: { [key: string]: T };\n    private _options: RegistryOptions;\n\n    constructor(options?: RegistryOptions) {\n        this._factories = {};\n        this._instances = {};\n        this._options = { defaultToken: 'default', ...options };\n    }\n\n    get(token?: K, cacheToken?: string): T {\n        try {\n            return this._getInstance(\n                token || this._options.defaultToken,\n                cacheToken || token || this._options.defaultToken\n            );\n        } catch (error) {\n            return this._getInstance(\n                this._options.defaultToken,\n                cacheToken || this._options.defaultToken\n            );\n        }\n    }\n\n    register(token: K, factory: Factory<T>): void {\n        if (this._hasFactory(token)) {\n            throw new InvalidArgumentError(`'${token}' is already registered.`);\n        }\n\n        this._factories[token] = factory;\n    }\n\n    protected _hasFactory(token: string): boolean {\n        return !!this._factories[token];\n    }\n\n    private _hasInstance(token: string): boolean {\n        return !!this._instances[token];\n    }\n\n    private _getInstance(token: string, cacheToken: string): T {\n        if (!this._hasInstance(cacheToken)) {\n            const factory = this._factories[token];\n\n            if (!factory) {\n                throw new InvalidArgumentError(`'${token}' is not registered.`);\n            }\n\n            this._instances[cacheToken] = factory();\n        }\n\n        return this._instances[cacheToken];\n    }\n}\n\nexport type Factory<T> = () => T;\n\nexport interface RegistryOptions {\n    defaultToken: string;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { Masterpass, MasterpassHostWindow } from './masterpass';\n\nexport default class MasterpassScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: MasterpassHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<Masterpass> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox.' : ''}masterpass.com/integration/merchant.js`)\n            .then(() => {\n                if (!this._window.masterpass) {\n                    throw new StandardError();\n                }\n\n                return this._window.masterpass;\n            });\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class RemoteCheckoutSynchronizationError extends StandardError {\n    constructor(\n        public error?: Error\n    ) {\n        super('Unable to synchronize your checkout details with a third party provider. Please try again later.');\n\n        this.name = 'RemoteCheckoutSynchronizationError';\n        this.type = 'remote_checkout_synchronization';\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeSDKCreator, GooglePayBraintreeSDK } from '../braintree';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\nimport { GooglePayBraintreeDataRequest, GooglePayBraintreePaymentDataRequestV1 } from './googlepay-braintree';\n\nexport default class GooglePayBraintreeInitializer implements GooglePayInitializer {\n    private _googlePaymentInstance!: GooglePayBraintreeSDK;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator\n    ) {}\n\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        if (!paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._braintreeSDKCreator.initialize(paymentMethod.clientToken);\n\n        return this._braintreeSDKCreator.getGooglePaymentComponent()\n            .then(googleBraintreePaymentInstance => {\n                this._googlePaymentInstance = googleBraintreePaymentInstance;\n\n                return this._createGooglePayPayload(\n                    checkout,\n                    paymentMethod.initializationData,\n                    hasShippingAddress\n                );\n            });\n    }\n\n    teardown(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token).androidPayCards[0];\n\n        return {\n            nonce: payload.nonce,\n            type: payload.type,\n            description: payload.description,\n            details: {\n                cardType: payload.details.cardType,\n                lastFour: payload.details.lastFour,\n                lastTwo: payload.details.lastTwo,\n            },\n            binData: payload.binData,\n        };\n    }\n\n    private _createGooglePayPayload(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        if (!initializationData.platformToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const googlePayBraintreePaymentDataRequest: GooglePayBraintreeDataRequest = {\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantName: initializationData.googleMerchantName,\n                merchantId: initializationData.googleMerchantId,\n            },\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.outstandingBalance, 2).toFixed(2),\n            },\n            cardRequirements: {\n                billingAddressRequired: true,\n                billingAddressFormat: 'FULL',\n            },\n            shippingAddressRequired: !hasShippingAddress,\n            emailRequired: true,\n            phoneNumberRequired: true,\n        };\n\n        return this._mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(\n            this._googlePaymentInstance.createPaymentDataRequest(googlePayBraintreePaymentDataRequest)\n        );\n    }\n\n    private _mapGooglePayBraintreeDataRequestToGooglePayDataRequestV2(googlePayBraintreeDataRequestV1: GooglePayBraintreePaymentDataRequestV1): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: googlePayBraintreeDataRequestV1.merchantInfo.authJwt,\n                merchantId: googlePayBraintreeDataRequestV1.merchantInfo.merchantId,\n                merchantName: googlePayBraintreeDataRequestV1.merchantInfo.merchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: googlePayBraintreeDataRequestV1.cardRequirements.allowedCardNetworks,\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'braintree',\n                        'braintree:apiVersion': 'v1',\n                        'braintree:authorizationFingerprint': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:authorizationFingerprint'],\n                        'braintree:merchantId': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:merchantId'],\n                        'braintree:sdkVersion': googlePayBraintreeDataRequestV1.paymentMethodTokenizationParameters.parameters['braintree:sdkVersion'],\n                    },\n                },\n            }],\n            transactionInfo: googlePayBraintreeDataRequestV1.transactionInfo,\n            emailRequired: true,\n            shippingAddressRequired: googlePayBraintreeDataRequestV1.shippingAddressRequired,\n            shippingAddressParameters: {\n                phoneNumberRequired: googlePayBraintreeDataRequestV1.phoneNumberRequired,\n            },\n        };\n    }\n}\n","import { round } from 'lodash';\n\nimport { Checkout } from '../../../checkout';\nimport { InvalidArgumentError } from '../../../common/error/errors';\nimport PaymentMethod from '../../payment-method';\n\nimport {\n    GooglePaymentData,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    TokenizePayload\n} from './googlepay';\n\nexport default class GooglePayStripeInitializer implements GooglePayInitializer {\n    initialize(\n        checkout: Checkout,\n        paymentMethod: PaymentMethod,\n        hasShippingAddress: boolean\n    ): Promise<GooglePayPaymentDataRequestV2> {\n        return Promise.resolve(this._mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n            checkout,\n            paymentMethod.initializationData,\n            hasShippingAddress\n        ));\n    }\n\n    teardown(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload {\n        try {\n            const payload = JSON.parse(paymentData.paymentMethodData.tokenizationData.token);\n\n            return {\n                nonce: payload.id,\n                type: payload.type,\n                details: {\n                    cardType: payload.card.brand,\n                    lastFour: payload.card.last4,\n                },\n            };\n        } catch (err) {\n            throw new InvalidArgumentError('Unable to parse response from Google Pay.');\n        }\n    }\n\n    private _mapGooglePayStripeDataRequestToGooglePayDataRequestV2(\n        checkout: Checkout,\n        initializationData: any,\n        hasShippingAddress: boolean\n    ): GooglePayPaymentDataRequestV2 {\n        return {\n            apiVersion: 2,\n            apiVersionMinor: 0,\n            merchantInfo: {\n                authJwt: initializationData.platformToken,\n                merchantId: initializationData.googleMerchantId,\n                merchantName: initializationData.googleMerchantName,\n            },\n            allowedPaymentMethods: [{\n                type: 'CARD',\n                parameters: {\n                    allowedAuthMethods: ['PAN_ONLY', 'CRYPTOGRAM_3DS'],\n                    allowedCardNetworks: ['AMEX', 'DISCOVER', 'JCB', 'MASTERCARD', 'VISA'],\n                    billingAddressRequired: true,\n                    billingAddressParameters: {\n                        format: 'FULL',\n                        phoneNumberRequired: true,\n                    },\n                },\n                tokenizationSpecification: {\n                    type: 'PAYMENT_GATEWAY',\n                    parameters: {\n                        gateway: 'stripe',\n                        'stripe:version': initializationData.stripeVersion,\n                        'stripe:publishableKey': initializationData.stripePublishableKey,\n                    },\n                },\n            }],\n            transactionInfo: {\n                currencyCode: checkout.cart.currency.code,\n                totalPriceStatus: 'FINAL',\n                totalPrice: round(checkout.outstandingBalance, 2).toFixed(2),\n            },\n            emailRequired: true,\n            shippingAddressRequired: !hasShippingAddress,\n            shippingAddressParameters: {\n                phoneNumberRequired: true,\n            },\n        };\n    }\n}\n","import { mapToInternalAddress } from '../address';\nimport { BillingAddress } from '../billing';\n\nimport { Customer } from '.';\nimport InternalCustomer from './internal-customer';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCustomer(customer: Customer, billingAddress: BillingAddress): InternalCustomer {\n    const firstName = customer.firstName || billingAddress.firstName || '';\n    const lastName = customer.lastName || billingAddress.lastName || '';\n\n    return {\n        addresses: (customer.addresses || []).map(address => mapToInternalAddress(address)),\n        customerId: customer.id,\n        isGuest: customer.isGuest,\n        storeCredit: customer.storeCredit,\n        email: customer.email || billingAddress.email || '',\n        firstName,\n        lastName,\n        name: customer.fullName || [firstName, lastName].join(' '),\n    };\n}\n","import GiftCertificate from './gift-certificate';\nimport InternalGiftCertificate from './internal-gift-certificate';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalGiftCertificate(giftCertificate: GiftCertificate): InternalGiftCertificate {\n    return {\n        code: giftCertificate.code,\n        discountedAmount: giftCertificate.used,\n        remainingBalance: giftCertificate.remaining,\n        giftCertificate: {\n            balance: giftCertificate.balance,\n            code: giftCertificate.code,\n            purchaseDate: giftCertificate.purchaseDate,\n        },\n    };\n}\n","import { filter, find, keyBy, reduce } from 'lodash';\n\nimport { mapToInternalLineItems, LineItem } from '../cart';\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon } from '../coupon';\nimport { HOSTED } from '../payment';\n\nimport InternalOrder, { InternalGiftCertificateList, InternalIncompleteOrder, InternalOrderPayment, InternalSocialDataList } from './internal-order';\nimport Order, { GatewayOrderPayment, GiftCertificateOrderPayment, OrderPayment, OrderPayments } from './order';\nimport { OrderMetaState } from './order-state';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalOrder(order: Order, orderMeta: OrderMetaState = {}): InternalOrder {\n    const decimalPlaces = order.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: order.orderId,\n        items: mapToInternalLineItems(order.lineItems, order.currency.decimalPlaces, 'productId'),\n        orderId: order.orderId,\n        currency: order.currency.code,\n        customerCanBeCreated: order.customerCanBeCreated,\n        payment: mapToInternalOrderPayment(order.payments, orderMeta.payment),\n        subtotal: {\n            amount: order.baseAmount,\n            integerAmount: amountTransformer.toInteger(order.baseAmount),\n        },\n        coupon: {\n            discountedAmount: reduce(order.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: order.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: order.discountAmount,\n            integerAmount: amountTransformer.toInteger(order.discountAmount),\n        },\n        token: orderMeta.orderToken,\n        callbackUrl: orderMeta.callbackUrl,\n        discountNotifications: [],\n        giftCertificate: mapToGiftCertificates(order.payments),\n        socialData: mapToInternalSocialDataList(order),\n        status: order.status,\n        hasDigitalItems: order.hasDigitalItems,\n        isDownloadable: order.isDownloadable,\n        isComplete: order.isComplete,\n        shipping: {\n            amount: order.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.shippingCostTotal),\n            amountBeforeDiscount: order.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(order.shippingCostBeforeDiscount),\n        },\n        storeCredit: {\n            amount: mapToStoreCredit(order.payments),\n        },\n        taxes: order.taxes,\n        taxTotal: {\n            amount: order.taxTotal,\n            integerAmount: amountTransformer.toInteger(order.taxTotal),\n        },\n        handling: {\n            amount: order.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(order.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: order.orderAmount,\n            integerAmount: order.orderAmountAsInteger,\n        },\n    };\n}\n\nexport function mapToInternalIncompleteOrder(checkout: Checkout): InternalIncompleteOrder {\n    const payment = find(checkout.payments, { providerType: HOSTED });\n\n    return {\n        orderId: null,\n        isComplete: false,\n        payment: !payment ? {} : {\n            id: payment.providerId,\n            gateway: payment.gatewayId,\n            status: mapToInternalPaymentStatus(payment.detail.step),\n        },\n    };\n}\n\nfunction mapToInternalPaymentStatus(status: string): string {\n    return `PAYMENT_STATUS_${status}`;\n}\n\nfunction mapToStoreCredit(payments?: OrderPayments): number {\n    const item = find(payments, { providerId: 'storecredit' });\n\n    return item ? item.amount : 0;\n}\n\nfunction mapToGiftCertificates(payments?: OrderPayments): InternalGiftCertificateList {\n    const items = filter(payments, { providerId: 'giftcertificate' }) as GiftCertificateOrderPayment[];\n\n    return {\n        totalDiscountedAmount: reduce(items, (sum, item) => item.amount + sum, 0),\n        appliedGiftCertificates: keyBy(items.map(item => ({\n            code: item.detail.code,\n            discountedAmount: item.amount,\n            remainingBalance: item.detail.remaining,\n            giftCertificate: {\n                balance: item.amount + item.detail.remaining,\n                code: item.detail.code,\n                purchaseDate: '',\n            },\n        })), 'code'),\n    };\n}\n\nfunction mapToInternalOrderPayment(payments?: OrderPayments, payment: InternalOrderPayment = {}): InternalOrderPayment {\n    const item = find(payments, isDefaultOrderPayment) as GatewayOrderPayment;\n\n    if (!item) {\n        return {};\n    }\n\n    return {\n        id: item.providerId,\n        status: mapToInternalPaymentStatus(item.detail.step),\n        helpText: item.detail.instructions,\n        returnUrl: payment.returnUrl,\n    };\n}\n\nfunction isDefaultOrderPayment(payment: OrderPayment): payment is GatewayOrderPayment {\n    return payment.providerId !== 'giftcertificate' && payment.providerId !== 'storecredit';\n}\n\nfunction mapToInternalSocialDataList(order: Order): { [itemId: string]: InternalSocialDataList } | undefined {\n    const socialDataObject: { [itemId: string]: InternalSocialDataList } = {};\n    const items = [\n        ...order.lineItems.physicalItems,\n        ...order.lineItems.digitalItems,\n    ];\n\n    items.forEach(item => {\n        socialDataObject[item.id] = mapToInternalSocialData(item);\n    });\n\n    return socialDataObject;\n}\n\nfunction mapToInternalSocialData(lineItem: LineItem): InternalSocialDataList {\n    const codes = ['fb', 'tw', 'gp'];\n\n    return codes.reduce((socialData, code) => {\n        const item = lineItem.socialMedia && lineItem.socialMedia.find(item => item.code === code);\n\n        if (!item) {\n            return socialData;\n        }\n\n        socialData[code] = {\n            name: lineItem.name,\n            description: lineItem.name,\n            image: lineItem.imageUrl,\n            url: item.link,\n            shareText: item.text,\n            sharingLink: item.link,\n            channelName: item.channel,\n            channelCode: item.code,\n        };\n\n        return socialData;\n    }, {} as InternalSocialDataList);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalScriptLoader {\n    private _window: PaypalHostWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadPaypal(): Promise<PaypalSDK> {\n        return this._scriptLoader\n            .loadScript('//www.paypalobjects.com/api/checkout.min.js')\n            .then(() => {\n                if (!this._window.paypal) {\n                    throw new StandardError();\n                }\n\n                return this._window.paypal;\n            });\n    }\n}\n","import { ClearErrorAction, ErrorActionType } from './error-actions';\n\nexport default class ErrorActionCreator {\n    clearError(error: Error): ClearErrorAction {\n        return {\n            type: ErrorActionType.ClearError,\n            payload: error,\n        };\n    }\n}\n","export default function getEnvironment(): string {\n    try {\n        return process.env.NODE_ENV || 'development';\n    } catch (e) {\n        return 'development';\n    }\n}\n","import Logger from './logger';\n\nexport default class ConsoleLogger implements Logger {\n    constructor(\n        private _console?: Console\n    ) {}\n\n    log(...messages: any[]): void {\n        this._logToConsole('log', ...messages);\n    }\n\n    info(...messages: any[]): void {\n        this._logToConsole('info', ...messages);\n    }\n\n    warn(...messages: any[]): void {\n        this._logToConsole('warn', ...messages);\n    }\n\n    error(...messages: any[]): void {\n        this._logToConsole('error', ...messages);\n    }\n\n    debug(...messages: any[]): void {\n        this._logToConsole('debug', ...messages);\n    }\n\n    private _logToConsole(type: keyof Console, ...messages: any[]): void {\n        if (!this._console || !this._console[type]) {\n            return;\n        }\n\n        this._console[type].call(this._console, ...messages);\n    }\n}\n","import Logger from './logger';\n\nexport default class NoopLogger implements Logger {\n    log(): void {}\n\n    info(): void {}\n\n    warn(): void {}\n\n    error(): void {}\n\n    debug(): void {}\n}\n","import { getEnvironment } from '../utility';\n\nimport createLogger from './create-logger';\nimport Logger from './logger';\n\nconst logger = createLogger(getEnvironment() !== 'test');\n\nexport default function getDefaultLogger(): Logger {\n    return logger;\n}\n","import ConsoleLogger from './console-logger';\nimport Logger from './logger';\nimport NoopLogger from './noop-logger';\n\nexport default function createLogger(isEnabled = true): Logger {\n    if (!isEnabled) {\n        return new NoopLogger();\n    }\n\n    return new ConsoleLogger(console);\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { ApplyCouponAction, CouponAction, CouponActionType, RemoveCouponAction } from './coupon-actions';\nimport CouponRequestSender from './coupon-request-sender';\n\nexport default class CouponActionCreator {\n    constructor(\n        private _couponRequestSender: CouponRequestSender\n    ) {}\n\n    applyCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.ApplyCouponRequested));\n\n            this._couponRequestSender.applyCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.ApplyCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.ApplyCouponFailed, response));\n                });\n        });\n    }\n\n    removeCoupon(code: string, options?: RequestOptions): ThunkAction<CouponAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveCouponAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(CouponActionType.RemoveCouponRequested));\n\n            this._couponRequestSender.removeCoupon(checkout.id, code, options)\n                .then(({ body }) => {\n                    observer.next(createAction(CouponActionType.RemoveCouponSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CouponActionType.RemoveCouponFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CheckoutIncludes, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class CouponRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n            body: { couponCode },\n        });\n    }\n\n    removeCoupon(checkoutId: string, couponCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/coupons/${couponCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes([\n                    ...CHECKOUT_DEFAULT_INCLUDES,\n                    CheckoutIncludes.AvailableShippingOptions,\n                ]),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable ,  Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { GiftCertificateRequestSender } from '.';\nimport { ApplyGiftCertificateAction, GiftCertificateActionType, RemoveGiftCertificateAction } from './gift-certificate-actions';\n\nexport default class GiftCertificateActionCreator {\n    constructor(\n        private _giftCertificateRequestSender: GiftCertificateRequestSender\n    ) {}\n\n    applyGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<ApplyGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ApplyGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.applyGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.ApplyGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.ApplyGiftCertificateFailed, response));\n                });\n        });\n    }\n\n    removeGiftCertificate(giftCertificate: string, options?: RequestOptions): ThunkAction<RemoveGiftCertificateAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<RemoveGiftCertificateAction>) => {\n            const state = store.getState();\n            const checkout = state.checkout.getCheckout();\n\n            if (!checkout) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n            }\n\n            observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateRequested));\n\n            this._giftCertificateRequestSender.removeGiftCertificate(checkout.id, giftCertificate, options)\n                .then(({ body }) => {\n                    observer.next(createAction(GiftCertificateActionType.RemoveGiftCertificateSucceeded, body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(GiftCertificateActionType.RemoveGiftCertificateFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class GiftCertificateRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n            body: { giftCertificateCode },\n        });\n    }\n\n    removeGiftCertificate(checkoutId: string, giftCertificateCode: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/gift-certificates/${giftCertificateCode}`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport CustomerCredentials from './customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from './customer-request-options';\nimport {\n    CustomerStrategyActionType,\n    CustomerStrategyDeinitializeAction,\n    CustomerStrategyInitializeAction,\n    CustomerStrategySignInAction,\n    CustomerStrategySignOutAction,\n    CustomerStrategyWidgetAction,\n} from './customer-strategy-actions';\nimport { CustomerStrategy } from './strategies';\n\nexport default class CustomerStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<CustomerStrategy>\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Observable<CustomerStrategySignInAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignInAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignInRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signIn(credentials, options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignInSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignInFailed, error, meta));\n                });\n        });\n    }\n\n    signOut(options?: CustomerRequestOptions): Observable<CustomerStrategySignOutAction> {\n        return Observable.create((observer: Observer<CustomerStrategySignOutAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.SignOutRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .signOut(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.SignOutSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.SignOutFailed, error, meta));\n                });\n        });\n    }\n\n    initialize(options?: CustomerInitializeOptions): ThunkAction<CustomerStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyInitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.InitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.InitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.InitializeFailed, error, meta));\n                });\n        });\n    }\n\n    deinitialize(options?: CustomerRequestOptions): ThunkAction<CustomerStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<CustomerStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            if (methodId && !state.customerStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(CustomerStrategyActionType.DeinitializeRequested, undefined, meta));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize(options)\n                .then(() => {\n                    observer.next(createAction(CustomerStrategyActionType.DeinitializeSucceeded, undefined, meta));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(CustomerStrategyActionType.DeinitializeFailed, error, meta));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: CustomerRequestOptions): Observable<CustomerStrategyWidgetAction> {\n        return Observable.create((observer: Observer<CustomerStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(CustomerStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(CustomerStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(CustomerStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayScriptLoader {\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    loadWidget(method: PaymentMethod, onPaymentReady?: () => void): Promise<Event> {\n        const {\n            config: { merchantId, testMode },\n            initializationData: { region = 'us' } = {},\n        } = method;\n\n        const url = 'https://' +\n            (region.toLowerCase() !== 'us' ? 'static-eu.' : 'static-na.') +\n            'payments-amazon.com/OffAmazonPayments/' +\n            `${region.toLowerCase()}/` +\n            (testMode ? 'sandbox/' : '') +\n            (region.toLowerCase() !== 'us' ? 'lpa/' : '') +\n            `js/Widgets.js?sellerId=${merchantId}`;\n\n        this._configureWidget(method, onPaymentReady);\n\n        return this._scriptLoader.loadScript(url);\n    }\n\n    private _configureWidget(method: PaymentMethod, onPaymentReady?: () => void): void {\n        const onLoginReady = () => {\n            if (!this._window.amazon) {\n                return;\n            }\n\n            this._window.amazon.Login.setClientId(method.initializationData.clientId);\n            this._window.amazon.Login.setUseCookie(true);\n        };\n\n        if (this._window.amazon && this._window.amazon.Login) {\n            onLoginReady();\n        } else {\n            this._window.onAmazonLoginReady = onLoginReady;\n        }\n\n        if (this._window.OffAmazonPayments && onPaymentReady) {\n            onPaymentReady();\n        } else {\n            this._window.onAmazonPaymentsReady = onPaymentReady;\n        }\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\n\nimport { Address, LegacyAddress } from '../../../address';\n\nimport { BraintreeDataCollector } from './braintree';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport {\n    VisaCheckoutAddress,\n    VisaCheckoutInitOptions,\n    VisaCheckoutPaymentSuccessPayload,\n    VisaCheckoutTokenizedPayload,\n} from './visacheckout';\n\nexport default class BraintreeVisaCheckoutPaymentProcessor {\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(clientToken: string, options: VisaCheckoutInitializeOptions): Promise<VisaCheckoutInitOptions> {\n        this._braintreeSDKCreator.initialize(clientToken);\n\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(visaCheckout => visaCheckout.createInitOptions({\n                settings: {\n                    locale: options.locale,\n                    shipping: {\n                        collectShipping: options.collectShipping,\n                    },\n                },\n                paymentRequest: {\n                    currencyCode: options.currencyCode,\n                    subtotal: String(options.subtotal),\n                },\n            }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    handleSuccess(payment: VisaCheckoutPaymentSuccessPayload, shipping?: Address, billing?: Address): Promise<any> {\n        return this._braintreeSDKCreator.getVisaCheckout()\n            .then(braintreeVisaCheckout => Promise.all([\n                braintreeVisaCheckout.tokenize(payment),\n                this._braintreeSDKCreator.getDataCollector(),\n            ])\n            .then(([tokenizedPayload, dataCollector]) => {\n                const {\n                    shippingAddress = this._toVisaCheckoutAddress(shipping),\n                    billingAddress = this._toVisaCheckoutAddress(billing),\n                } = tokenizedPayload;\n\n                return this._postForm({\n                    ...tokenizedPayload,\n                    shippingAddress,\n                    billingAddress,\n                }, dataCollector);\n            }));\n    }\n\n    private _postForm(paymentData: VisaCheckoutTokenizedPayload, dataCollector: BraintreeDataCollector) {\n        const {\n            userData,\n            billingAddress,\n            shippingAddress,\n            details: cardInformation,\n        } = paymentData;\n        const { userEmail } = userData;\n        const { deviceData } = dataCollector;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                payment_type: paymentData.type,\n                nonce: paymentData.nonce,\n                provider: 'braintreevisacheckout',\n                action: 'set_external_checkout',\n                device_data: deviceData,\n                card_information: this._getCardInformation(cardInformation),\n                billing_address: this._getAddress(userEmail, billingAddress),\n                shipping_address: this._getAddress(userEmail, shippingAddress),\n            },\n        });\n    }\n\n    private _toVisaCheckoutAddress(address?: Address): VisaCheckoutAddress {\n        if (!address) {\n            return {};\n        }\n\n        return {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phone,\n            streetAddress: address.address1,\n            extendedAddress: address.address2,\n            locality: address.city,\n            region: address.stateOrProvinceCode,\n            countryCode: address.countryCode,\n            postalCode: address.postalCode,\n        };\n    }\n\n    private _getAddress(email: string, address: VisaCheckoutAddress = {}): Partial<LegacyAddress> {\n        return {\n            email,\n            first_name: address.firstName,\n            last_name: address.lastName,\n            phone_number: address.phoneNumber,\n            address_line_1: address.streetAddress,\n            address_line_2: address.extendedAddress,\n            city: address.locality,\n            state: address.region,\n            country_code: address.countryCode,\n            postal_code: address.postalCode,\n        };\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastTwo: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastTwo,\n        };\n    }\n}\n\nexport interface VisaCheckoutInitializeOptions {\n    locale?: string;\n    collectShipping?: boolean;\n    subtotal?: number;\n    currencyCode?: string;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\n\nexport default function createBraintreeVisaCheckoutPaymentProcessor(\n    scriptLoader: ScriptLoader,\n    requestSender: RequestSender\n) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n\n    return new BraintreeVisaCheckoutPaymentProcessor(braintreeSDKCreator, requestSender);\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { VisaCheckoutHostWindow, VisaCheckoutSDK } from './visacheckout';\n\nexport default class VisaCheckoutScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: VisaCheckoutHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<VisaCheckoutSDK> {\n        return this._scriptLoader\n            .loadScript(`//${testMode ? 'sandbox-' : ''}assets.secure.checkout.visa.com/checkout-widget/resources/js/integration/v1/sdk.js`)\n            .then(() => {\n                if (!this._window.V) {\n                    throw new StandardError();\n                }\n\n                return this._window.V;\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\nimport { ChasePayHostWindow, JPMC } from '../chasepay/chasepay';\n\nexport default class ChasePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ChasePayHostWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<JPMC> {\n        return this._scriptLoader\n            .loadScript(`//pwc${testMode ? 'psb' : ''}.chase.com/pwc/checkout/js/v20170521/list.action?type=raw&applId=PWC&channelId=CWC&version=1`)\n            .then(() => {\n                if (!this._window.JPMC) {\n                    throw new StandardError();\n                }\n\n                return this._window.JPMC;\n            });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class RemoteCheckoutRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    initializeBilling(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/billing`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializeShipping(methodName: string, params?: { referenceId: string }, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/shipping`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    initializePayment(methodName: string, params?: InitializePaymentOptions, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/payment`;\n\n        return this._requestSender.get(url, { params, timeout });\n    }\n\n    loadSettings(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/settings`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    signOut(methodName: string, { timeout }: RequestOptions = {}): Promise<Response> {\n        const url = `/remote-checkout/${methodName}/signout`;\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    generateToken({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout-token';\n\n        return this._requestSender.get(url, { timeout });\n    }\n\n    trackAuthorizationEvent({ timeout }: RequestOptions = {}): Promise<Response> {\n        const url = '/remote-checkout/events/shopper-checkout-service-provider-authorization-requested';\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n\nexport interface InitializePaymentOptions {\n    authorizationToken?: string;\n    customerMessage?: string;\n    referenceId?: string;\n    useStoreCredit?: boolean;\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { RemoteCheckoutActionType } from './remote-checkout-actions';\nimport RemoteCheckoutRequestSender, { InitializePaymentOptions } from './remote-checkout-request-sender';\nimport { RemoteCheckoutStateData } from './remote-checkout-state';\n\n/**\n * @todo Convert this file into TypeScript properly\n * i.e.: Action<T>\n */\nexport default class RemoteCheckoutActionCreator {\n    constructor(\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender\n    ) {}\n\n    initializeBilling(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeBilling(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteBillingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteBillingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializeShipping(methodId: string, params?: { referenceId: string }, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializeShipping(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemoteShippingSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemoteShippingFailed, response, { methodId }));\n                });\n        });\n    }\n\n    initializePayment(methodId: string, params?: InitializePaymentOptions, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.initializePayment(methodId, params, options)\n                .then(({ body = {} }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.InitializeRemotePaymentSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.InitializeRemotePaymentFailed, response, { methodId }));\n                });\n        });\n    }\n\n    loadSettings(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.loadSettings(methodId, options)\n                .then(({ body }) => {\n                    observer.next(createAction(RemoteCheckoutActionType.LoadRemoteSettingsSucceeded, body, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.LoadRemoteSettingsFailed, response, { methodId }));\n                });\n        });\n    }\n\n    signOut(methodId: string, options?: RequestOptions): Observable<Action> {\n        return Observable.create((observer: Observer<Action>) => {\n            observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerRequested, undefined, { methodId }));\n\n            this._remoteCheckoutRequestSender.signOut(methodId, options)\n                .then(() => {\n                    observer.next(createAction(RemoteCheckoutActionType.SignOutRemoteCustomerSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(RemoteCheckoutActionType.SignOutRemoteCustomerFailed, response, { methodId }));\n                });\n        });\n    }\n\n    updateCheckout<K extends keyof RemoteCheckoutStateData>(methodId: K, data: Partial<RemoteCheckoutStateData[K]>): Action {\n        return createAction(RemoteCheckoutActionType.UpdateRemoteCheckout, data, { methodId });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\n\nimport { CustomerActionType, SignInCustomerAction, SignOutCustomerAction } from './customer-actions';\nimport CustomerCredentials from './customer-credentials';\nimport CustomerRequestSender from './customer-request-sender';\n\nexport default class CustomerActionCreator {\n    constructor(\n        private _customerRequestSender: CustomerRequestSender,\n        private _checkoutActionCreator: CheckoutActionCreator\n    ) {}\n\n    signInCustomer(\n        credentials: CustomerCredentials,\n        options?: RequestOptions\n    ): ThunkAction<SignInCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignInCustomerRequested)),\n            from(this._customerRequestSender.signInCustomer(credentials, options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignInCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignInCustomerFailed, error))\n        );\n    }\n\n    signOutCustomer(\n        options?: RequestOptions\n    ): ThunkAction<SignOutCustomerAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(CustomerActionType.SignOutCustomerRequested)),\n            from(this._customerRequestSender.signOutCustomer(options))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._checkoutActionCreator.loadCurrentCheckout(options)(store),\n                        of(createAction(CustomerActionType.SignOutCustomerSucceeded, body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(CustomerActionType.SignOutCustomerFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport CustomerCredentials from './customer-credentials';\nimport { InternalCustomerResponseBody } from './internal-customer-responses';\n\nexport default class CustomerRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    signInCustomer(credentials: CustomerCredentials, { timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.post(url, { timeout, body: credentials });\n    }\n\n    signOutCustomer({ timeout }: RequestOptions = {}): Promise<Response<InternalCustomerResponseBody>> {\n        const url = '/internalapi/v1/checkout/customer';\n\n        return this._requestSender.delete(url, { timeout });\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class NotImplementedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Not implemented.');\n\n        this.name = 'NotImplementedError';\n        this.type = 'not_implemented';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayLoginButton, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport AmazonPayCustomerInitializeOptions from './amazon-pay-customer-initialize-options';\n\nexport default class AmazonPayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _remoteCheckoutRequestSender: RemoteCheckoutRequestSender,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { onError = () => {} } = amazonOptions;\n                const onReady = () => {\n                    this._createSignInButton({\n                        ...amazonOptions,\n                        onError: error => {\n                            reject(error);\n                            onError(error);\n                        },\n                    });\n\n                    resolve();\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via AmazonPay, the shopper must click on \"Login with Amazon\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(options: AmazonPayCustomerInitializeOptions): AmazonPayLoginButton {\n        if (!this._paymentMethod || !this._window.OffAmazonPayments) {\n            throw new NotInitializedError(NotInitializedErrorType.CustomerNotInitialized);\n        }\n\n        if (!this._paymentMethod.config.merchantId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { initializationData } = this._paymentMethod;\n\n        return new this._window.OffAmazonPayments.Button(options.container, this._paymentMethod.config.merchantId, {\n            color: options.color || 'Gold',\n            size: options.size || 'small',\n            type: 'PwA',\n            useAmazonAddressBook: true,\n            onError: options.onError,\n            authorization: () => {\n                this._handleAuthorization(initializationData);\n            },\n        });\n    }\n\n    private _handleAuthorization(options: AuthorizationOptions): void {\n        this._remoteCheckoutRequestSender.generateToken()\n            .then(({ body }) => {\n                if (!this._window.amazon) {\n                    throw new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized);\n                }\n\n                this._window.amazon.Login.authorize({\n                    popup: false,\n                    scope: 'payments:shipping_address payments:billing_address payments:widget profile',\n                    state: `${options.tokenPrefix}${body.token}`,\n                }, options.redirectUrl);\n\n                this._remoteCheckoutRequestSender.trackAuthorizationEvent();\n            });\n    }\n}\n\ninterface AuthorizationOptions {\n    redirectUrl: string;\n    tokenPrefix: string;\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { BraintreeVisaCheckoutPaymentProcessor, VisaCheckoutScriptLoader } from '../../../payment/strategies/braintree';\nimport { VisaCheckoutPaymentSuccessPayload } from '../../../payment/strategies/braintree/visacheckout';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategyActionCreator from '../../customer-strategy-action-creator';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class BraintreeVisaCheckoutCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _buttonClassName: string = 'visa-checkout-wrapper';\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    container,\n                    onError = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: true,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, initOptions]) => {\n                    const signInButton = this._createSignInButton(container, this._buttonClassName);\n\n                    visaCheckout.init(initOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n\n                    return signInButton;\n                })\n                .then(signInButton => { signInButton.style.visibility = 'visible'; });\n            })\n            .then(() => this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via VisaCheckout, the shopper must click on \"Visa Checkout\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut('braintreevisacheckout', options)\n        );\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(\n            this._customerStrategyActionCreator.widgetInteraction(() => {\n                return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                    paymentSuccessPayload,\n                    state.shippingAddress.getShippingAddress(),\n                    state.billingAddress.getBillingAddress()\n                )\n                .then(() => this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _createSignInButton(containerId: string, buttonClass: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new Error('Need a container to place the button');\n        }\n\n        return (container.querySelector('.' + buttonClass) as HTMLElement) ||\n            this._insertVisaCheckoutButton(container, buttonClass);\n    }\n\n    private _insertVisaCheckoutButton(container: Element, buttonClass: string): HTMLElement {\n        const buttonSource = 'https://secure.checkout.visa.com/wallet-services-web/xo/button.png?acceptCanadianVisaDebit=false&cobrand=true&size=154';\n        const buttonTemplate = `\n            <img\n                alt=\"Visa Checkout\"\n                class=\"v-button\"\n                role=\"button\"\n                src=\"${buttonSource}\"\n                />\n            <a class=\"v-learn v-learn-default\" style=\"text-align: right; display: block; font-size: 10px; color: #003366;\" href=\"#\" data-locale=\"en_US\">Tell Me More</a>`;\n\n        const visaCheckoutButton = document.createElement('div');\n        visaCheckoutButton.style.visibility = 'hidden';\n        visaCheckoutButton.className = buttonClass;\n        visaCheckoutButton.innerHTML = buttonTemplate;\n\n        container.appendChild(visaCheckoutButton);\n\n        return visaCheckoutButton;\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { ChasePayScriptLoader, ChasePaySuccessPayload } from '../../../payment/strategies/chasepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class ChasePayCustomerStrategy implements CustomerStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _requestSender: RequestSender,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { chasepay: chasePayOptions, methodId } = options;\n\n        if (!chasePayOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.chasepay\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const cart = state.cart.getCart();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.digitalSessionId) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                const { container } = chasePayOptions;\n\n                return this._chasePayScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(JPMC => {\n                        const ChasePay = JPMC.ChasePay;\n\n                        ChasePay.configure({\n                            language: storeConfig.storeProfile.storeLanguage,\n                        });\n\n                        if (ChasePay.isChasePayUp) {\n                            ChasePay.insertButtons({\n                                containers: [container],\n                            });\n                        }\n\n                        ChasePay.on(ChasePay.EventType.START_CHECKOUT, () => {\n                            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n                                .then(() => {\n                                    const state = this._store.getState();\n                                    const method = state.paymentMethods.getPaymentMethod(methodId);\n                                    const sessionId = method && method.initializationData && method.initializationData.digitalSessionId;\n\n                                    if (sessionId) {\n                                        ChasePay.startCheckout(sessionId);\n                                    }\n                                });\n                        });\n\n                        ChasePay.on(ChasePay.EventType.COMPLETE_CHECKOUT, (payload: ChasePaySuccessPayload) => {\n                            const state = this._store.getState();\n                            const method = state.paymentMethods.getPaymentMethod(methodId);\n                            const requestId = method && method.initializationData && method.initializationData.merchantRequestId;\n\n                            if (requestId) {\n                                this._setExternalCheckoutData(payload, requestId)\n                                    .then(() => {\n                                        this._reloadPage();\n                                });\n                            }\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Chase Pay®, the shopper must click on \"Chase Pay®\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _setExternalCheckoutData(payload: ChasePaySuccessPayload, requestId: string): Promise<Response> {\n        const url = `checkout.php?provider=chasepay&action=set_external_checkout`;\n        const options = {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: {\n                sessionToken: payload.sessionToken,\n                merchantRequestId: requestId,\n            },\n            method: 'post',\n        };\n\n        return this._requestSender.sendRequest(url, options);\n    }\n\n    private _reloadPage() {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            params: {\n                fromChasePay: true,\n            },\n        });\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport CustomerActionCreator from '../../customer-action-creator';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class DefaultCustomerStrategy implements CustomerStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _customerActionCreator: CustomerActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signInCustomer(credentials, options)\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._customerActionCreator.signOutCustomer(options)\n        );\n    }\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotImplementedError } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { GooglePayPaymentProcessor } from '../../../payment/strategies/googlepay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nimport GooglePayCustomerInitializeOptions from './googlepay-customer-initialize-options';\n\nexport default class GooglePayCustomerStrategy implements CustomerStrategy {\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor,\n        private _formPoster: FormPoster\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId }  = options;\n\n        const googlePayOptions = this._getGooglePayOptions(options);\n\n        if (!methodId) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._googlePayPaymentProcessor.initialize(methodId)\n            .then(() => {\n                this._walletButton = this._createSignInButton(googlePayOptions.container);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton && this._walletButton.parentNode) {\n            this._walletButton.parentNode.removeChild(this._walletButton);\n            this._walletButton = undefined;\n        }\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Google Pay, the shopper must click on \"Google Pay\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = this._googlePayPaymentProcessor.createButton(this._handleWalletButtonClick);\n\n        container.appendChild(button);\n\n        return button;\n    }\n\n    private _getGooglePayOptions(options: CustomerInitializeOptions): GooglePayCustomerInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _onPaymentSelectComplete(): void {\n        this._formPoster.postForm('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        });\n    }\n\n    private _onError(error?: Error): void {\n        if (error && error.message !== 'CANCELED') {\n            throw error;\n        }\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<void> {\n        event.preventDefault();\n\n        return this._googlePayPaymentProcessor.displayWallet()\n            .then(paymentData => this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => {\n                if (paymentData.shippingAddress) {\n                    this._googlePayPaymentProcessor.updateShippingAddress(paymentData.shippingAddress);\n                }\n            }))\n            .then(() => this._onPaymentSelectComplete())\n            .catch(error => this._onError(error));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotImplementedError\n} from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { getCallbackUrl, MasterpassScriptLoader } from '../../../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class MasterpassCustomerStrategy implements CustomerStrategy {\n    private _signInButton?: HTMLElement;\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { masterpass: masterpassOptions, methodId } = options;\n\n        if (!masterpassOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.masterpass\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                if (!this._paymentMethod || !this._paymentMethod.initializationData.checkoutId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const cart = state.cart.getCart();\n                if (!cart) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCart);\n                }\n\n                const { container } = masterpassOptions;\n\n                const payload = {\n                    checkoutId: this._paymentMethod.initializationData.checkoutId,\n                    allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n                    amount: cart.cartAmount.toString(),\n                    currency: cart.currency.code,\n                    cartId: cart.id,\n                    suppressShippingAddress: false,\n                    callbackUrl: getCallbackUrl('checkout'),\n                };\n\n                return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n                    .then(Masterpass => {\n                        this._signInButton = this._createSignInButton(container);\n\n                        this._signInButton.addEventListener('click', () => {\n                            Masterpass.checkout(payload);\n                        });\n                    });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._signInButton && this._signInButton.parentNode) {\n            this._signInButton.parentNode.removeChild(this._signInButton);\n            this._signInButton = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    private _createSignInButton(containerId: string): HTMLElement {\n        const container = document.querySelector(`#${containerId}`);\n\n        if (!container) {\n            throw new InvalidArgumentError('Unable to create sign-in button without valid container ID.');\n        }\n\n        const button = document.createElement('input');\n\n        button.type = 'image';\n        button.src = 'https://static.masterpass.com/dyn/img/btn/global/mp_chk_btn_160x037px.svg';\n        container.appendChild(button);\n\n        return button;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { NotImplementedError } from '../../../common/error/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport CustomerCredentials from '../../customer-credentials';\nimport { CustomerInitializeOptions, CustomerRequestOptions } from '../../customer-request-options';\nimport CustomerStrategy from '../customer-strategy';\n\nexport default class SquareCustomerStrategy implements CustomerStrategy {\n\n    constructor(\n        private _store: CheckoutStore,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator\n    ) {}\n\n    signIn(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        throw new NotImplementedError(\n            'In order to sign in via Masterpass, the shopper must click on \"Masterpass\" button.'\n        );\n    }\n\n    signOut(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n\n        if (!payment) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.signOut(payment.providerId, options)\n        );\n    }\n\n    initialize(options?: CustomerInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: CustomerRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { createAction, createErrorAction, Action } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport Country from './country';\nimport { CountryActionType } from './country-actions';\nimport CountryRequestSender from './country-request-sender';\n\nexport default class CountryActionCreator {\n    constructor(\n        private _countryRequestSender: CountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<Action<Country[]>> {\n        return Observable.create((observer: Observer<Action<Country[]>>) => {\n            observer.next(createAction(CountryActionType.LoadCountriesRequested));\n\n            this._countryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(CountryActionType.LoadCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(CountryActionType.LoadCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { CountryResponseBody } from './country-responses';\n\nexport default class CountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/store/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { InternalOrderResponseBody } from './internal-order-responses';\nimport Order from './order';\nimport OrderParams from './order-params';\n\nexport default class OrderRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    loadOrder(orderId: number, { timeout, params }: RequestOptions<OrderParams> = {}): Promise<Response<Order>> {\n        const url = `/api/storefront/orders/${orderId}`;\n        const headers = { Accept: ContentType.JsonV1 };\n        const include = [\n            'payments',\n            'lineItems.physicalItems.socialMedia',\n            'lineItems.physicalItems.options',\n            'lineItems.digitalItems.socialMedia',\n            'lineItems.digitalItems.options',\n        ];\n\n        return this._requestSender.get(url, {\n            params: {\n                include: joinIncludes([\n                    ...include,\n                    ...(params && params.include || []),\n                ]),\n            },\n            headers,\n            timeout,\n        });\n    }\n\n    submitOrder(body: InternalOrderRequestBody, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = '/internalapi/v1/checkout/order';\n\n        return this._requestSender.post(url, { body, timeout });\n    }\n\n    finalizeOrder(orderId: number, { timeout }: RequestOptions = {}): Promise<Response<InternalOrderResponseBody>> {\n        const url = `/internalapi/v1/checkout/order/${orderId}`;\n\n        return this._requestSender.post(url, { timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, from, of, Observable, Observer } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { CheckoutValidator, InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport InternalOrderRequestBody from './internal-order-request-body';\nimport { FinalizeOrderAction, LoadOrderAction, LoadOrderPaymentsAction, OrderActionType, SubmitOrderAction } from './order-actions';\nimport OrderRequestBody from './order-request-body';\nimport OrderRequestSender from './order-request-sender';\nimport { SpamProtectionAction, SpamProtectionActionCreator } from './spam-protection';\n\nexport default class OrderActionCreator {\n    constructor(\n        private _orderRequestSender: OrderRequestSender,\n        private _checkoutValidator: CheckoutValidator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator\n    ) {}\n\n    loadOrder(orderId: number, options?: RequestOptions): Observable<LoadOrderAction> {\n        return new Observable((observer: Observer<LoadOrderAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderFailed, response));\n                });\n        });\n    }\n\n    // TODO: Remove when checkout does not contain unrelated order data.\n    loadOrderPayments(orderId: number, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        return new Observable((observer: Observer<LoadOrderPaymentsAction>) => {\n            observer.next(createAction(OrderActionType.LoadOrderPaymentsRequested));\n\n            this._orderRequestSender.loadOrder(orderId, options)\n                .then(response => {\n                    observer.next(createAction(OrderActionType.LoadOrderPaymentsSucceeded, response.body));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(OrderActionType.LoadOrderPaymentsFailed, response));\n                });\n        });\n    }\n\n    loadCurrentOrder(options?: RequestOptions): ThunkAction<LoadOrderAction, InternalCheckoutSelectors> {\n        return store => defer(() => {\n            const orderId = this._getCurrentOrderId(store.getState());\n\n            if (!orderId) {\n                throw new MissingDataError(MissingDataErrorType.MissingOrderId);\n            }\n\n            return this.loadOrder(orderId, options);\n        });\n    }\n\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<SubmitOrderAction | SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(OrderActionType.SubmitOrderRequested)),\n            defer(() => {\n                const state = store.getState();\n                const externalSource = state.config.getExternalSource();\n                const checkout = state.checkout.getCheckout();\n                const orderMeta = state.order.getOrderMeta();\n                const storeConfig = state.config.getStoreConfig();\n                const spamProtectionToken = orderMeta && orderMeta.spamProtectionToken;\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { isSpamProtectionEnabled } = storeConfig.checkoutSettings;\n\n                if (isSpamProtectionEnabled && !spamProtectionToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingSpamProtectionToken);\n                }\n\n                return from(\n                    this._checkoutValidator.validate(checkout, options)\n                        .then(() => this._orderRequestSender.submitOrder(this._mapToOrderRequestBody(\n                            payload,\n                            checkout.customerMessage,\n                            externalSource,\n                            spamProtectionToken\n                        ), options))\n                ).pipe(\n                    switchMap(response => concat(\n                        // TODO: Remove once we can submit orders using storefront API\n                        this.loadOrder(response.body.data.order.orderId, options),\n                        of(createAction(OrderActionType.SubmitOrderSucceeded, response.body.data, { ...response.body.meta, token: response.headers.token }))\n                    ))\n                );\n            }).pipe(\n                catchError(error => throwErrorAction(OrderActionType.SubmitOrderFailed, error))\n            )\n        );\n    }\n\n    finalizeOrder(orderId: number, options?: RequestOptions): Observable<FinalizeOrderAction | LoadOrderAction> {\n        return concat(\n            of(createAction(OrderActionType.FinalizeOrderRequested)),\n            from(this._orderRequestSender.finalizeOrder(orderId, options))\n                .pipe(\n                    switchMap(response => concat(\n                        this.loadOrder(orderId, options),\n                        of(createAction(OrderActionType.FinalizeOrderSucceeded, response.body.data))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(OrderActionType.FinalizeOrderFailed, error))\n        );\n    }\n\n    executeSpamProtection(): ThunkAction<SpamProtectionAction> {\n        return store => {\n            const storeConfig = store.getState().config.getStoreConfig();\n\n            if (!storeConfig) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n            }\n\n            const { isSpamProtectionEnabled } = storeConfig.checkoutSettings;\n\n            if (!isSpamProtectionEnabled) {\n                return empty();\n            }\n\n            return this._spamProtectionActionCreator.execute();\n        };\n    }\n\n    private _getCurrentOrderId(state: InternalCheckoutSelectors): number | undefined {\n        const order = state.order.getOrder();\n        const checkout = state.checkout.getCheckout();\n\n        return (order && order.orderId) || (checkout && checkout.orderId);\n    }\n\n    private _mapToOrderRequestBody(\n        payload: OrderRequestBody,\n        customerMessage: string,\n        externalSource?: string,\n        spamProtectionToken?: string\n    ): InternalOrderRequestBody {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            return {\n                ...order,\n                customerMessage,\n                externalSource,\n                spamProtectionToken,\n            };\n        }\n\n        return {\n            ...order,\n            customerMessage,\n            externalSource,\n            spamProtectionToken,\n            payment: {\n                paymentData: payment.paymentData,\n                name: payment.methodId,\n                gateway: payment.gatewayId,\n            },\n        };\n    }\n}\n","export interface MutationObeserverCreator {\n    prototype: MutationObserver;\n    new(callback: MutationCallback): MutationObserver;\n}\n\nexport interface MutationObserverWindow extends Window {\n    MutationObserver: MutationObeserverCreator;\n}\n\nexport class MutationObserverFactory {\n    constructor(\n        private _window: MutationObserverWindow = window as MutationObserverWindow\n    ) {}\n\n    create(callback: MutationCallback): MutationObserver {\n        return new this._window.MutationObserver(callback);\n    }\n}\n","import { StandardError } from '../../../common/error/errors';\n\nexport default class SpamProtectionFailedError extends StandardError {\n    constructor() {\n        super('We were not able to complete our spam protection verification. Please try again.');\n\n        this.name = 'SpamProtectionFailedError';\n        this.type = 'spam_protection_failed';\n    }\n}\n","import { StandardError } from '../../../common/error/errors';\n\nexport default class SpamProtectionNotCompletedError extends StandardError {\n    constructor() {\n        super('You haven\\'t complete our spam protection verification. Please try again.');\n\n        this.name = 'SpamProtectionNotCompletedError';\n        this.type = 'spam_protection_not_completed';\n    }\n}\n","import { Observable, Subject } from 'rxjs';\n\nimport { MutationObserverFactory } from '../../common/dom/mutation-observer';\nimport { NotInitializedError, NotInitializedErrorType } from '../../common/error/errors';\n\nimport { SpamProtectionFailedError, SpamProtectionNotCompletedError } from './errors';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport interface RecaptchaResult {\n    error?: Error;\n    token?: string;\n}\n\nexport default class GoogleRecaptcha {\n    private _event$?: Subject<RecaptchaResult>;\n    private _recaptcha?: ReCaptchaV2.ReCaptcha;\n\n    constructor(\n        private googleRecaptchaScriptLoader: GoogleRecaptchaScriptLoader,\n        private mutationObserverFactory: MutationObserverFactory\n    ) {}\n\n    load(containerId: string, sitekey: string): Promise<void> {\n        const event$ = new Subject<RecaptchaResult>();\n        this._event$ = event$;\n\n        return this.googleRecaptchaScriptLoader.load()\n            .then(recaptcha => {\n                recaptcha.render(containerId, {\n                    sitekey,\n                    size: 'invisible',\n                    callback: () => {\n                        event$.next({\n                            token: recaptcha.getResponse(),\n                        });\n                    },\n                    'error-callback': () => {\n                        event$.next({\n                            error: new SpamProtectionFailedError(),\n                        });\n                    },\n                });\n\n                this._recaptcha = recaptcha;\n            });\n    }\n\n    execute(): Observable<RecaptchaResult> {\n        if (!this._event$ || !this._recaptcha) {\n            throw new NotInitializedError(NotInitializedErrorType.SpamProtectionNotInitialized);\n        }\n\n        this._watchRecaptchaChallengeWindow(this._event$);\n\n        this._recaptcha.execute();\n\n        return this._event$;\n    }\n\n    private _watchRecaptchaChallengeWindow(event: Subject<RecaptchaResult>) {\n        const iframeElement = document.querySelector('iframe[title=\"recaptcha challenge\"]');\n\n        if (!iframeElement) {\n            throw new Error('Recaptcha challenge iframe not found.');\n        }\n\n        const iframeContainer = iframeElement.parentElement;\n\n        if (!iframeContainer) {\n            throw new Error('Recaptcha challenge iframe container not found.');\n        }\n\n        const container = iframeContainer.parentElement;\n\n        if (!container) {\n            throw new Error('Recaptcha challenge container not found.');\n        }\n\n        this.mutationObserverFactory.create(() => {\n            // When customer closes the Google ReCaptcha challenge window, throw SpamProtectionNotCompletedError\n            if (container.style.visibility === 'hidden') {\n                event.next({\n                    error: new SpamProtectionNotCompletedError(),\n                });\n            }\n        })\n\n        .observe(container, { attributes: true, attributeFilter: ['style'] });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nexport default class GoogleRecaptchaScriptLoader {\n    private _loadPromise?: Promise<ReCaptchaV2.ReCaptcha>;\n\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GoogleRecaptchaWindow = window\n    ) {}\n\n    load(): Promise<ReCaptchaV2.ReCaptcha> {\n        if (!this._loadPromise) {\n            this._loadPromise = this._loadScript();\n        }\n\n        return this._loadPromise;\n    }\n\n    private _loadScript(): Promise<ReCaptchaV2.ReCaptcha> {\n        const callbackName = 'initRecaptcha';\n        const params = [\n            `onload=${callbackName}`,\n            'render=explicit',\n        ].join('&');\n\n        return new Promise((resolve, reject) => {\n            this._window[callbackName] = () => resolve(this._window.grecaptcha);\n\n            this._scriptLoader.loadScript(`//www.google.com/recaptcha/api.js?${params}`)\n                .catch(error => {\n                    this._loadPromise = undefined;\n                    reject(error);\n                });\n        });\n    }\n}\n\nexport interface GoogleRecaptchaWindow extends Window {\n    grecaptcha?: ReCaptchaV2.ReCaptcha;\n    initRecaptcha?(): void;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, of, throwError, Observable, Observer } from 'rxjs';\nimport { switchMap, take } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport { SpamProtectionAction, SpamProtectionActionType } from './spam-protection-actions';\nimport { SpamProtectionOptions } from './spam-protection-options';\n\nexport default class SpamProtectionActionCreator {\n    constructor(\n        private _googleRecaptcha: GoogleRecaptcha\n    ) {}\n\n    initialize(options: SpamProtectionOptions): ThunkAction<SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<SpamProtectionAction>) => {\n            const state = store.getState();\n            const config = state.config.getConfig();\n            const { containerId } = options;\n\n            if (!config) {\n                throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n            }\n\n            observer.next(createAction(SpamProtectionActionType.InitializeRequested, undefined));\n\n            const recaptchaSitekey = config.storeConfig.checkoutSettings.googleRecaptchaSitekey;\n\n            return this._googleRecaptcha.load(containerId, recaptchaSitekey)\n                .then(() => {\n                    observer.next(createAction(SpamProtectionActionType.InitializeSucceeded));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(SpamProtectionActionType.InitializeFailed, error, containerId));\n                });\n        });\n    }\n\n    execute(): Observable<SpamProtectionAction> {\n        return concat(\n            of(createAction(SpamProtectionActionType.ExecuteRequested, undefined)),\n            this._googleRecaptcha.execute()\n                .pipe(take(1))\n                .pipe(switchMap(({ error, token }) => {\n                    return error ?\n                        throwError(createErrorAction(SpamProtectionActionType.SubmitFailed, error)) :\n                        of(createAction(SpamProtectionActionType.Completed, token));\n                }))\n        );\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class OrderFinalizationNotRequiredError extends StandardError {\n    constructor() {\n        super('The current order does not need to be finalized at this stage.');\n\n        this.name = 'OrderFinalizationNotRequiredError';\n        this.type = 'order_finalization_not_required';\n    }\n}\n","enum PaymentStrategyType {\n    AFFIRM = 'affirm',\n    AFTERPAY = 'afterpay',\n    AMAZON = 'amazon',\n    CREDIT_CARD = 'creditcard',\n    CYBERSOURCE = 'cybersource',\n    KLARNA = 'klarna',\n    LEGACY = 'legacy',\n    OFFLINE = 'offline',\n    OFFSITE = 'offsite',\n    PAYPAL = 'paypal',\n    PAYPAL_EXPRESS = 'paypalexpress',\n    PAYPAL_EXPRESS_CREDIT = 'paypalexpresscredit',\n    SAGE_PAY = 'sagepay',\n    SQUARE = 'squarev2',\n    STRIPEV3 = 'stripev3',\n    NO_PAYMENT_DATA_REQUIRED = 'nopaymentdatarequired',\n    BRAINTREE = 'braintree',\n    BRAINTREE_PAYPAL = 'braintreepaypal',\n    BRAINTREE_PAYPAL_CREDIT = 'braintreepaypalcredit',\n    BRAINTREE_VISA_CHECKOUT = 'braintreevisacheckout',\n    BRAINTREE_GOOGLE_PAY = 'googlepaybraintree',\n    CHASE_PAY = 'chasepay',\n    WE_PAY = 'wepay',\n    MASTERPASS = 'masterpass',\n    STRIPE_GOOGLE_PAY = 'googlepaystripe',\n    ZIP = 'zip',\n    CONVERGE = 'converge',\n}\n\nexport default PaymentStrategyType;\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, empty, from, of, Observable, Observer } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { LoadOrderPaymentsAction, OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../order';\nimport { OrderFinalizationNotRequiredError } from '../order/errors';\nimport { SpamProtectionAction } from '../order/spam-protection';\n\nimport { PaymentInitializeOptions, PaymentRequestOptions } from './payment-request-options';\nimport {\n    PaymentStrategyActionType,\n    PaymentStrategyDeinitializeAction,\n    PaymentStrategyExecuteAction,\n    PaymentStrategyFinalizeAction,\n    PaymentStrategyInitializeAction,\n    PaymentStrategyWidgetAction,\n} from './payment-strategy-actions';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { PaymentStrategy } from './strategies';\n\nexport default class PaymentStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: PaymentStrategyRegistry,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: RequestOptions): ThunkAction<PaymentStrategyExecuteAction | SpamProtectionAction, InternalCheckoutSelectors> {\n        return store => concat(\n            this._orderActionCreator.executeSpamProtection()(store),\n            new Observable((observer: Observer<PaymentStrategyExecuteAction>) => {\n                const state = store.getState();\n                const { payment = {} as OrderPaymentRequestBody, useStoreCredit } = payload;\n                const meta = { methodId: payment.methodId };\n\n                let strategy: PaymentStrategy;\n\n                if (state.payment.isPaymentDataRequired(useStoreCredit)) {\n                    const method = state.paymentMethods.getPaymentMethod(payment.methodId, payment.gatewayId);\n\n                    if (!method) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    strategy = this._strategyRegistry.getByMethod(method);\n                } else {\n                    strategy = this._strategyRegistry.get(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED);\n                }\n\n                observer.next(createAction(PaymentStrategyActionType.ExecuteRequested, undefined, meta));\n\n                strategy\n                    .execute(payload, { ...options, methodId: payment.methodId, gatewayId: payment.gatewayId })\n                    .then(() => {\n                        observer.next(createAction(PaymentStrategyActionType.ExecuteSucceeded, undefined, meta));\n                        observer.complete();\n                    })\n                    .catch(error => {\n                        observer.error(createErrorAction(PaymentStrategyActionType.ExecuteFailed, error, meta));\n                    });\n            })\n        );\n    }\n\n    finalize(options?: RequestOptions): ThunkAction<PaymentStrategyFinalizeAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentStrategyActionType.FinalizeRequested)),\n            this._loadOrderPaymentsIfNeeded(store, options),\n            defer(() => {\n                const state = store.getState();\n                const { providerId = '', gatewayId = '' } = state.payment.getPaymentId() || {};\n                const method = state.paymentMethods.getPaymentMethod(providerId, gatewayId);\n\n                if (!method) {\n                    throw new OrderFinalizationNotRequiredError();\n                }\n\n                return this._strategyRegistry.getByMethod(method)\n                    .finalize({ ...options, methodId: method.id, gatewayId: method.gateway })\n                    .then(() => createAction(PaymentStrategyActionType.FinalizeSucceeded, undefined, { methodId: method.id }));\n            })\n        ).pipe(\n            catchError(error => {\n                const state = store.getState();\n                const payment = state.payment.getPaymentId();\n\n                return throwErrorAction(PaymentStrategyActionType.FinalizeFailed, error, { methodId: payment && payment.providerId });\n            })\n        );\n    }\n\n    initialize(options: PaymentInitializeOptions): ThunkAction<PaymentStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyInitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && state.paymentStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .initialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options: PaymentRequestOptions): ThunkAction<PaymentStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<PaymentStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const { methodId, gatewayId } = options;\n            const method = state.paymentMethods.getPaymentMethod(methodId, gatewayId);\n\n            if (!method) {\n                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n            }\n\n            if (methodId && !state.paymentStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(PaymentStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.getByMethod(method)\n                .deinitialize({ ...options, methodId, gatewayId })\n                .then(() => {\n                    observer.next(createAction(PaymentStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(PaymentStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    widgetInteraction(method: () => Promise<any>, options?: PaymentRequestOptions): ThunkAction<PaymentStrategyWidgetAction> {\n        return store => Observable.create((observer: Observer<PaymentStrategyWidgetAction>) => {\n            const methodId = options && options.methodId;\n            const meta = { methodId };\n\n            observer.next(createAction(PaymentStrategyActionType.WidgetInteractionStarted, undefined, meta));\n\n            method().then(() => {\n                observer.next(createAction(PaymentStrategyActionType.WidgetInteractionFinished, undefined, meta));\n                observer.complete();\n            })\n            .catch(error => {\n                observer.error(createErrorAction(PaymentStrategyActionType.WidgetInteractionFailed, error, meta));\n            });\n        });\n    }\n\n    private _loadOrderPaymentsIfNeeded(store: ReadableCheckoutStore, options?: RequestOptions): Observable<LoadOrderPaymentsAction> {\n        const state = store.getState();\n        const checkout = state.checkout.getCheckout();\n\n        if (checkout && checkout.orderId) {\n            return this._orderActionCreator.loadOrderPayments(checkout.orderId, options);\n        }\n\n        return empty();\n    }\n}\n","import { isEqual } from 'lodash';\n\nimport { PartialDeep } from '../common/types';\n\nimport Cart from './cart';\n\nexport default class CartComparator {\n    isEqual(cartA: Cart, cartB: Cart): boolean {\n        return isEqual(\n            this._normalize(cartA),\n            this._normalize(cartB)\n        );\n    }\n\n    private _normalize(cart: Cart): PartialDeep<Cart> {\n        return {\n            cartAmount: cart.cartAmount,\n            currency: cart.currency,\n            id: cart.id,\n            lineItems: {\n                digitalItems: cart.lineItems.digitalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                    })),\n                giftCertificates: cart.lineItems.giftCertificates\n                    .slice()\n                    .sort((itemA, itemB) => `${itemA.id}`.localeCompare(`${itemB.id}`))\n                    .map(item => ({\n                        amount: item.amount,\n                        recipient: item.recipient,\n                    })),\n                physicalItems: cart.lineItems.physicalItems\n                    .slice()\n                    .sort((itemA, itemB) =>\n                        `${itemA.productId}${itemA.variantId}`.localeCompare(`${itemB.productId}${itemB.variantId}`)\n                    )\n                    .map(item => ({\n                        extendedSalePrice: item.extendedSalePrice,\n                        productId: item.productId,\n                        quantity: item.quantity,\n                        variantId: item.variantId,\n                        giftWrapping: item.giftWrapping,\n                    })),\n            },\n        };\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class CartChangedError extends StandardError {\n    constructor() {\n        super('An update to your shopping cart has been detected and your available shipping costs have been updated.');\n\n        this.name = 'CartChangedError';\n        this.type = 'cart_changed';\n    }\n}\n","import { isEqual, map } from 'lodash';\n\nimport { CartComparator } from '../cart';\nimport { CartChangedError } from '../cart/errors';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\nimport { Coupon, GiftCertificate } from '../coupon';\n\nimport Checkout from './checkout';\nimport CheckoutRequestSender from './checkout-request-sender';\n\nexport default class CheckoutValidator {\n    constructor(\n        private _checkoutRequestSender: CheckoutRequestSender\n    ) {}\n\n    validate(checkout?: Checkout, options?: RequestOptions): Promise<void> {\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        return this._checkoutRequestSender.loadCheckout(checkout.id, options)\n            .then(response => {\n                const comparator = new CartComparator();\n\n                if (checkout.outstandingBalance === response.body.outstandingBalance\n                    && this._compareCoupons(checkout.coupons, response.body.coupons)\n                    && this._compareGiftCertificates(checkout.giftCertificates, response.body.giftCertificates)\n                    && comparator.isEqual(checkout.cart, response.body.cart)\n                ) {\n                    return;\n                }\n\n                throw new CartChangedError();\n            });\n    }\n\n    private _compareCoupons(couponsA: Coupon[], couponsB: Coupon[]): boolean {\n        return isEqual(map(couponsA, 'code'), map(couponsB, 'code'));\n    }\n\n    private _compareGiftCertificates(giftCertificatesA: GiftCertificate[], giftCertificatesB: GiftCertificate[]): boolean {\n        return isEqual(map(giftCertificatesA, 'code'), map(giftCertificatesB, 'code'));\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, defer, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { RequestOptions } from '../common/http-request';\n\nimport { StoreCreditAction, StoreCreditActionType } from './store-credit-actions';\nimport StoreCreditRequestSender from './store-credit-request-sender';\n\nexport default class StoreCreditActionCreator {\n    constructor(\n        private _storeCreditRequestSender: StoreCreditRequestSender\n    ) {}\n\n    applyStoreCredit(useStoreCredit: boolean, options?: RequestOptions): ThunkAction<StoreCreditAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(StoreCreditActionType.ApplyStoreCreditRequested)),\n            defer(async () => {\n                const state = store.getState();\n                const checkout = state.checkout.getCheckout();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { body } = await (useStoreCredit ?\n                    this._storeCreditRequestSender.applyStoreCredit(checkout.id, options) :\n                    this._storeCreditRequestSender.removeStoreCredit(checkout.id, options));\n\n                return createAction(StoreCreditActionType.ApplyStoreCreditSucceeded, body);\n            })\n        ).pipe(\n            catchError(error => throwErrorAction(StoreCreditActionType.ApplyStoreCreditFailed, error))\n        );\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { Checkout, CHECKOUT_DEFAULT_INCLUDES } from '../checkout';\nimport { joinIncludes, ContentType, RequestOptions } from '../common/http-request';\n\nexport default class StoreCreditRequestSender {\n    constructor(\n        private _requestSender: RequestSender\n    ) {}\n\n    applyStoreCredit(checkoutId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/store-credit`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.post(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n\n    removeStoreCredit(checkoutId: string, { timeout }: RequestOptions = {}): Promise<Response<Checkout>> {\n        const url = `/api/storefront/checkouts/${checkoutId}/store-credit`;\n        const headers = { Accept: ContentType.JsonV1 };\n\n        return this._requestSender.delete(url, {\n            headers,\n            timeout,\n            params: {\n                include: joinIncludes(CHECKOUT_DEFAULT_INCLUDES),\n            },\n        });\n    }\n}\n","import { createAction, ThunkAction } from '@bigcommerce/data-store';\nimport { concat, from, of } from 'rxjs';\nimport { catchError, switchMap } from 'rxjs/operators';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { throwErrorAction } from '../common/error';\nimport { OrderActionCreator } from '../order';\n\nimport Payment from './payment';\nimport { InitializeOffsitePaymentAction, PaymentActionType, SubmitPaymentAction } from './payment-actions';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\n\nexport default class PaymentActionCreator {\n    constructor(\n        private _paymentRequestSender: PaymentRequestSender,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentRequestTransformer: PaymentRequestTransformer\n    ) {}\n\n    submitPayment(payment: Payment): ThunkAction<SubmitPaymentAction, InternalCheckoutSelectors> {\n        return store => concat(\n            of(createAction(PaymentActionType.SubmitPaymentRequested)),\n            from(this._paymentRequestSender.submitPayment(\n                this._paymentRequestTransformer.transform(payment, store.getState())\n            ))\n                .pipe(\n                    switchMap(({ body }) => concat(\n                        this._orderActionCreator.loadCurrentOrder()(store),\n                        of(createAction(PaymentActionType.SubmitPaymentSucceeded, body))\n                    ))\n                )\n        ).pipe(\n            catchError(error => throwErrorAction(PaymentActionType.SubmitPaymentFailed, error))\n        );\n    }\n\n    initializeOffsitePayment(\n        methodId: string,\n        gatewayId?: string\n    ): ThunkAction<InitializeOffsitePaymentAction, InternalCheckoutSelectors> {\n        return store => {\n            const payload = this._paymentRequestTransformer.transform({ gatewayId, methodId }, store.getState());\n\n            return concat(\n                of(createAction(PaymentActionType.InitializeOffsitePaymentRequested)),\n                this._paymentRequestSender.initializeOffsitePayment(payload)\n                    .then(() => createAction(PaymentActionType.InitializeOffsitePaymentSucceeded))\n            ).pipe(\n                catchError(error => throwErrorAction(PaymentActionType.InitializeOffsitePaymentFailed, error))\n            );\n        };\n    }\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentRequestBody from './payment-request-body';\n\n/**\n * @todo Convert this file into TypeScript properly\n */\nexport default class PaymentRequestSender {\n    /**\n     * @constructor\n     * @param {BigpayClient} client\n     */\n    constructor(\n        private _client: any\n    ) {}\n\n    submitPayment(payload: PaymentRequestBody): Promise<Response> {\n        return new Promise((resolve, reject) => {\n            this._client.submitPayment(payload, (error: any, response: any) => {\n                if (error) {\n                    reject(this._transformResponse(error));\n                } else {\n                    resolve(this._transformResponse(response));\n                }\n            });\n        });\n    }\n\n    initializeOffsitePayment(payload: PaymentRequestBody): Promise<void> {\n        return new Promise(() => {\n            this._client.initializeOffsitePayment(payload);\n        });\n    }\n\n    private _transformResponse(response: any): Response {\n        return {\n            headers: {},\n            body: response.data,\n            status: response.status,\n            statusText: response.statusText,\n        };\n    }\n}\n","import { PaymentInstrument, VaultedInstrument } from './payment';\n\nexport default function isVaultedInstrument(instrument: PaymentInstrument): instrument is VaultedInstrument {\n    return Boolean((instrument as VaultedInstrument).instrumentId);\n}\n","import { pick } from 'lodash';\n\nimport { mapToInternalAddress } from '../address';\nimport { mapToInternalCart } from '../cart';\nimport InternalCheckoutSelectors from '../checkout/internal-checkout-selectors';\nimport { StandardError } from '../common/error/errors';\nimport { mapToInternalCustomer } from '../customer';\nimport { mapToInternalOrder } from '../order';\nimport { mapToInternalShippingOption } from '../shipping';\n\nimport isVaultedInstrument from './is-vaulted-instrument';\nimport Payment from './payment';\nimport PaymentMethod from './payment-method';\nimport PaymentMethodSelector from './payment-method-selector';\nimport PaymentRequestBody from './payment-request-body';\n\nexport default class PaymentRequestTransformer {\n    transform(payment: Payment, checkoutState: InternalCheckoutSelectors): PaymentRequestBody {\n        const billingAddress = checkoutState.billingAddress.getBillingAddress();\n        const checkout = checkoutState.checkout.getCheckout();\n        const customer = checkoutState.customer.getCustomer();\n        const order = checkoutState.order.getOrder();\n        const paymentMethod = this._getPaymentMethod(checkoutState.paymentMethods, payment.methodId, payment.gatewayId);\n        const shippingAddress = checkoutState.shippingAddress.getShippingAddress();\n        const consignments = checkoutState.consignments.getConsignments();\n        const shippingOption = checkoutState.consignments.getShippingOption();\n        const storeConfig = checkoutState.config.getStoreConfig();\n        const contextConfig = checkoutState.config.getContextConfig();\n        const instrumentMeta = checkoutState.instruments.getInstrumentsMeta();\n        const paymentMeta = checkoutState.paymentMethods.getPaymentMethodsMeta();\n        const orderMeta = checkoutState.order.getOrderMeta();\n        const internalCustomer = customer && billingAddress && mapToInternalCustomer(customer, billingAddress);\n\n        const authToken = instrumentMeta && payment.paymentData && isVaultedInstrument(payment.paymentData) ?\n            `${checkoutState.payment.getPaymentToken()}, ${instrumentMeta.vaultAccessToken}` :\n            checkoutState.payment.getPaymentToken();\n\n        if (!authToken) {\n            throw new StandardError();\n        }\n\n        return {\n            authToken,\n            paymentMethod,\n            customer: internalCustomer,\n            billingAddress: billingAddress && mapToInternalAddress(billingAddress),\n            shippingAddress: shippingAddress && mapToInternalAddress(shippingAddress, consignments),\n            shippingOption: shippingOption && mapToInternalShippingOption(shippingOption, true),\n            cart: checkout && mapToInternalCart(checkout),\n            order: order && mapToInternalOrder(order, orderMeta),\n            orderMeta,\n            payment: payment.paymentData,\n            quoteMeta: {\n                request: {\n                    ...paymentMeta,\n                    geoCountryCode: contextConfig && contextConfig.geoCountryCode,\n                },\n            },\n            source: 'bigcommerce-checkout-js-sdk',\n            store: pick(storeConfig && storeConfig.storeProfile, [\n                'storeHash',\n                'storeId',\n                'storeLanguage',\n                'storeName',\n            ]),\n        };\n    }\n\n    private _getPaymentMethod(\n        paymentMethodSelector: PaymentMethodSelector,\n        methodId: string,\n        gatewayId?: string\n    ): PaymentMethod | undefined {\n        const paymentMethod = paymentMethodSelector.getPaymentMethod(methodId, gatewayId);\n\n        if (!paymentMethod) {\n            return;\n        }\n\n        if (paymentMethod.method === 'multi-option' && !paymentMethod.gateway) {\n            return { ...paymentMethod, gateway: paymentMethod.id };\n        }\n\n        if (paymentMethod.initializationData && paymentMethod.initializationData.gateway) {\n            return { ...paymentMethod, id: paymentMethod.initializationData.gateway };\n        }\n\n        return paymentMethod;\n    }\n}\n","export enum OrderIncludes {\n    DigitalItemsCategories = 'lineItems.digitalItems.categories',\n    PhysicalItemsCategories = 'lineItems.physicalItems.categories',\n}\n\nexport default interface OrderParams {\n    include?: OrderIncludes[];\n}\n","import { ReadableDataStore } from '@bigcommerce/data-store';\nimport { some } from 'lodash';\n\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { MissingDataError, MissingDataErrorType } from '../common/error/errors';\nimport { Registry } from '../common/registry';\nimport { RegistryOptions } from '../common/registry/registry';\n\nimport PaymentMethod from './payment-method';\nimport * as paymentMethodTypes from './payment-method-types';\nimport PaymentStrategyType from './payment-strategy-type';\nimport PaymentStrategy from './strategies/payment-strategy';\n\nexport default class PaymentStrategyRegistry extends Registry<PaymentStrategy, PaymentStrategyType> {\n    constructor(\n        private _store: ReadableDataStore<InternalCheckoutSelectors>,\n        options?: PaymentStrategyRegistryOptions\n    ) {\n        super(options);\n    }\n\n    getByMethod(paymentMethod?: PaymentMethod): PaymentStrategy {\n        if (!paymentMethod) {\n            return this.get();\n        }\n\n        const token = this._getToken(paymentMethod);\n        const cacheToken = paymentMethod.gateway || paymentMethod.id;\n\n        return this.get(token, cacheToken);\n    }\n\n    private _getToken(paymentMethod: PaymentMethod): PaymentStrategyType {\n        const methodId = paymentMethod.gateway || paymentMethod.id;\n\n        if (this._hasFactoryForMethod(methodId)) {\n            return methodId;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.OFFLINE) {\n            return PaymentStrategyType.OFFLINE;\n        }\n\n        if (this._isLegacyMethod(paymentMethod)) {\n            return PaymentStrategyType.LEGACY;\n        }\n\n        if (paymentMethod.type === paymentMethodTypes.HOSTED) {\n            return PaymentStrategyType.OFFSITE;\n        }\n\n        return PaymentStrategyType.CREDIT_CARD;\n    }\n\n    private _hasFactoryForMethod(\n        methodId: string\n    ): methodId is PaymentStrategyType {\n        return this._hasFactory(methodId);\n    }\n\n    private _isLegacyMethod(paymentMethod: PaymentMethod): boolean {\n        const config = this._store.getState().config.getStoreConfig();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const { clientSidePaymentProviders } = config.paymentSettings;\n\n        if (!clientSidePaymentProviders || paymentMethod.gateway === 'adyen') {\n            return false;\n        }\n\n        return !some(clientSidePaymentProviders, id =>\n            paymentMethod.id === id || paymentMethod.gateway === id\n        );\n    }\n}\n\nexport interface PaymentStrategyRegistryOptions extends RegistryOptions {\n    clientSidePaymentProviders?: string[];\n}\n","import { InvalidArgumentError } from '../../common/error/errors';\n\nexport default class PaymentArgumentInvalidError extends InvalidArgumentError {\n    constructor(invalidFields?: string[]) {\n        let message = 'Unable to submit payment for the order because the payload is invalid.';\n\n        if (invalidFields) {\n            message = `${message} Make sure the following fields are provided correctly: ${invalidFields.join(', ')}.`;\n        }\n\n        super(message);\n\n        this.name = 'PaymentArgumentInvalidError';\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class PaymentMethodCancelledError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Payment process was cancelled.');\n\n        this.name = 'PaymentMethodCancelledError';\n        this.type = 'payment_cancelled';\n    }\n}\n","import { LineItemCategory } from '../../../cart/line-item';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { AmountTransformer } from '../../../common/utility';\nimport { Order, OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { OrderIncludes } from '../../../order/order-params';\nimport { Consignment } from '../../../shipping';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Affirm, AffirmAddress, AffirmDiscount, AffirmFailResponse, AffirmItem, AffirmRequestData, AffirmSuccessResponse } from './affirm';\nimport AffirmScriptLoader from './affirm-script-loader';\n\nexport default class AffirmPaymentStrategy implements PaymentStrategy {\n    private _affirm?: Affirm;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _affirmScriptLoader: AffirmScriptLoader\n    ) { }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const { config: { testMode }, clientToken: publicKey } = paymentMethod;\n\n                return this._affirmScriptLoader.load(publicKey, testMode);\n            })\n            .then(affirm => {\n                this._affirm = affirm;\n\n                return this._store.getState();\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const methodId = payload.payment && payload.payment.methodId;\n        const { useStoreCredit } = payload;\n        const { _affirm } = this;\n\n        if (!_affirm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!methodId) {\n            throw new PaymentArgumentInvalidError(['payment.methodId']);\n        }\n\n        const requestOptions = {\n            ...options,\n            params: {\n                include: [\n                    OrderIncludes.PhysicalItemsCategories,\n                    OrderIncludes.DigitalItemsCategories,\n                ],\n            },\n        };\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, requestOptions))\n            .then<AffirmSuccessResponse>(() => {\n                _affirm.checkout(this._getCheckoutInformation());\n\n                return new Promise((resolve, reject) => {\n                    _affirm.checkout.open({\n                        onFail: (failObject: AffirmFailResponse) => {\n                            failObject.reason === 'canceled' ? reject(new PaymentMethodCancelledError()) : reject(new PaymentMethodInvalidError());\n                        },\n                        onSuccess: successObject => { resolve(successObject); },\n                    });\n                    _affirm.ui.error.on('close', () => {\n                        reject(new PaymentMethodCancelledError());\n                    });\n                });\n            })\n            .then(result => {\n                const paymentPayload = {\n                    methodId,\n                    paymentData: { nonce: result.checkout_token },\n                };\n\n                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._affirm) {\n            this._affirm = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getCheckoutInformation(): AffirmRequestData {\n        const state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const consignments = state.consignments.getConsignments();\n        const order = state.order.getOrder();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        const amountTransformer = new AmountTransformer(order.currency.decimalPlaces);\n        const billingAddress = this._getBillingAddress();\n\n        return {\n            merchant: {\n                user_confirmation_url: config.links.checkoutLink,\n                user_cancel_url: config.links.checkoutLink,\n                user_confirmation_url_action: 'POST',\n            },\n            shipping: this._getShippingAddress() || billingAddress,\n            billing: billingAddress,\n            items: this._getItems(amountTransformer, order),\n            metadata: {\n                shipping_type: this._getShippingType(consignments),\n                mode: 'modal',\n                platform_type: 'BigCommerce',\n                platform_version: '',\n                platform_affirm: '',\n            },\n            discounts: this._getDiscounts(amountTransformer, order),\n            order_id: order.orderId ? order.orderId.toString() : '',\n            shipping_amount: amountTransformer.toInteger(order.shippingCostTotal),\n            tax_amount: amountTransformer.toInteger(order.taxTotal),\n            total: amountTransformer.toInteger(order.orderAmount),\n        };\n    }\n\n    private _getShippingType(consignments?: Consignment[]): string {\n        if (!consignments) {\n            return '';\n        }\n\n        const consignment = consignments[0];\n\n        return consignment && consignment.selectedShippingOption ?\n            consignment.selectedShippingOption.type : '';\n    }\n\n    private _getBillingAddress(): AffirmAddress {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const billingInformation = {\n            name: {\n                first: billingAddress.firstName,\n                last: billingAddress.lastName,\n                full: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            },\n            address: {\n                line1: billingAddress.address1,\n                line2: billingAddress.address2,\n                city: billingAddress.city,\n                state: billingAddress.stateOrProvinceCode,\n                zipcode: billingAddress.postalCode,\n                country: billingAddress.countryCode,\n            },\n            phone_number: billingAddress.phone,\n            email: billingAddress.email,\n        };\n\n        return billingInformation;\n    }\n\n    private _getShippingAddress(): AffirmAddress | undefined {\n        const state = this._store.getState();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n\n        if (!shippingAddress) {\n            return;\n        }\n\n        const shippingInformation = {\n            name: {\n                first: shippingAddress.firstName,\n                last: shippingAddress.lastName,\n                full: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            },\n            address: {\n                line1: shippingAddress.address1,\n                line2: shippingAddress.address2,\n                city: shippingAddress.city,\n                state: shippingAddress.stateOrProvinceCode,\n                zipcode: shippingAddress.postalCode,\n                country: shippingAddress.countryCode,\n            },\n            phone_number: shippingAddress.phone,\n        };\n\n        return shippingInformation;\n    }\n\n    private _getItems(amountTransformer: AmountTransformer, order: Order): AffirmItem[] {\n        const items: AffirmItem[] = [];\n\n        for (const item of order.lineItems.physicalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this._getCategories(item.categories),\n            });\n        }\n\n        for (const item of order.lineItems.digitalItems) {\n            items.push({\n                display_name: item.name,\n                sku: item.sku,\n                unit_price: amountTransformer.toInteger(item.salePrice),\n                qty: item.quantity,\n                item_image_url: item.imageUrl,\n                item_url: item.url,\n                categories: this._getCategories(item.categories),\n            });\n        }\n\n        for (const item of order.lineItems.giftCertificates) {\n            items.push({\n                display_name: item.name,\n                sku: '',\n                unit_price: amountTransformer.toInteger(item.amount),\n                qty: 1,\n                item_image_url: '',\n                item_url: '',\n            });\n        }\n\n        if (order.lineItems.customItems) {\n            for (const item of order.lineItems.customItems) {\n                items.push({\n                    display_name: item.name,\n                    sku: item.sku,\n                    unit_price: amountTransformer.toInteger(item.listPrice),\n                    qty: item.quantity,\n                    item_image_url: '',\n                    item_url: '',\n                });\n            }\n        }\n\n        return items;\n    }\n\n    private _getDiscounts(amountTransformer: AmountTransformer, order: Order): AffirmDiscount {\n        const discounts: AffirmDiscount = {};\n\n        for (const line of order.coupons) {\n            if (line.discountedAmount > 0) {\n                discounts[line.code] = {\n                    discount_amount: amountTransformer.toInteger(line.discountedAmount),\n                    discount_display_name: line.displayName,\n                };\n            }\n        }\n\n        if (order.discountAmount > 0) {\n            discounts.DISCOUNTED_AMOUNT = {\n                discount_amount: amountTransformer.toInteger(order.discountAmount),\n                discount_display_name: 'discount',\n            };\n        }\n\n        return discounts;\n    }\n\n    private _getCategories(categories?: LineItemCategory[][]): string[][] {\n        if (!categories) {\n            return[[]];\n        }\n\n        return categories.map(categoryTree => categoryTree.map(category => category.name));\n    }\n}\n","/**\n * Used this approach as Affirm uses snipped for initializing. Please refer to Affirm documentation in: https://docs.affirm.com/Integrate_Affirm/Direct_API#1._Add_Affirm.js\n */\nexport default Function(`\n'use strict';\nreturn function loadAffirmJS(apiKey, scriptURL) {\n    var _affirm_config = {\n        public_api_key:  apiKey,\n        script:          scriptURL\n    };\n    (function(l,g,m,e,a,f,b){var d,c=l[m]||{},h=document.createElement(f),n=document.getElementsByTagName(f)[0],k=function(a,b,c){return function(){a[b]._.push([c,arguments])}};c[e]=k(c,e,\"set\");d=c[e];c[a]={};c[a]._=[];d._=[];c[a][b]=k(c,a,b);a=0;for(b=\"set add save post open empty reset on off trigger ready setProduct\".split(\" \");a<b.length;a++)d[b[a]]=k(c,e,b[a]);a=0;for(b=[\"get\",\"token\",\"url\",\"items\"];a<b.length;a++)d[b[a]]=function(){};h.async=!0;h.src=g[f];n.parentNode.insertBefore(h,n);delete g[f];d(g);l[m]=c})(window,_affirm_config,\"affirm\",\"checkout\",\"ui\",\"script\",\"ready\");\n}`)();\n","import { StandardError } from '../../../common/error/errors';\n\nimport { Affirm, AffirmHostWindow, AffirmScripts } from './affirm';\nimport loadAffirmJS from './affirmJs';\n\nexport default class AffirmScriptLoader {\n    constructor(\n        public _window: AffirmHostWindow = window\n    ) { }\n\n    load(apikey?: string, testMode?: boolean): Promise<Affirm> {\n        const scriptURI = this._getScriptURI(testMode);\n\n        loadAffirmJS(apikey, scriptURI);\n        if (!this._window.affirm) {\n            throw new StandardError();\n        }\n\n        return Promise.resolve(this._window.affirm);\n    }\n\n    private _getScriptURI(testMode: boolean = false): string {\n        const SCRIPTS_DEFAULT: AffirmScripts = {\n            PROD: '//cdn1.affirm.com/js/v2/affirm.js',\n            SANDBOX: '//cdn1-sandbox.affirm.com/js/v2/affirm.js',\n        };\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n}\n","import { CheckoutStore, CheckoutValidator, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { StoreCreditActionCreator } from '../../../store-credit';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AfterpayScriptLoader from './afterpay-script-loader';\nimport AfterpaySdk from './afterpay-sdk';\n\nexport default class AfterpayPaymentStrategy implements PaymentStrategy {\n    private _afterpaySdk?: AfterpaySdk;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutValidator: CheckoutValidator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n        private _afterpayScriptLoader: AfterpayScriptLoader\n    ) {}\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId, options.gatewayId);\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._afterpaySdk = await this._afterpayScriptLoader.load(paymentMethod, this._mapCountryToISO2(storeCountryName));\n\n        return this._store.getState();\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._afterpaySdk) {\n            this._afterpaySdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paymentId = payload.payment && payload.payment.gatewayId;\n\n        if (!paymentId) {\n            throw new PaymentArgumentInvalidError(['payment.gatewayId']);\n        }\n\n        let state = this._store.getState();\n        const config = state.config.getStoreConfig();\n        const storeCountryName = config ? config.storeProfile.storeCountry : '';\n        const { useStoreCredit } = payload;\n\n        if (useStoreCredit !== undefined) {\n            state = await this._store.dispatch(\n                this._storeCreditActionCreator.applyStoreCredit(useStoreCredit)\n            );\n        }\n\n        await this._checkoutValidator.validate(state.checkout.getCheckout(), options);\n\n        state = await this._store.dispatch(\n            this._paymentMethodActionCreator.loadPaymentMethod(paymentId, options)\n        );\n\n        await this._redirectToAfterpay(storeCountryName, state.paymentMethods.getPaymentMethod(paymentId));\n\n        // Afterpay will handle the rest of the flow so return a promise that doesn't really resolve\n        return new Promise<never>(() => {});\n    }\n\n    async finalize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const payment = state.payment.getPaymentId();\n        const config = state.config.getContextConfig();\n\n        if (!payment) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config || !config.payment.token) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        const paymentPayload = {\n            methodId: payment.providerId,\n            paymentData: { nonce: config.payment.token },\n        };\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder({}, options));\n\n        return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n    }\n\n    private _redirectToAfterpay(countryName: string, paymentMethod?: PaymentMethod): void {\n        if (!this._afterpaySdk || !paymentMethod || !paymentMethod.clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._afterpaySdk.initialize({ countryCode: this._mapCountryToISO2(countryName)});\n        this._afterpaySdk.redirect({ token: paymentMethod.clientToken });\n    }\n\n    private _mapCountryToISO2(countryName: string): string {\n        switch (countryName) {\n        case 'Australia':\n            return 'AU';\n\n        case 'New Zealand':\n            return 'NZ';\n\n        case 'United States':\n            return 'US';\n\n        default:\n            return 'AU';\n        }\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport PaymentMethod from '../../payment-method';\n\nimport AfterpaySdk from './afterpay-sdk';\nimport AfterpayWindow from './afterpay-window';\n\ninterface AfterpayScripts {\n    PROD: string;\n    SANDBOX: string;\n}\n\nconst SCRIPTS_DEFAULT: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal-sandbox.afterpay.com/afterpay-async.js',\n};\n\nconst SCRIPTS_US: AfterpayScripts = {\n    PROD: '//portal.afterpay.com/afterpay-async.js',\n    SANDBOX: '//portal.us-sandbox.afterpay.com/afterpay-async.js',\n};\n\n/** Class responsible for loading the Afterpay SDK */\nexport default class AfterpayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    /**\n     * Loads the appropriate Afterpay SDK depending on the payment method data.\n     * @param method the payment method data\n     */\n    load(method: PaymentMethod, countryCode: string): Promise<AfterpaySdk> {\n        const testMode = method.config.testMode || false;\n        const scriptURI = this._getScriptURI(countryCode, testMode);\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (window as AfterpayWindow).AfterPay);\n    }\n\n    private _getScriptURI(countryCode: string, testMode: boolean): string {\n        if (countryCode === 'US') {\n            return testMode ? SCRIPTS_US.SANDBOX : SCRIPTS_US.PROD;\n        }\n\n        return testMode ? SCRIPTS_DEFAULT.SANDBOX : SCRIPTS_DEFAULT.PROD;\n    }\n\n}\n","import { isEqual } from 'lodash';\n\nimport { omitPrivate } from '../common/utility';\n\nimport InternalAddress from './internal-address';\n\nexport default function isInternalAddressEqual(addressA: Partial<InternalAddress>, addressB: Partial<InternalAddress>): boolean {\n    return isEqual(normalize(addressA), normalize(addressB));\n}\n\nfunction normalize(address: Partial<InternalAddress>): Partial<InternalAddress> {\n    const ignoredKeys = ['id', 'provinceCode'];\n\n    return (Object.keys(omitPrivate(address) || {}) as Array<keyof InternalAddress>)\n        .reduce(\n            (result, key) => ignoredKeys.indexOf(key) === -1 && address[key] ?\n                { ...result, [key]: address[key] } :\n                result,\n            {}\n        );\n}\n","import isPrivate from './is-private';\nimport omitDeep from './omit-deep';\n\nexport default function omitPrivate(object: any): any {\n    return omitDeep(object, (value: any, key: string) => isPrivate(key));\n}\n","import { BillingAddress } from '../billing';\n\nimport Address from './address';\nimport InternalAddress from './internal-address';\n\nexport default function mapFromInternalAddress(address: InternalAddress): Address | BillingAddress {\n    return {\n        id: address.id,\n        firstName: address.firstName,\n        lastName: address.lastName,\n        company: address.company,\n        address1: address.addressLine1,\n        address2: address.addressLine2,\n        city: address.city,\n        stateOrProvince: address.province,\n        stateOrProvinceCode: address.provinceCode,\n        postalCode: address.postCode,\n        country: address.country,\n        countryCode: address.countryCode,\n        phone: address.phone,\n        customFields: address.customFields,\n    };\n}\n","import { noop } from 'lodash';\n\nimport {\n    isInternalAddressEqual,\n    mapFromInternalAddress,\n    mapToInternalAddress\n} from '../../../address';\nimport { BillingAddressActionCreator } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    RequestError\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport AmazonPayConfirmationFlow from './amazon-pay-confirmation-flow';\nimport AmazonPayOrderReference from './amazon-pay-order-reference';\nimport AmazonPayPaymentInitializeOptions from './amazon-pay-payment-initialize-options';\nimport AmazonPayScriptLoader from './amazon-pay-script-loader';\nimport AmazonPayWallet, { AmazonPayWalletOptions } from './amazon-pay-wallet';\nimport AmazonPayWindow from './amazon-pay-window';\n\nexport default class AmazonPayPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _walletOptions?: AmazonPayPaymentInitializeOptions;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!amazonOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.amazon\" argument is not provided.');\n        }\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        this._walletOptions = amazonOptions;\n        this._paymentMethod = paymentMethod;\n\n        return new Promise((resolve, reject) => {\n            const onReady = () => {\n                this._createWallet(amazonOptions)\n                    .then(resolve)\n                    .catch(reject);\n            };\n\n            this._scriptLoader.loadWidget(paymentMethod, onReady)\n                .catch(reject);\n        })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._walletOptions = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const sellerId = this._getMerchantId();\n\n        if (!referenceId || !sellerId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload }, useStoreCredit = false } = payload;\n\n        if (options && this._paymentMethod && this._paymentMethod.config.is3dsEnabled) {\n            return this._processPaymentWith3ds(\n                sellerId,\n                referenceId,\n                paymentPayload.methodId,\n                useStoreCredit,\n                options\n            );\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { referenceId, useStoreCredit })\n        )\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                }, options)\n            ))\n            .catch(error => {\n                if (error instanceof RequestError && error.body.type === 'provider_widget_error' && this._walletOptions) {\n                    return this._createWallet(this._walletOptions)\n                        .then(() => Promise.reject(error));\n                }\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _getMerchantId(): string | undefined {\n        return this._paymentMethod && this._paymentMethod.config.merchantId;\n    }\n\n    private _getOrderReferenceId(): string | undefined {\n        const state = this._store.getState();\n        const amazon = state.remoteCheckout.getCheckout('amazon');\n\n        return amazon ? amazon.referenceId : undefined;\n    }\n\n    private _createWallet(options: AmazonPayPaymentInitializeOptions): Promise<AmazonPayWallet> {\n        return new Promise((resolve, reject) => {\n            const { container, onError = noop, onPaymentSelect = noop, onReady = noop } = options;\n            const referenceId = this._getOrderReferenceId();\n            const merchantId = this._getMerchantId();\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay Wallet widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const walletOptions: AmazonPayWalletOptions = {\n                amazonOrderReferenceId: referenceId,\n                design: { designMode: 'responsive' },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onPaymentSelect: orderReference => {\n                    this._synchronizeBillingAddress()\n                        .then(() => onPaymentSelect(orderReference))\n                        .catch(onError);\n                },\n                onReady: orderReference => {\n                    resolve();\n                    onReady(orderReference);\n                },\n            };\n\n            if (!walletOptions.amazonOrderReferenceId) {\n                walletOptions.onReady = orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                };\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.Wallet(walletOptions);\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeBillingAddress(): Promise<InternalCheckoutSelectors> {\n        const referenceId = this._getOrderReferenceId();\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.initializeBilling(methodId, { referenceId })\n        )\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.billing && amazon.billing.address;\n                const billingAddress = state.billingAddress.getBillingAddress();\n                const internalBillingAddress = billingAddress && mapToInternalAddress(billingAddress);\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, internalBillingAddress || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._billingAddressActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            });\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n\n    private _processPaymentWith3ds(sellerId: string, referenceId: string, methodId: string, useStoreCredit: boolean, options: PaymentRequestOptions): Promise<never> {\n        return new Promise((resolve, reject) => {\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized));\n            }\n\n            return this._window.OffAmazonPayments.initConfirmationFlow(\n                sellerId,\n                referenceId,\n                (confirmationFlow: AmazonPayConfirmationFlow) => {\n                    return this._store.dispatch(\n                        this._orderActionCreator.submitOrder({useStoreCredit}, options)\n                    )\n                        .then(() => this._store.dispatch(\n                            this._remoteCheckoutActionCreator.initializePayment(methodId, {\n                                referenceId,\n                                useStoreCredit,\n                            }))\n                        )\n                        .then(() => {\n                            confirmationFlow.success();\n\n                            return new Promise<never>(() => {});\n                        })\n                        .catch(error => {\n                            confirmationFlow.error();\n\n                            return reject(error);\n                        });\n                }\n            );\n        });\n    }\n}\n","export interface OverlayOptions {\n    background?: string;\n    id?: string;\n    transitionDuration?: number;\n}\n\nexport interface OverlayShowOptions {\n    onClick?(event: MouseEvent): void;\n}\n\nexport default class Overlay {\n    private _element: HTMLElement;\n    private _unregisterClick?: () => void;\n\n    constructor(options?: OverlayOptions) {\n        this._element = this._createElement(options);\n    }\n\n    show(options?: OverlayShowOptions): void {\n        if (this._element.parentElement) {\n            return;\n        }\n\n        this._registerClick(options);\n\n        document.body.appendChild(this._element);\n\n        // Fade In\n        setTimeout(() => this._element.style.opacity = '1');\n    }\n\n    remove(): void {\n        if (!this._element.parentElement) {\n            return;\n        }\n\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        this._removeAfterTransition();\n\n        setTimeout(() => this._element.style.opacity = '0');\n    }\n\n    private _createElement(options?: OverlayOptions): HTMLElement {\n        const element = document.createElement('div');\n        const {\n            background = 'rgba(0, 0, 0, 0.8)',\n            id = null,\n            transitionDuration = 400,\n        } = options || {};\n\n        element.style.background = background;\n        element.style.display = 'block';\n        element.style.height = '100%';\n        element.style.left = '0px';\n        element.style.opacity = '0';\n        element.style.position = 'fixed';\n        element.style.top = '0px';\n        element.style.transition = `opacity ${transitionDuration}ms ease-out`;\n        element.style.width = '100%';\n        element.style.zIndex = '2147483647';\n\n        if (id) {\n            element.id = id;\n        }\n\n        return element;\n    }\n\n    private _registerClick(options?: OverlayShowOptions): void {\n        if (this._unregisterClick) {\n            this._unregisterClick();\n        }\n\n        if (options && options.onClick) {\n            const { onClick } = options;\n\n            this._element.addEventListener('click', onClick);\n\n            this._unregisterClick = () => {\n                this._element.removeEventListener('click', onClick);\n                this._unregisterClick = undefined;\n            };\n        }\n    }\n\n    private _removeAfterTransition(): void {\n        const handeTransition: (event: Event) => void = event => {\n            // NOTE: `event` is not correctly typed in this version of TS\n            if ((event as TransitionEvent).propertyName !== 'opacity') {\n                return;\n            }\n\n            if (this._element.parentElement) {\n                this._element.parentElement.removeChild(this._element);\n            }\n\n            this._element.removeEventListener('transitionend', handeTransition);\n        };\n\n        this._element.addEventListener('transitionend', handeTransition);\n    }\n}\n","export default class CancellablePromise<T> {\n    promise: Promise<T>;\n    cancel!: (reason?: any) => void;\n\n    constructor(promise: Promise<T>) {\n        const cancellable = new Promise<T>((resolve, reject) => {\n            this.cancel = reject;\n        });\n\n        this.promise = Promise.race([promise, cancellable]);\n    }\n}\n","import { Address } from '../../../address';\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { Overlay } from '../../../common/overlay';\nimport { CancellablePromise } from '../../../common/utility';\nimport { OrderPaymentRequestBody } from '../../../order';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport { CreditCardInstrument, NonceInstrument } from '../../payment';\n\nimport { BraintreePaypal, BraintreeRequestData } from './braintree';\nimport { BraintreePaymentInitializeOptions, BraintreeThreeDSecureOptions } from './braintree-payment-options';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default class BraintreePaymentProcessor {\n    private _threeDSecureOptions?: BraintreeThreeDSecureOptions;\n\n    constructor(\n        private _braintreeSDKCreator: BraintreeSDKCreator,\n        private _overlay: Overlay\n    ) {}\n\n    initialize(clientToken: string, options?: BraintreePaymentInitializeOptions): void {\n        this._braintreeSDKCreator.initialize(clientToken);\n        this._threeDSecureOptions = options && options.threeDSecure;\n    }\n\n    preloadPaypal(): Promise<BraintreePaypal> {\n        return this._braintreeSDKCreator.getPaypal();\n    }\n\n    tokenizeCard(payment: OrderPaymentRequestBody, billingAddress: Address): Promise<NonceInstrument> {\n        const { paymentData } = payment;\n        const requestData = this._mapToCreditCard(paymentData as CreditCardInstrument, billingAddress);\n\n        return this._braintreeSDKCreator.getClient()\n            .then(client => client.request(requestData))\n            .then(({ creditCards }) => ({\n                nonce: creditCards[0].nonce,\n            }));\n    }\n\n    paypal(amount: number, storeLanguage: string, currency: string, offerCredit: boolean): Promise<NonceInstrument> {\n        return this._braintreeSDKCreator.getPaypal()\n            .then(paypal => {\n                this._overlay.show({\n                    onClick: () => paypal.focusWindow(),\n                });\n\n                return paypal.tokenize({\n                    amount,\n                    currency,\n                    enableShippingAddress: true,\n                    flow: 'checkout',\n                    locale: storeLanguage,\n                    offerCredit,\n                    useraction: 'commit',\n                });\n            })\n            .then(response => {\n                this._overlay.remove();\n\n                return response;\n            })\n            .catch(error => {\n                this._overlay.remove();\n\n                throw error;\n            });\n    }\n\n    verifyCard(payment: OrderPaymentRequestBody, billingAddress: Address, amount: number): Promise<NonceInstrument> {\n        if (!this._threeDSecureOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { addFrame, removeFrame } = this._threeDSecureOptions;\n\n        return Promise.all([\n            this.tokenizeCard(payment, billingAddress),\n            this._braintreeSDKCreator.get3DS(),\n        ]).then(([paymentData, threeDSecure]) => {\n            const { nonce } = paymentData;\n            const cancelVerifyCard = () => threeDSecure.cancelVerifyCard()\n                .then(response => {\n                    verification.cancel(new PaymentMethodCancelledError());\n\n                    return response;\n                });\n\n            const verification = new CancellablePromise(\n                threeDSecure.verifyCard({\n                    addFrame: (error, iframe) => {\n                        addFrame(error, iframe, cancelVerifyCard);\n                    },\n                    amount,\n                    nonce,\n                    removeFrame,\n                })\n            );\n\n            return verification.promise;\n        });\n    }\n\n    appendSessionId(processedPayment: Promise<NonceInstrument>): Promise<NonceInstrument> {\n        return processedPayment\n            .then(paymentData => Promise.all([paymentData, this._braintreeSDKCreator.getDataCollector()]))\n            .then(([paymentData, { deviceData }]) => ({ ...paymentData, deviceSessionId: deviceData }));\n    }\n\n    deinitialize(): Promise<void> {\n        return this._braintreeSDKCreator.teardown();\n    }\n\n    private _mapToCreditCard(creditCard: CreditCardInstrument, billingAddress: Address): BraintreeRequestData {\n        let streetAddress = billingAddress.address1;\n\n        if (billingAddress.address2) {\n            streetAddress = ` ${billingAddress.address2}`;\n        }\n\n        return {\n            data: {\n                creditCard: {\n                    cardholderName: creditCard.ccName,\n                    number: creditCard.ccNumber,\n                    cvv: creditCard.ccCvv,\n                    expirationDate: `${creditCard.ccExpiry.month}/${creditCard.ccExpiry.year}`,\n                    options: {\n                        validate: false,\n                    },\n                    billingAddress: {\n                        countryName: billingAddress.country,\n                        postalCode: billingAddress.postalCode,\n                        streetAddress,\n                    },\n                },\n            },\n            endpoint: 'payment_methods/credit_cards',\n            method: 'post',\n        };\n    }\n}\n","import isVaultedInstrument from './is-vaulted-instrument';\nimport { CreditCardInstrument, PaymentInstrument } from './payment';\n\nexport default function isCreditCardLike(instrument: PaymentInstrument): instrument is CreditCardInstrument {\n    const card = instrument as CreditCardInstrument;\n\n    return !isVaultedInstrument(card) &&\n        typeof card.ccName === 'string' &&\n        typeof card.ccNumber === 'string' &&\n        typeof card.ccExpiry === 'object' &&\n        typeof card.ccExpiry.month === 'string' &&\n        typeof card.ccExpiry.year === 'string';\n    }\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport Payment, { PaymentInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\n\nexport default class BraintreeCreditCardPaymentStrategy implements PaymentStrategy {\n    private _is3dsEnabled?: boolean;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(options.methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n\n                if (!paymentMethod || !paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(paymentMethod.clientToken, options.braintree);\n                this._is3dsEnabled = paymentMethod.config.is3dsEnabled;\n\n                return this._store.getState();\n            })\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(order, options)\n        )\n            .then(state =>\n                state.payment.isPaymentDataRequired(order.useStoreCredit) && payment ?\n                    this._preparePaymentData(payment) :\n                    Promise.resolve(payment as Payment)\n            )\n            .then(payment =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n\n    private _isUsingVaulting(paymentData: PaymentInstrument): boolean {\n        if (isCreditCardLike(paymentData)) {\n            return Boolean(paymentData.shouldSaveInstrument);\n        }\n\n        return isVaultedInstrument(paymentData);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody): Promise<Payment> {\n        const { paymentData } = payment;\n        const state = this._store.getState();\n\n        if (paymentData && this._isUsingVaulting(paymentData)) {\n            return Promise.resolve(payment as Payment);\n        }\n\n        const order = state.order.getOrder();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrder);\n        }\n\n        if (!billingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const tokenizedCard = this._is3dsEnabled ?\n            this._braintreePaymentProcessor.verifyCard(payment, billingAddress, order.orderAmount) :\n            this._braintreePaymentProcessor.tokenizeCard(payment, billingAddress);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData }));\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError, PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { BraintreeError } from './braintree';\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport isBraintreeError from './is-braintree-error';\n\nexport default class BraintreePaypalPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _braintreePaymentProcessor: BraintreePaymentProcessor,\n        private _credit: boolean = false\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintree: braintreeOptions, methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (this._paymentMethod && this._paymentMethod.nonce) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._braintreePaymentProcessor.initialize(this._paymentMethod.clientToken, braintreeOptions);\n\n                return this._braintreePaymentProcessor.preloadPaypal();\n            })\n            .then(() => this._store.getState())\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return (payment ? this._preparePaymentData(payment, order.useStoreCredit) : Promise.resolve(payment))\n            .then(payment => Promise.all([payment, this._store.dispatch(this._orderActionCreator.submitOrder(order, options))]))\n            .then(([payment]) => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)))\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreePaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _handleError(error: BraintreeError | Error): never {\n        if (!isBraintreeError(error)) {\n            throw error;\n        }\n\n        if (error.code === 'PAYPAL_POPUP_CLOSED') {\n            throw new PaymentMethodCancelledError(error.message);\n        }\n\n        throw new StandardError(error.message);\n    }\n\n    private _preparePaymentData(payment: OrderPaymentRequestBody, useStoreCredit?: boolean): Promise<Payment> {\n        const state = this._store.getState();\n        const grandTotal = state.checkout.getOutstandingBalance(useStoreCredit);\n        const config = state.config.getStoreConfig();\n\n        if (!grandTotal) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const { currency, storeProfile: { storeLanguage } } = config;\n        const { method, nonce } = this._paymentMethod;\n\n        if (nonce) {\n            return Promise.resolve({ ...payment, paymentData: { nonce, method } });\n        }\n\n        const tokenizedCard = this._braintreePaymentProcessor\n            .paypal(grandTotal, storeLanguage, currency.code, this._credit);\n\n        return this._braintreePaymentProcessor.appendSessionId(tokenizedCard)\n            .then(paymentData => ({ ...payment, paymentData: { ...paymentData, method } }));\n    }\n}\n","export enum ChasePayEventType {\n    StartCheckout = 'startCheckout',\n    CompleteCheckout = 'completeCheckout',\n    CancelCheckout = 'cancelCheckout',\n}\n\nexport interface ChasePayEventMap {\n    [ChasePayEventType.StartCheckout](digitalSessionId: string): void;\n    [ChasePayEventType.CompleteCheckout](payload: ChasePaySuccessPayload): void;\n    [ChasePayEventType.CancelCheckout](): void;\n}\n\nexport interface ChasePayHostWindow extends Window {\n    JPMC?: JPMC;\n}\n\nexport interface JPMC {\n    ChasePay: ChasePay;\n}\n\nexport interface ChasePaySuccessPayload {\n    sessionToken: string;\n}\n\nexport interface ChasePayInsertOptions {\n    color?: string;\n    containers?: string[];\n    height?: number;\n    width?: number;\n}\n\nexport interface ChasePayConfigureOptions {\n    language?: string;\n    zindex?: number;\n    sessionWarningTime?: number;\n    sessionTimeoutTime?: number;\n}\n\nexport interface ChasePay {\n    EventType: {\n        START_CHECKOUT: ChasePayEventType.StartCheckout;\n        COMPLETE_CHECKOUT: ChasePayEventType.CompleteCheckout;\n        CANCEL_CHECKOUT: ChasePayEventType.CancelCheckout;\n    };\n    isChasePayUp(): boolean;\n    insertButtons(options: ChasePayInsertOptions): void;\n    insertBrandings(options: ChasePayInsertOptions): void;\n    startCheckout(digitalSessionId?: string): void;\n    showLoadingAnimation(): void;\n    configure(options: ChasePayConfigureOptions): void;\n    on<ChasePayEventType extends keyof ChasePayEventMap>(eventType: ChasePayEventType, callback: ChasePayEventMap[ChasePayEventType]): {};\n}\n\nexport interface ChasePayInitializeOptions {\n    /**\n     * This container is used to host the chasepay branding logo.\n     * It should be an HTML element.\n     */\n    logoContainer: string;\n\n    /**\n     * This walletButton is used to set an event listener, provide an element ID if you want\n     * users to be able to launch the ChasePay wallet modal by clicking on a button.\n     * It should be an HTML element.\n     */\n    walletButton?: string;\n\n    /**\n     * A callback that gets called when the customer selects a payment option.\n     */\n    onPaymentSelect?(): void;\n}\n","import { BraintreeError } from './braintree';\n\nexport default function isBraintreeError(error: BraintreeError | Error): error is BraintreeError {\n    return error.name === 'BraintreeError';\n}\n","import { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, StandardError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport BraintreeVisaCheckoutPaymentProcessor from './braintree-visacheckout-payment-processor';\nimport { VisaCheckoutPaymentSuccessPayload } from './visacheckout';\nimport VisaCheckoutScriptLoader from './visacheckout-script-loader';\n\nexport default class BraintreeVisaCheckoutPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _braintreeVisaCheckoutPaymentProcessor: BraintreeVisaCheckoutPaymentProcessor,\n        private _visaCheckoutScriptLoader: VisaCheckoutScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { braintreevisacheckout: visaCheckoutOptions, methodId } = options;\n\n        if (!visaCheckoutOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.braintreevisacheckout\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                const checkout = state.checkout.getCheckout();\n                const storeConfig = state.config.getStoreConfig();\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                if (!storeConfig) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n                }\n\n                if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const {\n                    onError = () => {},\n                    onPaymentSelect = () => {},\n                } = visaCheckoutOptions;\n\n                const initOptions = {\n                    locale: storeConfig.storeProfile.storeLanguage,\n                    collectShipping: false,\n                    subtotal: checkout.subtotal,\n                    currencyCode: storeConfig.currency.code,\n                };\n\n                return Promise.all([\n                    this._visaCheckoutScriptLoader.load(this._paymentMethod.config.testMode),\n                    this._braintreeVisaCheckoutPaymentProcessor.initialize(this._paymentMethod.clientToken, initOptions),\n                ])\n                .then(([visaCheckout, visaInitOptions]) => {\n                    visaCheckout.init(visaInitOptions);\n                    visaCheckout.on('payment.success', (paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) =>\n                        this._paymentInstrumentSelected(paymentSuccessPayload)\n                            .then(() => onPaymentSelect())\n                            .catch(error => onError(error))\n                    );\n                    visaCheckout.on('payment.error', (payment, error) => onError(error));\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = orderRequest;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const { nonce } = this._paymentMethod.initializationData;\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData: { nonce } }))\n            )\n            .catch((error: Error) => this._handleError(error));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._braintreeVisaCheckoutPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    private _paymentInstrumentSelected(paymentSuccessPayload: VisaCheckoutPaymentSuccessPayload) {\n        const state = this._store.getState();\n\n        if (!this._paymentMethod) {\n            throw new Error('Payment method not initialized');\n        }\n\n        const { id: methodId } = this._paymentMethod;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._braintreeVisaCheckoutPaymentProcessor.handleSuccess(\n                paymentSuccessPayload,\n                state.shippingAddress.getShippingAddress(),\n                state.billingAddress.getBillingAddress()\n            )\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _handleError(error: Error): never {\n        if (error.name === 'BraintreeError') {\n            throw new StandardError(error.message);\n        }\n\n        throw error;\n    }\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { Subject } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport Payment from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\nimport { WepayRiskClient } from '../wepay';\n\nimport { ChasePay, ChasePayEventType, ChasePaySuccessPayload } from './chasepay';\nimport ChasePayInitializeOptions from './chasepay-initialize-options';\nimport ChasePayScriptLoader from './chasepay-script-loader';\n\nexport default class ChasePayPaymentStrategy implements PaymentStrategy {\n    private _chasePayClient?: ChasePay;\n    private _methodId!: string;\n    private _walletButton?: HTMLElement;\n    private _walletEvent$: Subject<{ type: ChasePayEventType }>;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _chasePayScriptLoader: ChasePayScriptLoader,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        this._walletEvent$ = new Subject();\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        if (!options.chasepay) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.chasepay\" argument is not provided.');\n        }\n\n        const walletButton = options.chasepay.walletButton && document.getElementById(options.chasepay.walletButton);\n\n        if (walletButton) {\n            this._walletButton = walletButton;\n            this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n        }\n\n        return this._configureWallet(options.chasepay)\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._chasePayClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._getPayment()\n            .catch(error => {\n                if (error.subtype === MissingDataErrorType.MissingPayment) {\n                    return this._displayWallet()\n                        .then(() => this._getPayment());\n                }\n\n                throw error;\n            })\n            .then(payment =>\n                this._createOrder(payment, payload.useStoreCredit, options)\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _configureWallet(options: ChasePayInitializeOptions): Promise<void> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return this._chasePayScriptLoader.load(paymentMethod.config.testMode)\n            .then(({ ChasePay }) => {\n                this._chasePayClient = ChasePay;\n\n                if (options.logoContainer && document.getElementById(options.logoContainer)) {\n                    this._chasePayClient.insertBrandings({\n                        color: 'white',\n                        containers: [options.logoContainer],\n                    });\n                }\n\n                this._chasePayClient.configure({\n                    language: storeConfig.storeProfile.storeLanguage,\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CancelCheckout, () => {\n                    this._walletEvent$.next({ type: ChasePayEventType.CancelCheckout });\n\n                    if (options.onCancel) {\n                        options.onCancel();\n                    }\n                });\n\n                this._chasePayClient.on(ChasePayEventType.CompleteCheckout, (payload: ChasePaySuccessPayload) => {\n                    this._setSessionToken(payload.sessionToken)\n                        .then(() => {\n                            this._walletEvent$.next({ type: ChasePayEventType.CompleteCheckout });\n\n                            if (options.onPaymentSelect) {\n                                options.onPaymentSelect();\n                            }\n                        });\n                });\n            });\n    }\n\n    private _displayWallet(): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n                .then(state => {\n                    const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                    if (!this._chasePayClient) {\n                        throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                    }\n\n                    if (!paymentMethod) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    this._chasePayClient.showLoadingAnimation();\n                    this._chasePayClient.startCheckout(paymentMethod.initializationData.digitalSessionId);\n                });\n\n            // Wait for payment selection\n            return new Promise((resolve, reject) => {\n                this._walletEvent$\n                    .pipe(take(1))\n                    .subscribe((event: { type: ChasePayEventType }) => {\n                        if (event.type === ChasePayEventType.CancelCheckout) {\n                            reject(new PaymentMethodCancelledError());\n                        } else if (event.type === ChasePayEventType.CompleteCheckout) {\n                            resolve();\n                        }\n                    });\n            });\n        }, { methodId: this._methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _setSessionToken(sessionToken: string): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n        const merchantRequestId = paymentMethod && paymentMethod.initializationData.merchantRequestId;\n\n        return this._requestSender.post('checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\n            },\n            body: {\n                action: 'set_external_checkout',\n                provider: this._methodId,\n                sessionToken,\n                merchantRequestId,\n            },\n        })\n            // Re-hydrate checkout data\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId)),\n            ]))\n            .then(() => this._store.getState());\n    }\n\n    private _getPayment(): Promise<Payment> {\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(this._methodId))\n            .then(() => {\n                if (this._methodId === 'wepay') {\n                    return this._wepayRiskClient.initialize()\n                        .then(client => client.getRiskToken());\n                }\n\n                return '';\n            })\n            .then(riskToken => {\n                const state = this._store.getState();\n                const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!paymentMethod.initializationData.paymentCryptogram) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPayment);\n                }\n\n                const paymentData = {\n                    method: this._methodId,\n                    cryptogramId: paymentMethod.initializationData.paymentCryptogram,\n                    eci: paymentMethod.initializationData.eci,\n                    transactionId: btoa(paymentMethod.initializationData.reqTokenId),\n                    ccExpiry: {\n                        month: paymentMethod.initializationData.expDate.toString().substr(0, 2),\n                        year: paymentMethod.initializationData.expDate.toString().substr(2, 2),\n                    },\n                    ccNumber: paymentMethod.initializationData.accountNum,\n                    accountMask: paymentMethod.initializationData.accountMask,\n                    extraData: riskToken ? { riskToken } : undefined,\n                };\n\n                return {\n                    methodId: this._methodId,\n                    paymentData,\n                };\n            });\n    }\n\n    private _createOrder(payment: Payment, useStoreCredit?: boolean, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit }, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(payment)));\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): void {\n        event.preventDefault();\n\n        this._displayWallet();\n    }\n}\n","export const CardinalSignatureValidationErrors = [100004, 1010, 1011, 1020];\n\nexport interface CardinalSDK {\n    configure(params: CardinalConfiguration): void;\n    on(params: CardinalEventType, callback: CardinalEventMap[CardinalEventType]): void;\n    off(params: CardinalEventType): void;\n    setup<K extends keyof CardinalInitializationDataMap>(initializationType: K, initializationData: CardinalInitializationDataMap[K]): void;\n    trigger(event: CardinalTriggerEvents, data?: string): Promise<CardinalBinProcessResponse | void>;\n    continue(paymentBrand: CardinalPaymentBrand, continueObject: CardinalContinue, order: CardinalPartialOrder): void;\n    start(paymentBrand: CardinalPaymentBrand, order: CardinalPartialOrder, jwt?: string): void;\n}\n\nexport interface CardinalWindow extends Window {\n    Cardinal?: CardinalSDK;\n}\n\nexport interface CardinalEventMap {\n    [CardinalEventType.SetupCompleted](setupCompleteData: CardinalSetupCompletedData): void;\n    [CardinalEventType.Validated](data: CardinalValidatedData, jwt?: string): void;\n}\n\nexport type CardinalConfiguration = Partial<{\n    logging: {\n        level: string;\n    };\n    payment: {\n        view: string;\n        framework: string;\n        displayLoading: boolean;\n    };\n}>;\n\nexport interface CardinalSetupCompletedData {\n    sessionId: string;\n    modules: CardinalModuleState[];\n}\n\nexport interface CardinalModuleState {\n    loaded: boolean;\n    module: string;\n}\n\nexport enum CardinalInitializationType {\n    Init = 'init',\n    Complete = 'complete',\n    Confirm = 'confirm',\n}\n\nexport interface CardinalInitializationDataMap {\n    [CardinalInitializationType.Init]: CardinalInitTypeData;\n    [CardinalInitializationType.Complete]: CardinalCompleteTypeData;\n    [CardinalInitializationType.Confirm]: CardinalConfirmTypeData;\n}\n\nexport interface CardinalInitTypeData {\n    jwt: string;\n}\n\nexport interface CardinalCompleteTypeData {\n    Status: string;\n}\n\nexport interface CardinalConfirmTypeData {\n    jwt: string;\n    cardinalResponseJwt: string;\n}\n\nexport interface CardinalValidatedData {\n    ActionCode?: CardinalValidatedAction;\n    ErrorDescription: string;\n    ErrorNumber: number;\n    Validated: boolean;\n    Payment?: CardinalPayment;\n}\n\nexport interface CardinalPayment {\n    ProcessorTransactionId: string;\n    Type: CardinalPaymentType;\n}\n\nexport interface CardinalBinProcessResponse {\n    Status: boolean;\n}\n\nexport interface CardinalContinue {\n    AcsUrl: string;\n    Payload: string;\n}\n\nexport interface CardinalPartialOrder {\n    OrderDetails: CardinalOrderDetails;\n    Consumer?: CardinalConsumer;\n}\n\nexport interface CardinalConsumer {\n    Email1?: string;\n    Email2?: string;\n    ShippingAddress?: CardinalAddress;\n    BillingAddress?: CardinalAddress;\n    Account?: CardinalAccount;\n}\n\nexport interface CardinalAccount {\n    AccountNumber: number;\n    ExpirationMonth: number;\n    ExpirationYear: number;\n    NameOnAccount: string;\n    CardCode: number;\n}\n\nexport interface CardinalAddress {\n    FullName?: string;\n    FirstName: string;\n    MiddleName?: string;\n    LastName: string;\n    Address1: string;\n    Address2?: string;\n    Address3?: string;\n    City: string;\n    State: string;\n    PostalCode: string;\n    CountryCode: string;\n    Phone1?: string;\n    Phone2?: string;\n}\n\nexport interface CardinalOrderDetails {\n    OrderNumber: string;\n    Amount: number;\n    CurrencyCode: string;\n    OrderDescription?: string;\n    OrderChannel: string;\n    TransactionId?: string;\n}\n\nexport enum CardinalEventType {\n    SetupCompleted = 'payments.setupComplete',\n    Validated = 'payments.validated',\n}\n\nexport enum CardinalValidatedAction {\n    Success = 'SUCCESS',\n    NoAction = 'NOACTION',\n    Failure = 'FAILURE',\n    Error = 'ERROR',\n}\n\nexport enum CardinalPaymentType {\n    CCA = 'CCA',\n    Paypal = 'Paypal',\n    Wallet = 'Wallet',\n    VisaCheckout = 'VisaCheckout',\n    ApplePay = 'ApplePay',\n    DiscoverWallet = 'DiscoverWallet',\n}\n\nexport enum CardinalTriggerEvents {\n    BinProcess = 'bin.process',\n}\n\nexport enum CardinalPaymentBrand {\n    CCA = 'cca',\n}\n","import { FormPoster } from '@bigcommerce/form-poster';\nimport { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class ConvergePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: FormPoster\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class CreditCardPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { find, some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    RequestError\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport isCreditCardLike from '../../is-credit-card-like';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport { CreditCardInstrument, VaultedInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport {\n    CardinalClient,\n    CardinalOrderData,\n    CardinalSupportedPaymentInstrument\n} from './index';\n\nexport default class CyberSourcePaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _cardinalClient: CardinalClient\n    ) { }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod || !this._paymentMethod.config) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                return this._cardinalClient.initialize(this._paymentMethod.config.testMode)\n                    .then(() => this._store.getState());\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n\n        if (!payment) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.config) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._paymentMethod.config.is3dsEnabled ?\n            this._placeOrderUsing3DS(order, payment, options, this._paymentMethod.clientToken) :\n            this._placeOrder(order, payment, options);\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _placeOrderUsing3DS(order: OrderRequestBody, payment: OrderPaymentRequestBody, options?: PaymentRequestOptions, clientToken?: string): Promise<InternalCheckoutSelectors> {\n        if (!clientToken) {\n            return Promise.reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n        }\n\n        if (!payment.paymentData) {\n            return Promise.reject(new MissingDataError(MissingDataErrorType.MissingPayment));\n        }\n\n        const paymentData = payment.paymentData as CreditCardInstrument;\n\n        return this._cardinalClient.configure(clientToken)\n            .then(() => this._cardinalClient.runBinProcess(this._getBinNumber(paymentData)))\n            .then(() => {\n                payment = {\n                    ...payment,\n                    paymentData: {\n                        ...paymentData,\n                        threeDSecure: { token: this._cardinalClient.getClientToken() },\n                    },\n                };\n\n                return this._placeOrder(order, payment, options)\n                    .catch(error => {\n                        if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'enrolled_card' })) {\n                            return Promise.reject(error);\n                        }\n\n                        return this._cardinalClient.getThreeDSecureData(error.body.three_ds_result, this._getOrderData(paymentData))\n                            .then(threeDSecure =>\n                                this._store.dispatch(this._paymentActionCreator.submitPayment({\n                                    ...payment,\n                                    paymentData: {\n                                        ...paymentData,\n                                        threeDSecure,\n                                    },\n                                }))\n                            );\n                    });\n            });\n    }\n\n    private _placeOrder(order: OrderRequestBody, payment: OrderPaymentRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payment.paymentData) {\n            return Promise.reject(new MissingDataError(MissingDataErrorType.MissingPayment));\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment(payment))\n            );\n    }\n\n    private _getBinNumber(payment: CardinalSupportedPaymentInstrument): string {\n        if (isVaultedInstrument(payment)) {\n            const instruments = this._store.getState().instruments.getInstruments();\n\n            const { instrumentId } = payment;\n\n            const entry = find(instruments, { bigpayToken: instrumentId });\n\n            return entry && entry.iin || '';\n        }\n\n        return payment.ccNumber;\n    }\n\n    private _getOrderData(paymentData: CardinalSupportedPaymentInstrument): CardinalOrderData {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n        const shippingAddress = state.shippingAddress.getShippingAddress();\n        const checkout = state.checkout.getCheckout();\n        const order = state.order.getOrder();\n\n        if (!billingAddress || !billingAddress.email) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!order) {\n            throw new MissingDataError(MissingDataErrorType.MissingOrder);\n        }\n\n        const payment: CardinalOrderData = {\n            billingAddress,\n            shippingAddress,\n            currencyCode: checkout.cart.currency.code,\n            id: order.orderId.toString(),\n            amount: checkout.cart.cartAmount,\n        };\n\n        if (isCreditCardLike(paymentData)) {\n            payment.paymentData = paymentData;\n        }\n\n        return payment;\n    }\n}\n","import { includes } from 'lodash';\n\nimport Address from '../../../address/address';\nimport BillingAddress from '../../../billing/billing-address';\nimport {\n    MissingDataError, MissingDataErrorType, NotInitializedError,\n    NotInitializedErrorType, StandardError\n} from '../../../common/error/errors';\nimport { CreditCardInstrument, ThreeDSecureToken, VaultedInstrument } from '../../payment';\nimport { ThreeDsResult } from '../../payment-response-body';\n\nimport {\n    CardinalAccount,\n    CardinalAddress,\n    CardinalConsumer,\n    CardinalEventType,\n    CardinalInitializationType,\n    CardinalPartialOrder,\n    CardinalPaymentBrand,\n    CardinalScriptLoader,\n    CardinalSignatureValidationErrors,\n    CardinalSDK,\n    CardinalTriggerEvents,\n    CardinalValidatedAction,\n    CardinalValidatedData\n} from './index';\n\nexport type CardinalSupportedPaymentInstrument = CreditCardInstrument | VaultedInstrument;\n\nexport interface CardinalOrderData {\n    billingAddress: BillingAddress;\n    shippingAddress?: Address;\n    currencyCode: string;\n    id: string;\n    amount: number;\n    paymentData?: CreditCardInstrument;\n}\n\nexport default class CardinalClient {\n    private _sdk?: Promise<CardinalSDK>;\n    private _clientToken?: string;\n\n    constructor(\n        private _scriptLoader: CardinalScriptLoader\n    ) {}\n\n    initialize(testMode?: boolean): Promise<void> {\n        if (!this._sdk) {\n            this._sdk = this._scriptLoader.load(testMode);\n        }\n\n        return this._sdk.then(() => {});\n    }\n\n    configure(clientToken: string): Promise<void> {\n        if (this._clientToken) { return Promise.resolve(); }\n\n        return this._getClientSDK()\n            .then(client => new Promise<void>((resolve, reject) => {\n                client.on(CardinalEventType.SetupCompleted, () => {\n                    client.off(CardinalEventType.SetupCompleted);\n                    client.off(CardinalEventType.Validated);\n                    this._clientToken = clientToken;\n\n                    resolve();\n                });\n\n                client.on(CardinalEventType.Validated, (data: CardinalValidatedData) => {\n                    client.off(CardinalEventType.SetupCompleted);\n                    client.off(CardinalEventType.Validated);\n\n                    switch (data.ActionCode) {\n                        case CardinalValidatedAction.Error:\n                            if (includes(CardinalSignatureValidationErrors, data.ErrorNumber)) {\n                                reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n                            }\n                            break;\n                    }\n                });\n\n                client.setup(CardinalInitializationType.Init, {\n                    jwt: clientToken,\n                });\n        }));\n    }\n\n    runBinProcess(binNumber: string): Promise<void> {\n        return this._getClientSDK()\n            .then(client => client.trigger(CardinalTriggerEvents.BinProcess, binNumber).catch(() => {}))\n            .then(result => {\n                if (!result || !result.Status) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n            });\n    }\n\n    getClientToken(): string {\n        if (!this._clientToken) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._clientToken;\n    }\n\n    getThreeDSecureData(threeDSecureData: ThreeDsResult, orderData: CardinalOrderData): Promise<ThreeDSecureToken> {\n        return this._getClientSDK()\n            .then(client => {\n                return new Promise<ThreeDSecureToken>((resolve, reject) => {\n                    client.on(CardinalEventType.Validated, (data: CardinalValidatedData, jwt: string) => {\n                        client.off(CardinalEventType.Validated);\n                        if (!jwt) {\n                            reject(new StandardError('User failed authentication or an error was encountered while processing the transaction.'));\n                        }\n\n                        resolve({ token: jwt });\n                    });\n\n                    const continueObject = {\n                        AcsUrl: threeDSecureData.acs_url,\n                        Payload: threeDSecureData.merchant_data,\n                    };\n\n                    const partialOrder = this._mapToPartialOrder(orderData, threeDSecureData.payer_auth_request);\n\n                    client.continue(CardinalPaymentBrand.CCA, continueObject, partialOrder);\n                });\n        });\n    }\n\n    private _mapToPartialOrder(orderData: CardinalOrderData, transactionId: string): CardinalPartialOrder {\n        const consumer: CardinalConsumer = {\n            BillingAddress: this._mapToCardinalAddress(orderData.billingAddress),\n        };\n\n        if (orderData.paymentData) {\n            consumer.Account = this._mapToCardinalAccount(orderData.paymentData);\n        }\n\n        if (orderData.billingAddress.email) {\n            consumer.Email1 = orderData.billingAddress.email;\n        }\n\n        if (orderData.shippingAddress) {\n            consumer.ShippingAddress = this._mapToCardinalAddress(orderData.shippingAddress);\n        }\n\n        return  {\n            Consumer: consumer,\n            OrderDetails: {\n                OrderNumber: orderData.id,\n                Amount: orderData.amount,\n                CurrencyCode: orderData.currencyCode,\n                OrderChannel: 'S',\n                TransactionId: transactionId,\n            },\n        };\n    }\n\n    private _mapToCardinalAccount(paymentData: CreditCardInstrument): CardinalAccount {\n        return {\n            AccountNumber: Number(paymentData.ccNumber),\n            ExpirationMonth: Number(paymentData.ccExpiry.month),\n            ExpirationYear: Number(paymentData.ccExpiry.year),\n            NameOnAccount: paymentData.ccName,\n            CardCode: Number(paymentData.ccCvv),\n        };\n    }\n\n    private _mapToCardinalAddress(address: Address): CardinalAddress {\n        const cardinalAddress: CardinalAddress = {\n            FirstName: address.firstName,\n            LastName: address.lastName,\n            Address1: address.address1,\n            City: address.city,\n            State: address.stateOrProvince,\n            PostalCode: address.postalCode,\n            CountryCode: address.countryCode,\n        };\n\n        if (address.address2) {\n            cardinalAddress.Address2 = address.address2;\n        }\n\n        if (address.phone) {\n            cardinalAddress.Phone1 = address.phone;\n        }\n\n        return cardinalAddress;\n    }\n\n    private _getClientSDK(): Promise<CardinalSDK> {\n        if (!this._sdk) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._sdk;\n    }\n}\n","export default interface SquarePaymentForm {\n    build(): void;\n    requestCardNonce(): void;\n    setPostalCode(postalCode: string): void;\n}\n\nexport type SquarePaymentFormConstructor = new(options: SquareFormOptions) => SquarePaymentForm;\n\nexport interface SquareFormOptions {\n    applicationId: string;\n    env: string;\n    locationId: string;\n    inputClass?: string;\n    inputStyles?: string[];\n    callbacks?: SquareFormCallbacks;\n    cardNumber: SquareFormElement;\n    cvv: SquareFormElement;\n    expirationDate: SquareFormElement;\n    postalCode: SquareFormElement;\n    masterpass: SquareFormElement;\n}\nexport interface LineItem {\n    label: string;\n    amount: string;\n    pending: boolean;\n}\n\nexport interface SquarePaymentRequest {\n    requestShippingAddress: boolean;\n    requestBillingInfo: boolean;\n    shippingContact?: Contact;\n    countryCode: string;\n    currencyCode: string;\n    lineItems?: LineItem[];\n    total: LineItem;\n}\n\nexport interface NonceGenerationError {\n    type: string;\n    message: string;\n    field: string;\n}\n\nexport interface CardData {\n    card_brand: CardBrand;\n    last_4: number;\n    exp_month: number;\n    exp_year: number;\n    billing_postal_code: string;\n    digital_wallet_type: DigitalWalletType;\n}\n\nexport interface Contact {\n    familyName: string;\n    givenName: string;\n    email: string;\n    country: string;\n    countryName: string;\n    region: string;\n    city: string;\n    addressLines: string[];\n    postalCode: string;\n    phone: string;\n}\n\nexport enum CardBrand {\n    americanExpress = 'AMERICAN_EXPRESS',\n    discover = 'DISCOVER',\n    discoverDiners = 'DISCOVER_DINERS',\n    JCB = 'JCB',\n    masterCard = 'MASTERCARD',\n    unionPay = 'CHINA_UNIONPAY',\n    unknown = 'OTHER_BRAND',\n    visa = 'VISA',\n    squareGift = 'SQUARE_GIFT_CARD',\n}\n\nexport enum DigitalWalletType {\n    applePay = 'APPLEPAY',\n    masterpass = 'MASTERPASS',\n    none = 'NONE',\n}\n\n/**\n * Configures any form element provided by Square payment.\n */\nexport interface SquareFormElement {\n    /**\n     * The ID of the container which the form element should insert into.\n     */\n    elementId: string;\n\n    /**\n     * The placeholder text to use for the form element, if provided.\n     */\n    placeholder?: string;\n}\n\nexport interface SquareFormCallbacks {\n    paymentFormLoaded?(form: SquarePaymentForm): void;\n    unsupportedBrowserDetected?(): void;\n    cardNonceResponseReceived?(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): void;\n    methodsSupported?(methods: { [key: string]: boolean }): void;\n    createPaymentRequest?(): void;\n}\n\nexport type SquareFormFactory = (options: SquareFormOptions) => SquarePaymentForm;\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { CardinalSDK, CardinalWindow } from './cardinal';\n\nconst SDK_TEST_URL = 'https://songbirdstag.cardinalcommerce.com/edge/v1/songbird.js';\nconst SDK_PROD_URL = 'https://songbird.cardinalcommerce.com/edge/v1/songbird.js';\n\nexport default class CardinalScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: CardinalWindow = window\n    ) {}\n\n    load(testMode?: boolean): Promise<CardinalSDK> {\n        return this._scriptLoader\n            .loadScript(testMode ? SDK_TEST_URL : SDK_PROD_URL)\n            .then(() => {\n                if (!this._window.Cardinal) {\n                    throw new StandardError();\n                }\n\n                return this._window.Cardinal;\n            });\n    }\n}\n","\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { GooglePaymentData, PaymentMethodData } from './googlepay';\nimport GooglePayPaymentInitializeOptions from './googlepay-initialize-options';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\n\nexport default class GooglePayPaymentStrategy implements PaymentStrategy {\n    private _googlePayOptions?: GooglePayPaymentInitializeOptions;\n    private _methodId?: string;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _googlePayPaymentProcessor: GooglePayPaymentProcessor\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._methodId = options.methodId;\n\n        return this._googlePayPaymentProcessor.initialize(this._methodId)\n            .then(() => {\n                this._googlePayOptions = this._getGooglePayOptions(options);\n\n                if (!this._googlePayOptions) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n                }\n\n                const walletButton = this._googlePayOptions.walletButton && document.getElementById(this._googlePayOptions.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n\n        return this._googlePayPaymentProcessor.deinitialize()\n            .then(() => this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!this._googlePayOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.googlepay\" argument is not provided.');\n        }\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return Promise.resolve(this._getPayment())\n            .then(payment => {\n                if (!payment.paymentData.nonce || !payment.paymentData.cardInformation) {\n                    // TODO: Find a way to share the code with _handleWalletButtonClick method\n                    return this._googlePayPaymentProcessor.displayWallet()\n                        .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                        .then(() => onPaymentSelect())\n                        .then(() => this._getPayment())\n                        .catch(error => {\n                            if (error.statusCode !== 'CANCELED') {\n                                onError(error);\n                            }\n                        });\n                }\n\n                return payment;\n            })\n            .then(payment =>\n                this._store.dispatch(this._orderActionCreator.submitOrder({ useStoreCredit: payload.useStoreCredit }, options))\n                    .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment(this._getPayment())))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _paymentInstrumentSelected(paymentData: GooglePaymentData) {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        // TODO: Revisit how we deal with GooglePaymentData after receiving it from Google\n        return this._googlePayPaymentProcessor.handleSuccess(paymentData)\n            .then(() => Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n    }\n\n    private _getGooglePayOptions(options: PaymentInitializeOptions): GooglePayPaymentInitializeOptions {\n        if (options.methodId === 'googlepaybraintree' && options.googlepaybraintree) {\n            return options.googlepaybraintree;\n        }\n\n        if (options.methodId === 'googlepaystripe' && options.googlepaystripe) {\n            return options.googlepaystripe;\n        }\n\n        throw new InvalidArgumentError();\n    }\n\n    private _getPayment(): PaymentMethodData {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(this._methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        if (!paymentMethod.initializationData.nonce) {\n            throw new MissingDataError(MissingDataErrorType.MissingPayment);\n        }\n\n        const paymentData = {\n            method: this._methodId,\n            nonce: paymentMethod.initializationData.nonce,\n            cardInformation: paymentMethod.initializationData.card_information,\n        };\n\n        return {\n            methodId: this._methodId,\n            paymentData,\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event): Promise<InternalCheckoutSelectors> {\n        event.preventDefault();\n\n        if (!this._methodId || !this._googlePayOptions) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        const methodId = this._methodId;\n\n        const {\n            onError = () => {},\n            onPaymentSelect = () => {},\n        } = this._googlePayOptions;\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._googlePayPaymentProcessor.displayWallet()\n                .then(paymentData => this._paymentInstrumentSelected(paymentData))\n                .then(() => onPaymentSelect())\n                .catch(error => {\n                    if (error.statusCode !== 'CANCELED') {\n                        onError(error);\n                    }\n                });\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n}\n","import { includes } from 'lodash';\n\nimport { Address } from '../../../address';\nimport BillingAddress from '../../../billing/billing-address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { PaymentMethodCancelledError } from '../../errors';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport KlarnaCredit, { KlarnaAddress, KlarnaLoadResponse, KlarnaUpdateSessionParams } from './klarna-credit';\nimport KlarnaScriptLoader from './klarna-script-loader';\n\nexport default class KlarnaPaymentStrategy implements PaymentStrategy {\n    private _klarnaCredit?: KlarnaCredit;\n    private _unsubscribe?: (() => void);\n    private _supportedEUCountries = ['AT', 'DE', 'DK', 'FI', 'GB', 'NL', 'NO', 'SE', 'CH'];\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _klarnaScriptLoader: KlarnaScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return this._klarnaScriptLoader.load()\n            .then(klarnaCredit => { this._klarnaCredit = klarnaCredit; })\n            .then(() => {\n                this._unsubscribe = this._store.subscribe(\n                    state => {\n                        if (state.paymentStrategies.isInitialized(options.methodId)) {\n                            this._loadWidget(options);\n                        }\n                    },\n                    state => {\n                        const checkout = state.checkout.getCheckout();\n\n                        return checkout && checkout.outstandingBalance;\n                    }\n                );\n\n                return this._loadWidget(options);\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._unsubscribe) {\n            this._unsubscribe();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (!payload.payment) {\n            throw new InvalidArgumentError('Unable to proceed because \"payload.payment\" argument is not provided.');\n        }\n\n        const { payment: { paymentData, ...paymentPayload } } = payload;\n\n        return this._authorize()\n            .then(({ authorization_token: authorizationToken }) => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializePayment(paymentPayload.methodId, { authorizationToken })\n            ))\n            .then(() => this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: paymentPayload,\n                    // Note: API currently doesn't support using Store Credit with Klarna.\n                    // To prevent deducting customer's store credit, set it as false.\n                    useStoreCredit: false,\n                }, options)\n            ));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _loadWidget(options: PaymentInitializeOptions): Promise<KlarnaLoadResponse> {\n        if (!options.klarna) {\n            throw new InvalidArgumentError('Unable to load widget because \"options.klarna\" argument is not provided.');\n        }\n\n        const { methodId, klarna: { container, onLoad } } = options;\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise<KlarnaLoadResponse>((resolve, reject) => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!this._klarnaCredit || !paymentMethod.clientToken) {\n                    throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                }\n\n                this._klarnaCredit.init({ client_token: paymentMethod.clientToken });\n\n                this._klarnaCredit.load({ container }, response => {\n                    if (onLoad) {\n                        onLoad(response);\n                    }\n                    resolve(response);\n                });\n            }));\n    }\n\n    private _getUpdateSessionData(billingAddress: BillingAddress, shippingAddress?: Address): KlarnaUpdateSessionParams {\n        if (!includes(this._supportedEUCountries, billingAddress.countryCode)) {\n            return {};\n        }\n\n        const data: KlarnaUpdateSessionParams = {\n            billing_address: this._mapToKlarnaAddress(billingAddress, billingAddress.email),\n        };\n\n        if (shippingAddress) {\n            data.shipping_address = this._mapToKlarnaAddress(shippingAddress, billingAddress.email);\n        }\n\n        return data;\n    }\n\n    private _mapToKlarnaAddress(address: Address, email?: string): KlarnaAddress {\n        const klarnaAddress: KlarnaAddress = {\n            street_address: address.address1,\n            city: address.city,\n            country: address.countryCode,\n            given_name: address.firstName,\n            family_name: address.lastName,\n            postal_code: address.postalCode,\n            region: address.stateOrProvince,\n            email,\n        };\n\n        if (address.address2) {\n            klarnaAddress.street_address2 = address.address2;\n        }\n\n        if (address.phone) {\n            klarnaAddress.phone = address.phone;\n        }\n\n        return klarnaAddress;\n    }\n\n    private _authorize(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n            const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n            if (!billingAddress) {\n                throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n            }\n\n            if (!this._klarnaCredit) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            const updateSessionData = this._getUpdateSessionData(billingAddress, shippingAddress);\n\n            this._klarnaCredit.authorize(updateSessionData, res => {\n                if (res.approved) {\n                    return resolve(res);\n                }\n\n                if (res.show_form) {\n                    return reject(new PaymentMethodCancelledError());\n                }\n\n                reject(new PaymentMethodInvalidError());\n            });\n        });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport KlarnaCredit from './klarna-credit';\nimport KlarnaWindow from './klarna-window';\n\nconst SDK_URL = '//credit.klarnacdn.net/lib/v1/api.js';\n\nexport default class KlarnaScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<KlarnaCredit> {\n        return this._scriptLoader.loadScript(SDK_URL)\n            .then(() => (window as KlarnaWindow).Klarna.Credit);\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class LegacyPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType } from '../../../common/error/errors';\nimport { bindDecorator as bind } from '../../../common/utility';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport getCallbackUrl from './get-callback-url';\nimport { Masterpass, MasterpassCheckoutOptions } from './masterpass';\nimport MasterpassScriptLoader from './masterpass-script-loader';\n\nexport default class MasterpassPaymentStrategy implements PaymentStrategy {\n    private _masterpassClient?: Masterpass;\n    private _paymentMethod?: PaymentMethod;\n    private _walletButton?: HTMLElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _masterpassScriptLoader: MasterpassScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._masterpassScriptLoader.load(this._paymentMethod.config.testMode)\n            .then(masterpass => {\n                this._masterpassClient = masterpass;\n\n                if (!options.masterpass) {\n                    throw new InvalidArgumentError('Unable to initialize payment because \"options.masterpass\" argument is not provided.');\n                }\n\n                const walletButton  = options.masterpass.walletButton && document.getElementById(options.masterpass.walletButton);\n\n                if (walletButton) {\n                    this._walletButton = walletButton;\n                    this._walletButton.addEventListener('click', this._handleWalletButtonClick);\n                }\n\n                return this._store.getState();\n            });\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        if (this._walletButton) {\n            this._walletButton.removeEventListener('click', this._handleWalletButtonClick);\n        }\n\n        this._walletButton = undefined;\n        this._masterpassClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = payload;\n        const order = { useStoreCredit: payload.useStoreCredit };\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData || !this._paymentMethod.initializationData.gateway) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        // TODO: Refactor the API endpoint to return nonce in the right place.\n        const paymentData = this._paymentMethod.initializationData.paymentData;\n\n        // TODO: Redirect to Masterpass if nonce has not been generated yet. And then finalise the order when the shopper is redirected back to the checkout page.\n        if (!paymentData) {\n            throw new InvalidArgumentError('Unable to proceed because \"paymentMethod.initializationData.paymentData\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData })));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _createMasterpassPayload(): MasterpassCheckoutOptions {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return {\n            checkoutId: this._paymentMethod.initializationData.checkoutId,\n            allowedCardTypes: this._paymentMethod.initializationData.allowedCardTypes,\n            amount: checkout.subtotal.toFixed(2),\n            currency: storeConfig.currency.code,\n            cartId: checkout.cart.id,\n            suppressShippingAddress: false,\n            callbackUrl: getCallbackUrl('checkout'),\n        };\n    }\n\n    @bind\n    private _handleWalletButtonClick(event: Event) {\n        event.preventDefault();\n\n        if (!this._masterpassClient) {\n            return;\n        }\n\n        const payload = this._createMasterpassPayload();\n        this._masterpassClient.checkout(payload);\n    }\n}\n","import { omit } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class NoPaymentDataRequiredPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options)\n        );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OfflinePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const action = this._orderActionCreator.submitOrder({\n            ...payload,\n            payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n        }, options);\n\n        return this._store.dispatch(action);\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderPaymentRequestBody, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class OffsitePaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const orderPayload = this._shouldSubmitFullPayload(payment) ? payload : order;\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(orderPayload, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.initializeOffsitePayment(payment.methodId, payment.gatewayId))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n        const status = state.payment.getPaymentStatus();\n\n        if (order && (status === paymentStatusTypes.ACKNOWLEDGE || status === paymentStatusTypes.FINALIZE)) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _shouldSubmitFullPayload(payment?: OrderPaymentRequestBody): boolean {\n        // FIXME: A temporary workaround to support offsite payment methods\n        // where their return URL needs to be provided by the core app.\n        if (!payment) {\n            return false;\n        }\n\n        return payment.gatewayId === 'adyen' || payment.methodId === 'ccavenuemars';\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class PaypalProPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._isPaymentAcknowledged()) {\n            return this._store.dispatch(\n                this._orderActionCreator.submitOrder({\n                    ...payload,\n                    payment: payload.payment ? { methodId: payload.payment.methodId } : undefined,\n                }, options)\n            );\n        }\n\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            );\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _isPaymentAcknowledged(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE;\n    }\n}\n","import { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport PaymentMethod from '../../payment-method';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nimport PaypalScriptLoader from './paypal-script-loader';\nimport { PaypalHostWindow, PaypalSDK } from './paypal-sdk';\n\nexport default class PaypalExpressPaymentStrategy implements PaymentStrategy {\n    private _paypalSdk?: PaypalSDK;\n    private _paymentMethod?: PaymentMethod;\n    private _useRedirectFlow: boolean = false;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _scriptLoader: PaypalScriptLoader,\n        private _window: PaypalHostWindow = window\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(options.methodId);\n        this._useRedirectFlow = (options.paypalexpress && options.paypalexpress.useRedirectFlow) === true;\n\n        if (!this._isInContextEnabled()) {\n            return Promise.resolve(this._store.getState());\n        }\n\n        return this._scriptLoader.loadPaypal()\n            .then(paypal => {\n                this._paypalSdk = paypal;\n\n                if (!this._paymentMethod || !this._paymentMethod.config.merchantId) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                this._paypalSdk.checkout.setup(this._paymentMethod.config.merchantId, {\n                    button: 'paypal-button',\n                    environment: this._paymentMethod.config.testMode ? 'sandbox' : 'production',\n                });\n            })\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(): Promise<InternalCheckoutSelectors> {\n        if (this._isInContextEnabled() && this._paypalSdk) {\n            this._paypalSdk.checkout.closeFlow();\n            this._paypalSdk = undefined;\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const paypal = this._paypalSdk;\n\n        if (this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options));\n        }\n\n        if (!this._isInContextEnabled() || this._useRedirectFlow) {\n            return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n                .then(state => {\n                    const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                    if (redirectUrl) {\n                        this._window.top.location.href = redirectUrl;\n                    }\n\n                    // We need to hold execution so the consumer does not redirect us somewhere else\n                    return new Promise<never>(() => {});\n                });\n        }\n\n        if (!paypal) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        paypal.checkout.initXO();\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(payload, options))\n            .then(state => {\n                const redirectUrl = state.payment.getPaymentRedirectUrl();\n\n                if (redirectUrl) {\n                    paypal.checkout.startFlow(redirectUrl);\n                }\n\n                // We need to hold execution so the consumer does not redirect us somewhere else\n                return new Promise<never>(() => {});\n            })\n            .catch(error => {\n                paypal.checkout.closeFlow();\n\n                return Promise.reject(error);\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && this._isAcknowledgedOrFinalized()) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _isAcknowledgedOrFinalized(): boolean {\n        const state = this._store.getState();\n\n        return state.payment.getPaymentStatus() === paymentStatusTypes.ACKNOWLEDGE\n            || state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE;\n    }\n\n    private _isInContextEnabled(): boolean {\n        return !!(this._paymentMethod && this._paymentMethod.config.merchantId);\n    }\n}\n","import { some } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { RequestError } from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport * as paymentStatusTypes from '../../payment-status-types';\nimport PaymentStrategy from '../payment-strategy';\n\nexport default class SagePayPaymentStrategy implements PaymentStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _formPoster: any\n    ) {}\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n\n        if (!payment || !paymentData) {\n            throw new PaymentArgumentInvalidError(['payment.paymentData']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() =>\n                this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n            )\n            .catch(error => {\n                if (!(error instanceof RequestError) || !some(error.body.errors, { code: 'three_d_secure_required' })) {\n                    return Promise.reject(error);\n                }\n\n                return new Promise(() => {\n                    this._formPoster.postForm(error.body.three_ds_result.acs_url, {\n                        PaReq: error.body.three_ds_result.payer_auth_request,\n                        TermUrl: error.body.three_ds_result.callback_url,\n                        MD: error.body.three_ds_result.merchant_data,\n                    });\n                });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const state = this._store.getState();\n        const order = state.order.getOrder();\n\n        if (order && state.payment.getPaymentStatus() === paymentStatusTypes.FINALIZE) {\n            return this._store.dispatch(this._orderActionCreator.finalizeOrder(order.orderId, options));\n        }\n\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    initialize(options?: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import StandardError from './standard-error';\n\nexport default class UnsupportedBrowserError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'Unsupported browser error');\n\n        this.name = 'UnsupportedBrowserError';\n        this.type = 'unsupported_browser';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\nimport { omit } from 'lodash';\nimport { noop } from 'rxjs';\n\nimport { CheckoutActionCreator, CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError,\n    TimeoutError,\n    UnsupportedBrowserError,\n} from '../../../common/error/errors';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { NonceInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategyActionCreator from '../../payment-strategy-action-creator';\nimport PaymentStrategy from '../payment-strategy';\n\nimport SquarePaymentForm, {\n    CardData,\n    Contact,\n    DigitalWalletType,\n    NonceGenerationError,\n    SquareFormElement,\n    SquareFormOptions,\n    SquarePaymentRequest\n} from './square-form';\nimport SquarePaymentInitializeOptions from './square-payment-initialize-options';\nimport SquareScriptLoader from './square-script-loader';\n\nexport default class SquarePaymentStrategy implements PaymentStrategy {\n    private _deferredRequestNonce?: DeferredPromise;\n    private _paymentForm?: SquarePaymentForm;\n    private _paymentMethod?: PaymentMethod;\n    private _squareOptions?: SquarePaymentInitializeOptions;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _requestSender: RequestSender,\n        private _scriptLoader: SquareScriptLoader\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { methodId } = options;\n\n        this._syncPaymentMethod(methodId);\n\n        return this._scriptLoader.load()\n            .then(createSquareForm =>\n                new Promise((resolve, reject) => {\n                    this._paymentForm = createSquareForm(\n                        this._getFormOptions(options, { resolve, reject })\n                    );\n                    this._paymentForm.build();\n                }))\n            .then(() => this._store.getState());\n    }\n\n    execute(orderRequest: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment } = orderRequest;\n\n        if (!payment || !payment.methodId) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment.methodId\" argument is not provided.');\n        }\n\n        this._syncPaymentMethod(payment.methodId);\n\n        return this._getNonceInstrument(payment.methodId)\n            .then(paymentData =>\n                this._store.dispatch(this._orderActionCreator.submitOrder(omit(orderRequest, 'payment'), options))\n                .then(() =>\n                    this._store.dispatch(this._paymentActionCreator.submitPayment({ ...payment, paymentData }))\n                ));\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _syncPaymentMethod(methodId: string): void {\n        const state = this._store.getState();\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.initializationData) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n    }\n\n    private _getCountryCode(countryName: string) {\n        switch (countryName.toUpperCase()) {\n            case 'NEW ZELAND':\n                return 'NZ';\n            case 'AUSTRALIA':\n                return 'AU';\n            default:\n                return 'US';\n        }\n    }\n\n    private _getNonceInstrument(methodId: string): Promise<NonceInstrument> {\n        const state = this._store.getState();\n        const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n        if (paymentMethod) {\n            const { initializationData } = paymentMethod;\n            if (initializationData && initializationData.paymentData.nonce) {\n                return Promise.resolve({ nonce: paymentMethod.initializationData.paymentData.nonce });\n            }\n        }\n\n        return new Promise<NonceInstrument>((resolve, reject) => {\n            if (!this._paymentForm) {\n                throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n            }\n\n            if (this._deferredRequestNonce) {\n                this._deferredRequestNonce.reject(new TimeoutError());\n            }\n\n            this._deferredRequestNonce = { resolve, reject };\n            this._paymentForm.requestCardNonce();\n        });\n    }\n\n    private _getFormOptions(options: PaymentInitializeOptions, deferred: DeferredPromise): SquareFormOptions {\n        const { square: squareOptions } = options;\n\n        if (!squareOptions || !this._paymentMethod) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.square\" argument is not provided.');\n        }\n\n        this._squareOptions = squareOptions;\n\n        return {\n            ...this._squareOptions,\n            ...this._paymentMethod.initializationData,\n            callbacks: {\n                cardNonceResponseReceived: (errors, nonce, cardData, billingContact, shippingContact) => {\n                    if (cardData && cardData.digital_wallet_type !== DigitalWalletType.none) {\n                        this._handleWalletNonceResponse(errors, nonce, cardData, billingContact, shippingContact);\n                    } else {\n                        this._handleCardNonceResponse(errors, nonce);\n                    }\n                },\n                createPaymentRequest: () => this._paymentRequestPayload(),\n                methodsSupported: methods => {\n                    const { masterpass } = squareOptions;\n\n                    if (masterpass) {\n                        this._showPaymentMethods(methods, masterpass);\n                    }\n                },\n                paymentFormLoaded: () => {\n                    deferred.resolve();\n                    this._setPostalCode();\n                },\n                unsupportedBrowserDetected: () => deferred.reject(new UnsupportedBrowserError()),\n            },\n        };\n    }\n\n    private _handleWalletNonceResponse(\n        errors?: NonceGenerationError[],\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact\n    ): void {\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n        const onPaymentSelect = this._squareOptions && this._squareOptions.onPaymentSelect || noop;\n\n        if (errors) {\n            onError(errors);\n        } else if (nonce && this._paymentMethod) {\n            this._paymentInstrumentSelected(\n                this._paymentMethod.id,\n                nonce,\n                cardData,\n                billingContact,\n                shippingContact\n            )\n                .then(onPaymentSelect)\n                .catch(onError);\n        }\n    }\n\n    private _handleCardNonceResponse(errors?: NonceGenerationError[], nonce?: string): void {\n        if (!this._deferredRequestNonce) {\n            throw new StandardError();\n        }\n\n        if (nonce && !errors) {\n            this._deferredRequestNonce.resolve({ nonce });\n\n            return;\n        }\n\n        const onError = this._squareOptions && this._squareOptions.onError || noop;\n\n        onError(errors);\n\n        this._deferredRequestNonce.reject(errors);\n    }\n\n    private _paymentInstrumentSelected(\n        methodId: string,\n        nonce?: string,\n        cardData?: CardData,\n        billingContact?: Contact,\n        shippingContact?: Contact): Promise<InternalCheckoutSelectors> {\n\n        return this._store.dispatch(this._paymentStrategyActionCreator.widgetInteraction(() => {\n            return this._setExternalCheckoutData(nonce, cardData, billingContact, shippingContact)\n            .then(() =>\n                Promise.all([\n                this._store.dispatch(this._checkoutActionCreator.loadCurrentCheckout()),\n                this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId)),\n            ]));\n        }, { methodId }), { queueId: 'widgetInteraction' });\n    }\n\n    private _paymentRequestPayload(): SquarePaymentRequest {\n        const state = this._store.getState();\n        const checkout = state.checkout.getCheckout();\n        const storeConfig = state.config.getStoreConfig();\n\n        if (!checkout) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n        }\n\n        if (!storeConfig) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        return {\n            requestShippingAddress: true,\n            requestBillingInfo: true,\n            currencyCode: storeConfig.currency.code,\n            countryCode: this._getCountryCode(storeConfig.storeProfile.storeCountry),\n            total: {\n                label: storeConfig.storeProfile.storeName,\n                amount: String(checkout.subtotal),\n                pending: false,\n            },\n        };\n    }\n\n    private _setExternalCheckoutData(nonce?: string, cardData?: CardData, billingContact?: Contact, shippingContact?: Contact): Promise<Response<any>> {\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                nonce,\n                provider: 'squarev2',\n                action: 'set_external_checkout',\n                cardData: JSON.stringify(cardData),\n                billingContact: JSON.stringify(billingContact),\n                shippingContact: JSON.stringify(shippingContact),\n            },\n        });\n    }\n\n    private _setPostalCode(): void {\n        const state = this._store.getState();\n        const billingAddress = state.billingAddress.getBillingAddress();\n\n        if (!this._paymentForm) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        if (billingAddress && billingAddress.postalCode) {\n            this._paymentForm.setPostalCode(billingAddress.postalCode);\n        }\n    }\n\n    private _showPaymentMethods(methods: { [key: string]: boolean }, element: SquareFormElement): void {\n        const masterpassBtn = document.getElementById(element.elementId);\n\n        if (masterpassBtn && methods.masterpass) {\n            masterpassBtn.style.display = 'inline-block';\n        }\n    }\n}\n\nexport interface DeferredPromise {\n    resolve(resolution?: NonceInstrument): void;\n    reject(reason?: any): void;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { SquareFormFactory, SquareFormOptions } from './square-form';\nimport SquareWindow from './square-window';\n\nexport default class SquareScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    load(): Promise<SquareFormFactory> {\n        const scriptURI = '//js.squareup.com/v2/paymentform';\n\n        return this._scriptLoader.loadScript(scriptURI)\n            .then(() => (options: SquareFormOptions) =>\n                new (window as SquareWindow).SqPaymentForm(options)\n            );\n    }\n}\n","import { Address } from '../../../address';\nimport { BillingAddress } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n    StandardError\n} from '../../../common/error/errors';\nimport { Customer } from '../../../customer';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { PaymentArgumentInvalidError } from '../../errors';\nimport isVaultedInstrument from '../../is-vaulted-instrument';\nimport { HostedInstrument } from '../../payment';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentRequestSender from '../../payment-request-sender';\nimport PaymentRequestTransformer from '../../payment-request-transformer';\nimport PaymentStrategy from '../payment-strategy';\n\nimport {\n    StripeAddress,\n    StripeBillingDetails,\n    StripeCardElement,\n    StripeHandleCardPaymentOptions,\n    StripePaymentMethodData,\n    StripeShippingDetails,\n    StripeV3Client\n} from './stripev3';\nimport StripeV3ScriptLoader from './stripev3-script-loader';\n\nexport default class StripeV3PaymentStrategy implements PaymentStrategy {\n    private _stripeV3Client?: StripeV3Client;\n    private _cardElement?: StripeCardElement;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _stripeScriptLoader: StripeV3ScriptLoader,\n        private _paymentRequestSender: PaymentRequestSender,\n        private _paymentRequestTransformer: PaymentRequestTransformer\n    ) {}\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const stripeOptions = options.stripev3;\n\n        if (!stripeOptions) {\n            throw new InvalidArgumentError('Unable to initialize payment because \"options.stripev3\" argument is not provided.');\n        }\n\n        const paymentMethod = this._store.getState().paymentMethods.getPaymentMethod(options.methodId);\n\n        if (!paymentMethod) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        return this._stripeScriptLoader.load(paymentMethod.initializationData.stripePublishableKey)\n            .then(stripeJs => {\n                this._stripeV3Client = stripeJs;\n                const elements = this._stripeV3Client.elements();\n                const cardElement = elements.create('card', {\n                    style: stripeOptions.style,\n                });\n\n                cardElement.mount(`#${stripeOptions.containerId}`);\n\n                this._cardElement = cardElement;\n\n                return Promise.resolve(this._store.getState());\n            });\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const paymentData = payment && payment.paymentData;\n        const shouldSaveInstrument = Boolean(paymentData && (paymentData as HostedInstrument).shouldSaveInstrument);\n\n        if (!payment) {\n            throw new PaymentArgumentInvalidError(['payment']);\n        }\n\n        return this._store.dispatch(this._orderActionCreator.submitOrder(order, options))\n            .then(() => {\n                if (paymentData && isVaultedInstrument(paymentData)) {\n                    return this._store.dispatch(this._paymentActionCreator.submitPayment({...payment, paymentData}));\n                }\n\n                return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId))\n                    .then(state => {\n                        const paymentMethod = state.paymentMethods.getPaymentMethod(payment.methodId);\n                        const paymentIntent = paymentMethod && paymentMethod.clientToken;\n\n                        if (!this._cardElement) {\n                            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n                        }\n\n                        return this._getStripeJs().createPaymentMethod('card', this._cardElement,\n                            this._mapStripePaymentMethodOptions()\n                        ).then(stripePaymentMethod => {\n                            if (stripePaymentMethod.error || !stripePaymentMethod.paymentMethod.id) {\n                                throw new StandardError(stripePaymentMethod.error && stripePaymentMethod.error.message);\n                            }\n\n                            if (!paymentIntent) {\n                                throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                            }\n\n                            const stripeCardPaymentOptions = {\n                                ...this._mapStripeCardPaymentOptions(shouldSaveInstrument),\n                                payment_method: stripePaymentMethod.paymentMethod.id,\n                            };\n\n                            return this._getStripeJs().handleCardPayment(paymentIntent, stripeCardPaymentOptions);\n                        })\n                            .then(stripeResponse => {\n                                if (stripeResponse.error || !stripeResponse.paymentIntent.id) {\n                                    throw new StandardError(stripeResponse.error && stripeResponse.error.message);\n                                }\n\n                                const paymentPayload = {\n                                    methodId: payment.methodId,\n                                    paymentData: {\n                                        nonce: stripeResponse.paymentIntent.id,\n                                        shouldSaveInstrument,\n                                    },\n                                };\n\n                                return this._store.dispatch(this._paymentActionCreator.submitPayment(paymentPayload));\n                            });\n                    });\n            });\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        if (this._cardElement) {\n            this._cardElement.unmount();\n        }\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    private _getStripeJs(): StripeV3Client {\n        if (!this._stripeV3Client) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._stripeV3Client;\n    }\n\n    private _mapStripeBillingAddress(billingAddress: BillingAddress | undefined): StripeAddress | undefined {\n        if (!billingAddress) {\n            return undefined;\n        }\n\n        return {\n            city: billingAddress.city,\n            country: billingAddress.countryCode,\n            line1: billingAddress.address1,\n            line2: billingAddress.address2,\n            postal_code: billingAddress.postalCode,\n            state: billingAddress.stateOrProvinceCode,\n        };\n    }\n\n    private _mapStripeShippingAddress(shippingAddress: Address | undefined): StripeAddress {\n        if (!shippingAddress) {\n            return { };\n        }\n\n        return {\n            city: shippingAddress.city,\n            country: shippingAddress.countryCode,\n            line1: shippingAddress.address1,\n            line2: shippingAddress.address2,\n            postal_code: shippingAddress.postalCode,\n            state: shippingAddress.stateOrProvinceCode,\n        };\n    }\n\n    private _mapStripeBillingDetails({ billingAddress, customer }: { billingAddress?: BillingAddress; customer?: Customer } = {}): StripeBillingDetails {\n        const stripeBillingDetails = {\n            address: this._mapStripeBillingAddress(billingAddress),\n        };\n\n        if (customer) {\n            return {\n                ...stripeBillingDetails,\n                email: customer.email,\n                name: `${customer.firstName} ${customer.lastName}`,\n            };\n        }\n\n        if (billingAddress) {\n            return {\n                ...stripeBillingDetails,\n                email: billingAddress.email,\n                name: `${billingAddress.firstName} ${billingAddress.lastName}`,\n            };\n        }\n\n        return {\n            name: 'Guest',\n        };\n    }\n\n    private _mapStripeShippingDetails({ shippingAddress, customer }: { shippingAddress?: Address ; customer?: Customer } = {}): StripeShippingDetails {\n        const stripeShippingDetails = {\n            address: this._mapStripeShippingAddress(shippingAddress),\n        };\n\n        if (customer) {\n            return {\n                ...stripeShippingDetails,\n                name: `${customer.firstName} ${customer.lastName}`,\n            };\n        }\n\n        if (shippingAddress) {\n            return {\n                ...stripeShippingDetails,\n                name: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n            };\n        }\n\n        return {\n            ...stripeShippingDetails,\n            name: 'Guest',\n        };\n    }\n\n    private _getCustomer(): Customer | undefined {\n        const customer = this._store.getState().customer.getCustomer();\n\n        if (customer) {\n            if (customer.firstName === '' || customer.lastName === '' || customer.email === '') {\n                return undefined;\n            }\n        }\n\n        return customer;\n    }\n\n    private _mapStripeCardPaymentOptions(shouldSaveInstrument: boolean): StripeHandleCardPaymentOptions {\n        const customer = this._getCustomer();\n        const shippingAddress = this._store.getState().shippingAddress.getShippingAddress();\n\n        const shippingDetails = {\n            shipping: this._mapStripeShippingDetails({ shippingAddress, customer }),\n        };\n\n        if (customer) {\n            return {\n                ...shippingDetails,\n                receipt_email: customer.email,\n                save_payment_method: shouldSaveInstrument,\n            };\n        } else {\n            return {\n                ...shippingDetails,\n            };\n        }\n    }\n\n    private _mapStripePaymentMethodOptions(): StripePaymentMethodData {\n        const customer = this._getCustomer();\n        const billingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        return {\n            billing_details: this._mapStripeBillingDetails({ billingAddress, customer }),\n        };\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { StripeHostWindow, StripeV3Client } from './stripev3';\n\nexport default class StripeV3ScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: StripeHostWindow = window\n    ) {}\n\n    load(publishableKey: string): Promise<StripeV3Client> {\n        return this._scriptLoader\n            .loadScript('https://js.stripe.com/v3/')\n            .then(() => {\n                if (!this._window.Stripe) {\n                    throw new StandardError();\n                }\n\n                return this._window.Stripe(publishableKey, {\n                    betas: ['payment_intent_beta_3'],\n                });\n            });\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\n\nimport WepayRisk from './wepay-risk';\nimport WepayWindow from './wepay-window';\n\nconst SCRIPT_SRC = '//static.wepay.com/min/js/risk.1.latest.js';\n\nexport default class WepayRiskClient {\n    private _riskClient?: WepayRisk;\n\n    constructor(\n        private _scriptLoader: ScriptLoader\n    ) {}\n\n    initialize(): Promise<WepayRiskClient> {\n        return this._scriptLoader\n            .loadScript(SCRIPT_SRC)\n            .then(() => this._riskClient = (window as WepayWindow).WePay.risk)\n            .then(() => this);\n    }\n\n    getRiskToken(): string {\n        if (!this._riskClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        this._riskClient.generate_risk_token();\n\n        return this._riskClient.get_risk_token();\n    }\n}\n","import { merge } from 'lodash';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport CreditCardPaymentStrategy from '../credit-card/credit-card-payment-strategy';\n\nimport WepayRiskClient from './wepay-risk-client';\n\nexport default class WepayPaymentStrategy extends CreditCardPaymentStrategy {\n    constructor(\n        store: CheckoutStore,\n        orderActionCreator: OrderActionCreator,\n        paymentActionCreator: PaymentActionCreator,\n        private _wepayRiskClient: WepayRiskClient\n    ) {\n        super(store, orderActionCreator, paymentActionCreator);\n    }\n\n    initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        this._wepayRiskClient.initialize();\n\n        return super.initialize(options);\n    }\n\n    execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const token = this._wepayRiskClient.getRiskToken();\n        const payloadWithToken = merge({}, payload, {\n            payment: {\n                paymentData: {\n                    deviceSessionId: token,\n                },\n            },\n        });\n\n        return super.execute(payloadWithToken, options);\n    }\n}\n","import { StandardError } from '../../common/error/errors';\n\nexport default class PaymentMethodDeclinedError extends StandardError {\n    constructor(message?: string) {\n        super(message || 'The selected payment method was declined. Please select another payment method.');\n\n        this.name = 'PaymentMethodDeclinedError';\n        this.type = 'payment_declined';\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    InvalidArgumentError,\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { ContentType, INTERNAL_USE_ONLY } from '../../../common/http-request';\nimport { OrderActionCreator, OrderRequestBody } from '../../../order';\nimport { OrderFinalizationNotRequiredError } from '../../../order/errors';\nimport { StoreCreditActionCreator } from '../../../store-credit';\nimport { PaymentMethodCancelledError, PaymentMethodDeclinedError, PaymentMethodInvalidError } from '../../errors';\nimport PaymentActionCreator from '../../payment-action-creator';\nimport PaymentMethod from '../../payment-method';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport { PaymentInitializeOptions, PaymentRequestOptions } from '../../payment-request-options';\nimport PaymentStrategy from '../payment-strategy';\n\nimport { Zip, ZipModalEvent } from './zip';\nimport ZipScriptLoader from './zip-script-loader';\n\nexport default class ZipPaymentStrategy implements PaymentStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _zipClient?: Zip;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentActionCreator: PaymentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _storeCreditActionCreator: StoreCreditActionCreator,\n        private _zipScriptLoader: ZipScriptLoader,\n        private _requestSender: RequestSender\n    ) { }\n\n    async initialize(options: PaymentInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const zip = await this._zipScriptLoader.load();\n        this._zipClient = zip;\n\n        return this._store.getState();\n    }\n\n    deinitialize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n        this._zipClient = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    async execute(payload: OrderRequestBody, options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        const { payment, ...order } = payload;\n        const { _zipClient: zipClient } = this;\n\n        if (!payment) {\n            throw new InvalidArgumentError('Unable to submit payment because \"payload.payment\" argument is not provided.');\n        }\n\n        if (!zipClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        await this._store.dispatch(this._orderActionCreator.submitOrder(order, options));\n\n        const { useStoreCredit } = payload;\n\n        if (useStoreCredit !== undefined) {\n            await this._store.dispatch(this._storeCreditActionCreator.applyStoreCredit(useStoreCredit));\n        }\n\n        const state = await this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(payment.methodId, options));\n\n        this._paymentMethod = state.paymentMethods.getPaymentMethod(payment.methodId);\n\n        if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const nonce = await new Promise<string | undefined>((resolve, reject) => {\n            zipClient.Checkout.init({\n                onComplete: async ({ checkoutId, state }) => {\n                    if (state === ZipModalEvent.CancelCheckout) {\n                        return reject(new PaymentMethodCancelledError());\n                    }\n\n                    if (state === ZipModalEvent.CheckoutReferred && checkoutId) {\n                        await this._prepareForReferredRegistration(payment.methodId, checkoutId);\n\n                        return resolve();\n                    }\n\n                    if (state === ZipModalEvent.CheckoutApproved && checkoutId) {\n                        return resolve(checkoutId);\n                    }\n\n                    if (state === ZipModalEvent.CheckoutDeclined) {\n                        return reject(new PaymentMethodDeclinedError('Unfortunately your application was declined. Please select another payment method.'));\n                    }\n\n                    reject(new PaymentMethodInvalidError());\n                },\n                onCheckout: openModal => {\n                    if (!this._paymentMethod || !this._paymentMethod.clientToken) {\n                        throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                    }\n\n                    openModal(JSON.parse(this._paymentMethod.clientToken));\n                },\n            });\n        });\n\n        if (nonce !== undefined) {\n            return this._store.dispatch(this._paymentActionCreator.submitPayment({\n                methodId: payment.methodId,\n                paymentData: { nonce },\n            }));\n        }\n\n        return this._store.getState();\n    }\n\n    finalize(options?: PaymentRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.reject(new OrderFinalizationNotRequiredError());\n    }\n\n    private _prepareForReferredRegistration(provider: string, externalId: string): Promise<Response> {\n        const url = `/api/storefront/payment/${provider}/save-external-id`;\n        const options = {\n            headers: {\n                Accept: ContentType.JsonV1,\n                'X-API-INTERNAL': INTERNAL_USE_ONLY,\n            },\n            body: {\n                externalId,\n                provider,\n            },\n        };\n\n        return this._requestSender.post(url, options);\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\nimport { Zip, ZipHostWindow } from '../zip/zip';\n\nexport default class ZipScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        public _window: ZipHostWindow = window\n    ) {}\n\n    load(): Promise<Zip> {\n        return this._scriptLoader\n            .loadScript(`//static.zipmoney.com.au/checkout/checkout-v1.min.js`)\n            .then(() => {\n                if (!this._window.Zip) {\n                    throw new StandardError();\n                }\n\n                return this._window.Zip;\n            });\n    }\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore, CheckoutValidator } from '../checkout';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { SpamProtectionActionCreator } from '../order/spam-protection';\nimport GoogleRecaptcha from '../order/spam-protection/google-recaptcha';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\nimport { StoreCreditActionCreator, StoreCreditRequestSender } from '../store-credit';\n\nimport PaymentActionCreator from './payment-action-creator';\nimport PaymentMethodActionCreator from './payment-method-action-creator';\nimport PaymentMethodRequestSender from './payment-method-request-sender';\nimport PaymentRequestSender from './payment-request-sender';\nimport PaymentRequestTransformer from './payment-request-transformer';\nimport PaymentStrategyActionCreator from './payment-strategy-action-creator';\nimport PaymentStrategyRegistry from './payment-strategy-registry';\nimport PaymentStrategyType from './payment-strategy-type';\nimport { AffirmPaymentStrategy, AffirmScriptLoader } from './strategies/affirm';\nimport { AfterpayPaymentStrategy, AfterpayScriptLoader } from './strategies/afterpay';\nimport { AmazonPayPaymentStrategy, AmazonPayScriptLoader } from './strategies/amazon-pay';\nimport {\n    createBraintreePaymentProcessor,\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeCreditCardPaymentStrategy,\n    BraintreePaypalPaymentStrategy,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    BraintreeVisaCheckoutPaymentStrategy,\n    VisaCheckoutScriptLoader\n} from './strategies/braintree';\nimport { ChasePayPaymentStrategy, ChasePayScriptLoader } from './strategies/chasepay';\nimport { ConvergePaymentStrategy } from './strategies/converge';\nimport { CreditCardPaymentStrategy } from './strategies/credit-card';\nimport {\n    CardinalClient,\n    CardinalScriptLoader,\n    CyberSourcePaymentStrategy\n} from './strategies/cybersource';\nimport {\n    createGooglePayPaymentProcessor,\n    GooglePayBraintreeInitializer,\n    GooglePayPaymentStrategy,\n    GooglePayStripeInitializer\n} from './strategies/googlepay';\nimport { KlarnaPaymentStrategy, KlarnaScriptLoader } from './strategies/klarna';\nimport { LegacyPaymentStrategy } from './strategies/legacy';\nimport { MasterpassPaymentStrategy, MasterpassScriptLoader } from './strategies/masterpass';\nimport { NoPaymentDataRequiredPaymentStrategy } from './strategies/no-payment';\nimport { OfflinePaymentStrategy } from './strategies/offline';\nimport { OffsitePaymentStrategy } from './strategies/offsite';\nimport { PaypalExpressPaymentStrategy, PaypalProPaymentStrategy, PaypalScriptLoader } from './strategies/paypal';\nimport { SagePayPaymentStrategy } from './strategies/sage-pay';\nimport { SquarePaymentStrategy, SquareScriptLoader } from './strategies/square';\nimport { StripeScriptLoader, StripeV3PaymentStrategy } from './strategies/stripev3';\nimport { WepayPaymentStrategy, WepayRiskClient } from './strategies/wepay';\nimport { ZipPaymentStrategy, ZipScriptLoader } from './strategies/zip';\n\nexport default function createPaymentStrategyRegistry(\n    store: CheckoutStore,\n    paymentClient: any,\n    requestSender: RequestSender,\n    spamProtection: GoogleRecaptcha\n) {\n    const registry = new PaymentStrategyRegistry(store, { defaultToken: PaymentStrategyType.CREDIT_CARD });\n    const scriptLoader = getScriptLoader();\n    const paymentRequestTransformer = new PaymentRequestTransformer();\n    const paymentRequestSender = new PaymentRequestSender(paymentClient);\n    const billingAddressActionCreator = new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender));\n    const braintreePaymentProcessor = createBraintreePaymentProcessor(scriptLoader);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutValidator = new CheckoutValidator(checkoutRequestSender);\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(spamProtection);\n    const orderActionCreator = new OrderActionCreator(new OrderRequestSender(requestSender), checkoutValidator, spamProtectionActionCreator);\n    const storeCreditActionCreator = new StoreCreditActionCreator(new StoreCreditRequestSender(requestSender));\n    const paymentActionCreator = new PaymentActionCreator(paymentRequestSender, orderActionCreator, paymentRequestTransformer);\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender));\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const checkoutActionCreator = new CheckoutActionCreator(checkoutRequestSender, configActionCreator);\n    const paymentStrategyActionCreator = new PaymentStrategyActionCreator(registry, orderActionCreator);\n    const formPoster = createFormPoster();\n\n    registry.register(PaymentStrategyType.AFFIRM, () =>\n        new AffirmPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            new AffirmScriptLoader()\n        )\n    );\n\n    registry.register(PaymentStrategyType.AFTERPAY, () =>\n        new AfterpayPaymentStrategy(\n            store,\n            checkoutValidator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            storeCreditActionCreator,\n            new AfterpayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.AMAZON, () =>\n        new AmazonPayPaymentStrategy(\n            store,\n            orderActionCreator,\n            billingAddressActionCreator,\n            remoteCheckoutActionCreator,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CREDIT_CARD, () =>\n        new CreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.CYBERSOURCE, () =>\n        new CyberSourcePaymentStrategy(\n            store,\n            paymentMethodActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            new CardinalClient(new CardinalScriptLoader(scriptLoader))\n        )\n    );\n\n    registry.register(PaymentStrategyType.KLARNA, () =>\n        new KlarnaPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new KlarnaScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.LEGACY, () =>\n        new LegacyPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFLINE, () =>\n        new OfflinePaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.OFFSITE, () =>\n        new OffsitePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL, () =>\n        new PaypalProPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.PAYPAL_EXPRESS_CREDIT, () =>\n        new PaypalExpressPaymentStrategy(\n            store,\n            orderActionCreator,\n            new PaypalScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.SAGE_PAY, () =>\n        new SagePayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n        )\n    );\n\n    registry.register(PaymentStrategyType.SQUARE, () =>\n        new SquarePaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new SquareScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.NO_PAYMENT_DATA_REQUIRED, () =>\n        new NoPaymentDataRequiredPaymentStrategy(\n            store,\n            orderActionCreator\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE, () =>\n        new BraintreeCreditCardPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_PAYPAL_CREDIT, () =>\n        new BraintreePaypalPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            braintreePaymentProcessor,\n            true\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_VISA_CHECKOUT, () =>\n        new BraintreeVisaCheckoutPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.CHASE_PAY, () =>\n        new ChasePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            requestSender,\n            new ChasePayScriptLoader(scriptLoader),\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.BRAINTREE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.WE_PAY, () =>\n        new WepayPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new WepayRiskClient(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.MASTERPASS, () =>\n        new MasterpassPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register(PaymentStrategyType.STRIPE_GOOGLE_PAY, () =>\n        new GooglePayPaymentStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            paymentStrategyActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            )\n        )\n    );\n\n    registry.register(PaymentStrategyType.ZIP, () =>\n        new ZipPaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            paymentMethodActionCreator,\n            storeCreditActionCreator,\n            new ZipScriptLoader(scriptLoader),\n            requestSender\n        )\n    );\n\n    registry.register(PaymentStrategyType.CONVERGE, () =>\n        new ConvergePaymentStrategy(\n            store,\n            orderActionCreator,\n            paymentActionCreator,\n            formPoster\n            )\n    );\n\n    registry.register(PaymentStrategyType.STRIPEV3, () =>\n        new StripeV3PaymentStrategy(\n            store,\n            paymentMethodActionCreator,\n            paymentActionCreator,\n            orderActionCreator,\n            new StripeScriptLoader(scriptLoader),\n            paymentRequestSender,\n            paymentRequestTransformer\n        )\n    );\n\n    return registry;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { Overlay } from '../../../common/overlay';\n\nimport BraintreePaymentProcessor from './braintree-payment-processor';\nimport BraintreeScriptLoader from './braintree-script-loader';\nimport BraintreeSDKCreator from './braintree-sdk-creator';\n\nexport default function createBraintreePaymentProcessor(scriptLoader: ScriptLoader) {\n    const braintreeScriptLoader = new BraintreeScriptLoader(scriptLoader);\n    const braintreeSDKCreator = new BraintreeSDKCreator(braintreeScriptLoader);\n    const overlay = new Overlay();\n\n    return new BraintreePaymentProcessor(braintreeSDKCreator, overlay);\n}\n","import { createAction, createDataStore, Action, DataStore, ReadableDataStore } from '@bigcommerce/data-store';\n\nenum ProjectionActionType {\n    Synchronize = 'SYNCHRONIZE',\n}\n\ninterface SynchronizeAction<TState> extends Action<TState> {\n    type: ProjectionActionType.Synchronize;\n    payload: TState;\n}\n\nexport interface DataStoreProjection<TTransformedState> extends ReadableDataStore<TTransformedState> {\n    notifyState(): void;\n}\n\nexport default function createDataStoreProjection<TState, TTransformedState = TState>(\n    store: DataStore<any, Action, TState>,\n    stateTransformer: (state: TState) => TTransformedState\n): DataStoreProjection<TTransformedState> {\n    const projection = createDataStore<TState | undefined, SynchronizeAction<TState>, TTransformedState>(\n        (state, action) => action.type === ProjectionActionType.Synchronize ?\n            action.payload :\n            state,\n        store.getState(),\n        { stateTransformer }\n    );\n\n    store.subscribe(state => {\n        projection.dispatch(createAction(ProjectionActionType.Synchronize, state) as SynchronizeAction<TState>);\n    }, { initial: false });\n\n    return projection;\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { Address } from '../../address';\nimport { InternalCheckoutSelectors, ReadableCheckoutStore } from '../../checkout';\nimport { addMinutes, isFuture } from '../../common/date-time';\nimport { MissingDataError, MissingDataErrorType } from '../../common/error/errors';\n\nimport { SessionContext, VaultAccessToken } from './instrument';\nimport { DeleteInstrumentAction, InstrumentActionType, LoadInstrumentsAction } from './instrument-actions';\nimport InstrumentRequestSender from './instrument-request-sender';\n\nexport default class InstrumentActionCreator {\n    constructor(\n        private _instrumentRequestSender: InstrumentRequestSender\n    ) {}\n\n    loadInstruments(): ThunkAction<LoadInstrumentsAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<LoadInstrumentsAction>) => {\n            observer.next(createAction(InstrumentActionType.LoadInstrumentsRequested));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n            const shippingAddress = this._getShippingAddress(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.loadInstruments({\n                            ...session,\n                            authToken: currentToken.vaultAccessToken,\n                        },\n                        shippingAddress\n                    )\n                        .then(({ body }) => {\n                            observer.next(createAction(\n                                InstrumentActionType.LoadInstrumentsSucceeded,\n                                body,\n                                currentToken\n                            ));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.LoadInstrumentsFailed, response));\n                });\n        });\n    }\n\n    deleteInstrument(instrumentId: string): ThunkAction<DeleteInstrumentAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<DeleteInstrumentAction>) => {\n            observer.next(createAction(InstrumentActionType.DeleteInstrumentRequested, undefined, { instrumentId }));\n\n            const session = this._getSessionContext(store);\n            const token = this._getCurrentAccessToken(store);\n\n            return this._getValidAccessToken(token)\n                .then(currentToken =>\n                    this._instrumentRequestSender.deleteInstrument({\n                        ...session,\n                        authToken: currentToken.vaultAccessToken,\n                    }, instrumentId)\n                        .then(({ body }) => {\n                            observer.next(createAction(InstrumentActionType.DeleteInstrumentSucceeded, body, {\n                                instrumentId,\n                                ...currentToken,\n                            }));\n                            observer.complete();\n                        })\n                )\n                .catch(response => {\n                    observer.error(createErrorAction(InstrumentActionType.DeleteInstrumentFailed, response, { instrumentId }));\n                });\n        });\n    }\n\n    private _isValidVaultAccessToken(token: VaultAccessToken): boolean {\n        if (!token || !token.vaultAccessToken) {\n            return false;\n        }\n\n        const expiryBuffer = 2;\n        const expiry = addMinutes(new Date(token.vaultAccessExpiry), expiryBuffer);\n\n        return isFuture(expiry);\n    }\n\n    private _getCurrentAccessToken(store: ReadableCheckoutStore): VaultAccessToken | undefined {\n        const { instruments } = store.getState();\n        const meta = instruments.getInstrumentsMeta();\n\n        if (!meta) {\n            return;\n        }\n\n        return {\n            vaultAccessToken: meta.vaultAccessToken,\n            vaultAccessExpiry: meta.vaultAccessExpiry,\n        };\n    }\n\n    private _getValidAccessToken(token?: VaultAccessToken): Promise<VaultAccessToken> {\n        return token && this._isValidVaultAccessToken(token) ?\n            Promise.resolve(token) :\n            this._instrumentRequestSender.getVaultAccessToken().then(({ body }) => body);\n    }\n\n    private _getShippingAddress(store: ReadableCheckoutStore): Address | undefined {\n        const state = store.getState();\n\n        return state.shippingAddress.getShippingAddress();\n    }\n\n    private _getSessionContext(store: ReadableCheckoutStore): SessionContext {\n        const state = store.getState();\n        const config = state.config.getStoreConfig();\n        const cart = state.cart.getCart();\n\n        if (!config) {\n            throw new MissingDataError(MissingDataErrorType.MissingCheckoutConfig);\n        }\n\n        if (!cart) {\n            throw new MissingDataError(MissingDataErrorType.MissingCart);\n        }\n\n        const { customerId } = cart;\n        const { storeId } = config.storeProfile;\n        const { code } = config.shopperCurrency.isTransactional ? config.shopperCurrency : config.currency;\n\n        return {\n            customerId,\n            storeId,\n            currencyCode: code,\n        };\n    }\n}\n","export default function addMinutes(date: Date, amount: number): Date {\n    const newDate = new Date(date.getTime());\n\n    newDate.setMinutes(date.getMinutes() + amount);\n\n    return newDate;\n}\n","export default function isFuture(date: Date): boolean {\n    return date.valueOf() > Date.now();\n}\n","import { Response } from '@bigcommerce/request-sender';\n\nimport PaymentResponse from '../payment-response';\n\nimport Instrument, { VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InstrumentErrorResponseBody,\n    InternalInstrument,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n    InternalVaultAccessTokenResponseBody,\n} from './instrument-response-body';\n\nexport default class InstrumentResponseTransformer {\n    transformResponse(\n        response: PaymentResponse<InternalInstrumentsResponseBody>\n    ): Response<InstrumentsResponseBody> {\n        const { body, ...payload } = this._transformResponse(response);\n\n        return {\n            ...payload,\n            body: {\n                vaultedInstruments: this._transformVaultedInstruments(body.vaulted_instruments),\n            },\n        };\n    }\n\n    transformErrorResponse(\n        response: PaymentResponse<InternalInstrumentErrorResponseBody>\n    ): Response<InstrumentErrorResponseBody> {\n        return this._transformResponse(response);\n    }\n\n    transformVaultAccessResponse(\n        response: Response<InternalVaultAccessTokenResponseBody>\n    ): Response<VaultAccessToken> {\n        return {\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        };\n    }\n\n    private _transformVaultedInstruments(vaultedInstruments: InternalInstrument[] = []): Instrument[] {\n        return vaultedInstruments.map(instrument => ({\n            bigpayToken: instrument.bigpay_token,\n            defaultInstrument: instrument.default_instrument,\n            provider: instrument.provider,\n            iin: instrument.iin,\n            last4: instrument.last_4,\n            expiryMonth: instrument.expiry_month,\n            expiryYear: instrument.expiry_year,\n            brand: instrument.brand,\n            trustedShippingAddress: instrument.trusted_shipping_address,\n        }));\n    }\n\n    private _transformResponse<T>(response: PaymentResponse<T>): Response<T> {\n        const { data: body, ...payload } = response;\n\n        return {\n            ...payload,\n            body,\n        };\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { mapToInternalAddress, Address } from '../../address';\nimport { RequestOptions } from '../../common/http-request';\nimport PaymentResponse from '../payment-response';\n\nimport { InstrumentRequestContext, VaultAccessToken } from './instrument';\nimport {\n    InstrumentsResponseBody,\n    InternalInstrumentsResponseBody,\n    InternalInstrumentErrorResponseBody,\n} from './instrument-response-body';\nimport InstrumentResponseTransformer from './instrument-response-transformer';\n\nexport default class InstrumentRequestSender {\n    private _transformer: InstrumentResponseTransformer;\n\n    constructor(\n        private _client: any,\n        private _requestSender: RequestSender\n    ) {\n        this._transformer = new InstrumentResponseTransformer();\n    }\n\n    getVaultAccessToken(\n        { timeout }: RequestOptions = {}\n    ): Promise<Response<VaultAccessToken>> {\n        const url = '/internalapi/v1/checkout/payments/vault-access-token';\n\n        return this._requestSender.get(url, { timeout }).then(response => ({\n            ...response,\n            body: {\n                vaultAccessToken: response.body.data.token,\n                vaultAccessExpiry: response.body.data.expires_at,\n            },\n        }));\n    }\n\n    loadInstruments(\n        requestContext: InstrumentRequestContext,\n        shippingAddress?: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return (shippingAddress) ?\n            this._loadInstrumentsWithAddress(requestContext, shippingAddress) :\n            this._loadInstruments(requestContext);\n    }\n\n    deleteInstrument(\n        requestContext: InstrumentRequestContext,\n        instrumentId: string\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            instrumentId,\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.deleteShopperInstrument(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) =>  errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstruments(\n        requestContext: InstrumentRequestContext\n    ): Promise<Response<InstrumentsResponseBody>> {\n        return new Promise((resolve, reject) => {\n            this._client.loadInstruments(\n                requestContext, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n\n    private _loadInstrumentsWithAddress(\n        requestContext: InstrumentRequestContext,\n        shippingAddress: Address\n    ): Promise<Response<InstrumentsResponseBody>> {\n        const payload = {\n            ...requestContext,\n            shippingAddress: mapToInternalAddress(shippingAddress),\n        };\n\n        return new Promise((resolve, reject) => {\n            this._client.loadInstrumentsWithAddress(\n                payload, (\n                    errorResponse: PaymentResponse<InternalInstrumentErrorResponseBody>,\n                    response: PaymentResponse<InternalInstrumentsResponseBody>\n                ) => errorResponse ?\n                    reject(this._transformer.transformErrorResponse(errorResponse)) :\n                    resolve(this._transformer.transformResponse(response))\n            );\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { RequestOptions } from '../common/http-request';\n\nimport { LoadShippingCountriesAction, ShippingCountryActionType } from './shipping-country-actions';\nimport ShippingCountryRequestSender from './shipping-country-request-sender';\n\nexport default class ShippingCountryActionCreator {\n    constructor(\n        private _shippingCountryRequestSender: ShippingCountryRequestSender\n    ) {}\n\n    loadCountries(options?: RequestOptions): Observable<LoadShippingCountriesAction> {\n        return Observable.create((observer: Observer<LoadShippingCountriesAction>) => {\n            observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesRequested));\n\n            this._shippingCountryRequestSender.loadCountries(options)\n                .then(response => {\n                    observer.next(createAction(ShippingCountryActionType.LoadShippingCountriesSucceeded, response.body.data));\n                    observer.complete();\n                })\n                .catch(response => {\n                    observer.error(createErrorAction(ShippingCountryActionType.LoadShippingCountriesFailed, response));\n                });\n        });\n    }\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { RequestOptions } from '../common/http-request';\nimport { CountryResponseBody } from '../geography';\n\nexport default class ShippingCountryRequestSender {\n    constructor(\n        private _requestSender: RequestSender,\n        private _config: { locale?: string }\n    ) {}\n\n    loadCountries({ timeout }: RequestOptions = {}): Promise<Response<CountryResponseBody>> {\n        const url = '/internalapi/v1/shipping/countries';\n        const headers = {\n            'Accept-Language': this._config.locale,\n        };\n\n        return this._requestSender.get(url, { headers, timeout });\n    }\n}\n","import { createAction, createErrorAction, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable, Observer } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { InternalCheckoutSelectors } from '../checkout';\nimport { Registry } from '../common/registry';\n\nimport { ShippingInitializeOptions, ShippingRequestOptions } from './shipping-request-options';\nimport {\n    ShippingStrategyActionType,\n    ShippingStrategyDeinitializeAction,\n    ShippingStrategyInitializeAction,\n    ShippingStrategySelectOptionAction,\n    ShippingStrategyUpdateAddressAction,\n} from './shipping-strategy-actions';\nimport { ShippingStrategy } from './strategies';\n\nexport default class ShippingStrategyActionCreator {\n    constructor(\n        private _strategyRegistry: Registry<ShippingStrategy>\n    ) {}\n\n    updateAddress(address: Partial<AddressRequestBody>, options?: ShippingRequestOptions): ThunkAction<ShippingStrategyUpdateAddressAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyUpdateAddressAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .updateAddress(address, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId }));\n                });\n        });\n    }\n\n    selectOption(shippingOptionId: string, options?: ShippingRequestOptions): ThunkAction<ShippingStrategySelectOptionAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategySelectOptionAction>) => {\n            const payment = store.getState().payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            observer.next(createAction(ShippingStrategyActionType.SelectOptionRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .selectOption(shippingOptionId, { ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.SelectOptionSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.SelectOptionFailed, error, { methodId }));\n                });\n        });\n    }\n\n    initialize(options?: ShippingInitializeOptions): ThunkAction<ShippingStrategyInitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyInitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n            const mergedOptions = { ...options, methodId };\n\n            if (methodId && state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.InitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .initialize(mergedOptions)\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.InitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.InitializeFailed, error, { methodId }));\n                });\n        });\n    }\n\n    deinitialize(options?: ShippingRequestOptions): ThunkAction<ShippingStrategyDeinitializeAction, InternalCheckoutSelectors> {\n        return store => Observable.create((observer: Observer<ShippingStrategyDeinitializeAction>) => {\n            const state = store.getState();\n            const payment = state.payment.getPaymentId();\n            const methodId = options && options.methodId || payment && payment.providerId;\n\n            if (methodId && !state.shippingStrategies.isInitialized(methodId)) {\n                return observer.complete();\n            }\n\n            observer.next(createAction(ShippingStrategyActionType.DeinitializeRequested, undefined, { methodId }));\n\n            this._strategyRegistry.get(methodId)\n                .deinitialize({ ...options, methodId })\n                .then(() => {\n                    observer.next(createAction(ShippingStrategyActionType.DeinitializeSucceeded, undefined, { methodId }));\n                    observer.complete();\n                })\n                .catch(error => {\n                    observer.error(createErrorAction(ShippingStrategyActionType.DeinitializeFailed, error, { methodId }));\n                });\n        });\n    }\n}\n","import { createAction, createErrorAction } from '@bigcommerce/data-store';\n\nimport { isInternalAddressEqual, mapFromInternalAddress, AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport { InvalidArgumentError, MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../../../common/error/errors';\nimport { PaymentMethod, PaymentMethodActionCreator } from '../../../payment';\nimport { AmazonPayAddressBook, AmazonPayOrderReference, AmazonPayScriptLoader, AmazonPayWindow } from '../../../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator } from '../../../remote-checkout';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingInitializeOptions, ShippingRequestOptions } from '../../shipping-request-options';\nimport { ShippingStrategyActionType } from '../../shipping-strategy-actions';\nimport ShippingStrategy from '../shipping-strategy';\n\nimport AmazonPayShippingInitializeOptions from './amazon-pay-shipping-initialize-options';\n\nexport default class AmazonPayShippingStrategy implements ShippingStrategy {\n    private _paymentMethod?: PaymentMethod;\n    private _window: AmazonPayWindow;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _remoteCheckoutActionCreator: RemoteCheckoutActionCreator,\n        private _scriptLoader: AmazonPayScriptLoader\n    ) {\n        this._window = window;\n    }\n\n    initialize(options: ShippingInitializeOptions): Promise<InternalCheckoutSelectors> {\n        const { amazon: amazonOptions, methodId } = options;\n\n        if (!amazonOptions || !methodId) {\n            throw new InvalidArgumentError('Unable to proceed because \"options.amazon\" argument is not provided.');\n        }\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => new Promise((resolve, reject) => {\n                this._paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n\n                if (!this._paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                const onReady = () => {\n                    this._createAddressBook(amazonOptions)\n                        .then(resolve)\n                        .catch(reject);\n                };\n\n                this._scriptLoader.loadWidget(this._paymentMethod, onReady)\n                    .catch(reject);\n            }))\n            .then(() => this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        this._paymentMethod = undefined;\n\n        return Promise.resolve(this._store.getState());\n    }\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    private _createAddressBook(options: AmazonPayShippingInitializeOptions): Promise<AmazonPayAddressBook> {\n        return new Promise((resolve, reject) => {\n            const { container, onAddressSelect = () => {}, onError = () => {}, onReady = () => {} } = options;\n            const merchantId = this._paymentMethod && this._paymentMethod.config.merchantId;\n\n            if (!document.getElementById(container)) {\n                return reject(new InvalidArgumentError('Unable to create AmazonPay AddressBook widget without valid container ID.'));\n            }\n\n            if (!this._window.OffAmazonPayments) {\n                return reject(new NotInitializedError(NotInitializedErrorType.ShippingNotInitialized));\n            }\n\n            if (!merchantId) {\n                return reject(new MissingDataError(MissingDataErrorType.MissingPaymentMethod));\n            }\n\n            const widget = new this._window.OffAmazonPayments.Widgets.AddressBook({\n                design: {\n                    designMode: 'responsive',\n                },\n                scope: 'payments:billing_address payments:shipping_address payments:widget profile',\n                sellerId: merchantId,\n                onAddressSelect: orderReference => {\n                    this._synchronizeShippingAddress()\n                        .then(() => onAddressSelect(orderReference))\n                        .catch(onError);\n                },\n                onError: error => {\n                    reject(error);\n                    onError(error);\n                },\n                onReady: orderReference => {\n                    this._updateOrderReference(orderReference)\n                        .then(() => {\n                            resolve();\n                            onReady(orderReference);\n                        })\n                        .catch(onError);\n                },\n            });\n\n            widget.bind(container);\n\n            return widget;\n        });\n    }\n\n    private _synchronizeShippingAddress(): Promise<InternalCheckoutSelectors> {\n        const methodId = this._paymentMethod && this._paymentMethod.id;\n        const amazon = this._store.getState().remoteCheckout.getCheckout('amazon');\n        const referenceId = amazon ? amazon.referenceId : undefined;\n\n        if (!methodId || !referenceId) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._store.dispatch(\n            createAction(ShippingStrategyActionType.UpdateAddressRequested, undefined, { methodId })\n        )\n            .then(() => this._store.dispatch(\n                this._remoteCheckoutActionCreator.initializeShipping(methodId, { referenceId })\n            ))\n            .then(state => {\n                const amazon = state.remoteCheckout.getCheckout('amazon');\n                const remoteAddress = amazon && amazon.shipping && amazon.shipping.address;\n                const address = state.shippingAddress.getShippingAddress();\n\n                if (remoteAddress === false) {\n                    throw new RemoteCheckoutSynchronizationError();\n                }\n\n                if (!remoteAddress || isInternalAddressEqual(remoteAddress, address || {})) {\n                    return this._store.getState();\n                }\n\n                return this._store.dispatch(\n                    this._consignmentActionCreator.updateAddress(mapFromInternalAddress(remoteAddress))\n                );\n            })\n            .then(() => this._store.dispatch(\n                createAction(ShippingStrategyActionType.UpdateAddressSucceeded, undefined, { methodId })\n            ))\n            .catch(error => this._store.dispatch(\n                createErrorAction(ShippingStrategyActionType.UpdateAddressFailed, error, { methodId })\n            ));\n    }\n\n    private _updateOrderReference(orderReference: AmazonPayOrderReference): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._remoteCheckoutActionCreator.updateCheckout('amazon', {\n                referenceId: orderReference.getAmazonOrderReferenceId(),\n            })\n        );\n    }\n}\n","import { AddressRequestBody } from '../../../address';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport ConsignmentActionCreator from '../../consignment-action-creator';\nimport { ShippingRequestOptions } from '../../shipping-request-options';\nimport ShippingStrategy from '../shipping-strategy';\n\nexport default class DefaultShippingStrategy implements ShippingStrategy {\n    constructor(\n        private _store: CheckoutStore,\n        private _consignmentActionCreator: ConsignmentActionCreator\n    ) {}\n\n    updateAddress(address: AddressRequestBody, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.updateAddress(address, options)\n        );\n    }\n\n    selectOption(optionId: string, options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consignmentActionCreator.selectShippingOption(optionId, options)\n        );\n    }\n\n    initialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n\n    deinitialize(options?: ShippingRequestOptions): Promise<InternalCheckoutSelectors> {\n        return Promise.resolve(this._store.getState());\n    }\n}\n","import { cloneDeep, memoize } from 'lodash';\n\nconst memoizedCloneDeep = memoize(cloneDeep);\n\n// Use WeakMap as the MapCache, this allows for better garbage collection\n// There's a deprecated `clear` method in the lodash implementation\n// of MapCache, hence the `any`\nmemoizedCloneDeep.cache = new WeakMap() as any;\n\n/**\n * Clone the return value of a function. If the result is the same as previous\n * calls, return the previous clone instead of cloning it again.\n */\nexport default function cloneResult<T extends Func>(fn: T): T {\n    return ((...args: any[]) => {\n        const result = fn(...args);\n\n        return result && typeof result === 'object'\n            ? memoizedCloneDeep(result)\n            : result;\n    }) as T;\n}\n\nexport type Func = (...args: any[]) => any;\n","import { createSelectorCreator, defaultMemoize } from 'reselect';\nimport * as shallowEqual from 'shallowequal';\n\nimport withMemoizedCombiner from './with-memoized-combiner';\n\nconst createShallowEqualSelector = createSelectorCreator(\n    defaultMemoize,\n    (a: any, b: any) => shallowEqual(a, b)\n);\n\nexport default withMemoizedCombiner(createShallowEqualSelector);\n","import {\n    createCheckoutStoreErrorSelectorFactory,\n    createCheckoutStoreSelectorFactory,\n    createCheckoutStoreStatusSelectorFactory,\n    CheckoutSelectors,\n    InternalCheckoutSelectors,\n} from '../checkout';\n\nexport type CheckoutSelectorsFactory = (selectors: InternalCheckoutSelectors) => CheckoutSelectors;\n\nexport function createCheckoutSelectorsFactory(): CheckoutSelectorsFactory {\n    const createCheckoutStoreSelector = createCheckoutStoreSelectorFactory();\n    const createCheckoutStoreErrorSelector = createCheckoutStoreErrorSelectorFactory();\n    const createCheckoutStoreStatusSelector = createCheckoutStoreStatusSelectorFactory();\n\n    return (selectors: InternalCheckoutSelectors) => {\n        const data = createCheckoutStoreSelector(selectors);\n        const errors = createCheckoutStoreErrorSelector(selectors);\n        const statuses = createCheckoutStoreStatusSelector(selectors);\n\n        return {\n            data,\n            errors,\n            statuses,\n        };\n    };\n}\n\nexport default function createCheckoutSelectors(selectors: InternalCheckoutSelectors): CheckoutSelectors {\n    return createCheckoutSelectorsFactory()(selectors);\n}\n","import { Address } from '../address';\nimport { BillingAddress } from '../billing';\nimport { Cart } from '../cart';\nimport { createSelector } from '../common/selector';\nimport { cloneResult as clone, memoizeOne } from '../common/utility';\nimport { StoreConfig } from '../config/config';\nimport { Coupon, GiftCertificate } from '../coupon';\nimport { Customer } from '../customer';\nimport { FormField } from '../form';\nimport { Country } from '../geography';\nimport { Order } from '../order';\nimport { PaymentMethod } from '../payment';\nimport { Instrument } from '../payment/instrument';\nimport { Consignment, ShippingOption } from '../shipping';\n\nimport Checkout from './checkout';\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the state of the current checkout.\n *\n * This object has a set of methods that allow you to get a specific piece of\n * checkout information, such as shipping and billing details.\n */\nexport default interface CheckoutStoreSelector {\n    /**\n     * Gets the current checkout.\n     *\n     * @returns The current checkout if it is loaded, otherwise undefined.\n     */\n    getCheckout(): Checkout | undefined;\n\n    /**\n     * Gets the current order.\n     *\n     * @returns The current order if it is loaded, otherwise undefined.\n     */\n    getOrder(): Order | undefined;\n\n    /**\n     * Gets the checkout configuration of a store.\n     *\n     * @returns The configuration object if it is loaded, otherwise undefined.\n     */\n    getConfig(): StoreConfig | undefined;\n\n    /**\n     * Gets the shipping address of the current checkout.\n     *\n     * If the address is partially complete, it may not have shipping options\n     * associated with it.\n     *\n     * @returns The shipping address object if it is loaded, otherwise\n     * undefined.\n     */\n    getShippingAddress(): Address | undefined;\n\n    /**\n     * Gets a list of shipping options available for the shipping address.\n     *\n     * If there is no shipping address assigned to the current checkout, the\n     * list of shipping options will be empty.\n     *\n     * @returns The list of shipping options if any, otherwise undefined.\n     */\n    getShippingOptions(): ShippingOption[] | undefined;\n\n    /**\n     * Gets a list of consignments.\n     *\n     * If there are no consignments created for to the current checkout, the\n     * list will be empty.\n     *\n     * @returns The list of consignments if any, otherwise undefined.\n     */\n    getConsignments(): Consignment[] | undefined;\n\n    /**\n     * Gets the selected shipping option for the current checkout.\n     *\n     * @returns The shipping option object if there is a selected option,\n     * otherwise undefined.\n     */\n    getSelectedShippingOption(): ShippingOption | undefined;\n\n    /**\n     * Gets a list of countries available for shipping.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getShippingCountries(): Country[] | undefined;\n\n    /**\n     * Gets the billing address of an order.\n     *\n     * @returns The billing address object if it is loaded, otherwise undefined.\n     */\n    getBillingAddress(): BillingAddress | undefined;\n\n    /**\n     * Gets a list of countries available for billing.\n     *\n     * @returns The list of countries if it is loaded, otherwise undefined.\n     */\n    getBillingCountries(): Country[] | undefined;\n\n    /**\n     * Gets a list of payment methods available for checkout.\n     *\n     * @returns The list of payment methods if it is loaded, otherwise undefined.\n     */\n    getPaymentMethods(): PaymentMethod[] | undefined;\n\n    /**\n     * Gets a payment method by an id.\n     *\n     * The method returns undefined if unable to find a payment method with the\n     * specified id, either because it is not available for the customer, or it\n     * is not loaded.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns The payment method object if loaded and available, otherwise,\n     * undefined.\n     */\n    getPaymentMethod(methodId: string, gatewayId?: string): PaymentMethod | undefined;\n\n    /**\n     * Gets the payment method that is selected for checkout.\n     *\n     * @returns The payment method object if there is a selected method;\n     * undefined if otherwise.\n     */\n    getSelectedPaymentMethod(): PaymentMethod | undefined;\n\n    /**\n     * Gets the current cart.\n     *\n     * @returns The current cart object if it is loaded, otherwise undefined.\n     */\n    getCart(): Cart | undefined;\n\n    /**\n     * Gets a list of coupons that are applied to the current checkout.\n     *\n     * @returns The list of applied coupons if there is any, otherwise undefined.\n     */\n    getCoupons(): Coupon[] | undefined;\n\n    /**\n     * Gets a list of gift certificates that are applied to the current checkout.\n     *\n     * @returns The list of applied gift certificates if there is any, otherwise undefined.\n     */\n    getGiftCertificates(): GiftCertificate[] | undefined;\n\n    /**\n     * Gets the current customer.\n     *\n     * @returns The current customer object if it is loaded, otherwise\n     * undefined.\n     */\n    getCustomer(): Customer | undefined;\n\n    /**\n     * Checks if payment data is required or not.\n     *\n     * If payment data is required, customers should be prompted to enter their\n     * payment details.\n     *\n     * ```js\n     * if (state.checkout.isPaymentDataRequired()) {\n     *     // Render payment form\n     * } else {\n     *     // Render \"Payment is not required for this order\" message\n     * }\n     * ```\n     *\n     * @param useStoreCredit - If true, check whether payment data is required\n     * with store credit applied; otherwise, check without store credit.\n     * @returns True if payment data is required, otherwise false.\n     */\n    isPaymentDataRequired(useStoreCredit?: boolean): boolean;\n\n    /**\n     * Checks if payment data is submitted or not.\n     *\n     * If payment data is already submitted using a payment method, customers\n     * should not be prompted to enter their payment details again.\n     *\n     * @param methodId - The identifier of the payment method.\n     * @param gatewayId - The identifier of a payment provider providing the\n     * payment method.\n     * @returns True if payment data is submitted, otherwise false.\n     */\n    isPaymentDataSubmitted(methodId: string, gatewayId?: string): boolean;\n\n    /**\n     * Gets a list of payment instruments associated with the current customer.\n     *\n     * @returns The list of payment instruments if it is loaded, otherwise undefined.\n     */\n    getInstruments(): Instrument[] | undefined;\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their billing address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of billing address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getBillingAddressFields(countryCode: string): FormField[];\n\n    /**\n     * Gets a set of form fields that should be presented to customers in order\n     * to capture their shipping address for a specific country.\n     *\n     * @param countryCode - A 2-letter country code (ISO 3166-1 alpha-2).\n     * @returns The set of shipping address form fields if it is loaded,\n     * otherwise undefined.\n     */\n    getShippingAddressFields(countryCode: string): FormField[];\n}\n\nexport type CheckoutStoreSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreSelector;\n\nexport function createCheckoutStoreSelectorFactory(): CheckoutStoreSelectorFactory {\n    const getCheckout = createSelector(\n        ({ checkout }: InternalCheckoutSelectors) => checkout.getCheckout,\n        getCheckout => clone(getCheckout)\n    );\n\n    const getOrder = createSelector(\n        ({ order }: InternalCheckoutSelectors) => order.getOrder,\n        getOrder => clone(getOrder)\n    );\n\n    const getConfig = createSelector(\n        ({ config }: InternalCheckoutSelectors) => config.getStoreConfig,\n        getStoreConfig => clone(getStoreConfig)\n    );\n\n    const getShippingAddress = createSelector(\n        ({ shippingAddress }: InternalCheckoutSelectors) => shippingAddress.getShippingAddress,\n        ({ config }: InternalCheckoutSelectors) => config.getContextConfig,\n        (getShippingAddress, getContextConfig) => clone(() => {\n            const shippingAddress = getShippingAddress();\n            const context = getContextConfig();\n\n            if (!shippingAddress) {\n                if (!context || !context.geoCountryCode) {\n                    return;\n                }\n\n                return {\n                    firstName: '',\n                    lastName: '',\n                    company: '',\n                    address1: '',\n                    address2: '',\n                    city: '',\n                    stateOrProvince: '',\n                    stateOrProvinceCode: '',\n                    postalCode: '',\n                    country: '',\n                    phone: '',\n                    customFields: [],\n                    countryCode: context.geoCountryCode,\n                };\n            }\n\n            return shippingAddress;\n        })\n    );\n\n    const getShippingOptions = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(() => {\n            const consignments = getConsignments();\n\n            if (consignments && consignments.length) {\n                return consignments[0].availableShippingOptions;\n            }\n        })\n    );\n\n    const getConsignments = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(getConsignments)\n    );\n\n    const getSelectedShippingOption = createSelector(\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getConsignments,\n        getConsignments => clone(() => {\n            const consignments = getConsignments();\n\n            if (!consignments || !consignments.length) {\n                return;\n            }\n\n            return consignments[0].selectedShippingOption;\n        })\n    );\n\n    const getShippingCountries = createSelector(\n        ({ shippingCountries }: InternalCheckoutSelectors) => shippingCountries.getShippingCountries,\n        getShippingCountries => clone(getShippingCountries)\n    );\n\n    const getBillingAddress = createSelector(\n        ({ billingAddress }: InternalCheckoutSelectors) => billingAddress.getBillingAddress,\n        getBillingAddress => clone(getBillingAddress)\n    );\n\n    const getBillingCountries = createSelector(\n        ({ countries }: InternalCheckoutSelectors) => countries.getCountries,\n        getCountries => clone(getCountries)\n    );\n\n    const getPaymentMethods = createSelector(\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethods,\n        getPaymentMethods => clone(getPaymentMethods)\n    );\n\n    const getPaymentMethod = createSelector(\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        getPaymentMethod => clone(getPaymentMethod)\n    );\n\n    const getSelectedPaymentMethod = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.getPaymentId,\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        (getPaymentId, getPaymentMethod) => clone(() => {\n            const payment = getPaymentId();\n\n            return payment && getPaymentMethod(payment.providerId, payment.gatewayId);\n        })\n    );\n\n    const getCart = createSelector(\n        ({ cart }: InternalCheckoutSelectors) => cart.getCart,\n        getCart => clone(getCart)\n    );\n\n    const getCoupons = createSelector(\n        ({ coupons }: InternalCheckoutSelectors) => coupons.getCoupons,\n        getCoupons => clone(getCoupons)\n    );\n\n    const getGiftCertificates = createSelector(\n        ({ giftCertificates }: InternalCheckoutSelectors) => giftCertificates.getGiftCertificates,\n        getGiftCertificates => clone(getGiftCertificates)\n    );\n\n    const getCustomer = createSelector(\n        ({ customer }: InternalCheckoutSelectors) => customer.getCustomer,\n        getCustomer => clone(getCustomer)\n    );\n\n    const isPaymentDataRequired = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.isPaymentDataRequired,\n        isPaymentDataRequired => clone(isPaymentDataRequired)\n    );\n\n    const isPaymentDataSubmitted = createSelector(\n        ({ payment }: InternalCheckoutSelectors) => payment.isPaymentDataSubmitted,\n        ({ paymentMethods }: InternalCheckoutSelectors) => paymentMethods.getPaymentMethod,\n        (isPaymentDataSubmitted, getPaymentMethod) => clone((methodId: string, gatewayId?: string) => {\n            return isPaymentDataSubmitted(getPaymentMethod(methodId, gatewayId));\n        })\n    );\n\n    const getInstruments = createSelector(\n        ({ instruments }: InternalCheckoutSelectors) => instruments.getInstruments,\n        getInstruments => clone(getInstruments)\n    );\n\n    const getBillingAddressFields = createSelector(\n        ({ form }: InternalCheckoutSelectors) => form.getBillingAddressFields,\n        ({ countries }: InternalCheckoutSelectors) => countries.getCountries,\n        (getBillingAddressFields, getCountries) => clone((countryCode: string) => {\n            return getBillingAddressFields(getCountries(), countryCode);\n        })\n    );\n\n    const getShippingAddressFields = createSelector(\n        ({ form }: InternalCheckoutSelectors) => form.getShippingAddressFields,\n        ({ shippingCountries }: InternalCheckoutSelectors) => shippingCountries.getShippingCountries,\n        (getShippingAddressFields, getShippingCountries) => clone((countryCode: string) => {\n            return getShippingAddressFields(getShippingCountries(), countryCode);\n        })\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreSelector => {\n        return {\n            getCheckout: getCheckout(state),\n            getOrder: getOrder(state),\n            getConfig: getConfig(state),\n            getShippingAddress: getShippingAddress(state),\n            getShippingOptions: getShippingOptions(state),\n            getConsignments: getConsignments(state),\n            getSelectedShippingOption: getSelectedShippingOption(state),\n            getShippingCountries: getShippingCountries(state),\n            getBillingAddress: getBillingAddress(state),\n            getBillingCountries: getBillingCountries(state),\n            getPaymentMethods: getPaymentMethods(state),\n            getPaymentMethod: getPaymentMethod(state),\n            getSelectedPaymentMethod: getSelectedPaymentMethod(state),\n            getCart: getCart(state),\n            getCoupons: getCoupons(state),\n            getGiftCertificates: getGiftCertificates(state),\n            getCustomer: getCustomer(state),\n            isPaymentDataRequired: isPaymentDataRequired(state),\n            isPaymentDataSubmitted: isPaymentDataSubmitted(state),\n            getInstruments: getInstruments(state),\n            getBillingAddressFields: getBillingAddressFields(state),\n            getShippingAddressFields: getShippingAddressFields(state),\n        };\n    });\n}\n","import { RequestError } from '../common/error/errors';\nimport { createSelector, createShallowEqualSelector } from '../common/selector';\nimport { Omit } from '../common/types';\nimport { memoizeOne } from '../common/utility';\n\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for getting the error of any asynchronous checkout action, if\n * there is any.\n *\n * This object has a set of getters that would return an error if an action is\n * not executed successfully. For example, if you are unable to submit an order,\n * you can use this object to retrieve the reason for the failure.\n */\nexport default interface CheckoutStoreErrorSelector {\n    getError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current checkout.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCheckoutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update the current checkout.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateCheckoutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to submit the current order.\n     *\n     * @returns The error object if unable to submit, otherwise undefined.\n     */\n    getSubmitOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to finalize the current order.\n     *\n     * @returns The error object if unable to finalize, otherwise undefined.\n     */\n    getFinalizeOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current order.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadOrderError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the current cart.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadCartError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load billing countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadBillingCountriesError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load shipping countries.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingCountriesError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load payment methods.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to load a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to load.\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadPaymentMethodError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize a specific payment method.\n     *\n     * @param methodId - The identifier of the payment method to initialize.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializePaymentError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to sign in.\n     *\n     * @returns The error object if unable to sign in, otherwise undefined.\n     */\n    getSignInError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to sign out.\n     *\n     * @returns The error object if unable to sign out, otherwise undefined.\n     */\n    getSignOutError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize the customer step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeCustomerError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to load shipping options.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadShippingOptionsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to select a shipping option.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to select, otherwise undefined.\n     */\n    getSelectShippingOptionError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to continue as guest.\n     *\n     * @returns The error object if unable to continue, otherwise undefined.\n     */\n    getContinueAsGuestError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update billing address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateBillingAddressError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to update shipping address.\n     *\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateShippingAddressError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to delete a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteConsignmentError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to update a consignment.\n     *\n     * A consignment ID should be provided when checking for an error for a\n     * specific consignment, otherwise it will check for all available consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns The error object if unable to update, otherwise undefined.\n     */\n    getUpdateConsignmentError(consignmentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to create consignments.\n     *\n     * @returns The error object if unable to create, otherwise undefined.\n     */\n    getCreateConsignmentsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to initialize the shipping step of a checkout\n     * process.\n     *\n     * @param methodId - The identifer of the initialization method to execute.\n     * @returns The error object if unable to initialize, otherwise undefined.\n     */\n    getInitializeShippingError(methodId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to apply store credit.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyStoreCreditError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to apply a coupon code.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyCouponError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to remove a coupon code.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveCouponError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to apply a gift certificate.\n     *\n     * @returns The error object if unable to apply, otherwise undefined.\n     */\n    getApplyGiftCertificateError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to remove a gift certificate.\n     *\n     * @returns The error object if unable to remove, otherwise undefined.\n     */\n    getRemoveGiftCertificateError(): RequestError | undefined;\n\n    /**\n     * Returns an error if unable to load payment instruments.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadInstrumentsError(): Error | undefined;\n\n    /**\n     * Returns an error if unable to delete a payment instrument.\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns The error object if unable to delete, otherwise undefined.\n     */\n    getDeleteInstrumentError(instrumentId?: string): Error | undefined;\n\n    /**\n     * Returns an error if unable to load the checkout configuration of a store.\n     *\n     * @returns The error object if unable to load, otherwise undefined.\n     */\n    getLoadConfigError(): Error | undefined;\n}\n\nexport type CheckoutStoreErrorSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreErrorSelector;\n\nexport function createCheckoutStoreErrorSelectorFactory(): CheckoutStoreErrorSelectorFactory {\n    const getError = createShallowEqualSelector(\n        (selector: Omit<CheckoutStoreErrorSelector, 'getError'>) => selector,\n        selector => () => {\n            for (const key of Object.keys(selector) as Array<keyof Omit<CheckoutStoreErrorSelector, 'getError'>>) {\n                const error = selector[key]();\n\n                if (error) {\n                    return error;\n                }\n            }\n        }\n    );\n\n    const getSelectShippingOptionError = createSelector(\n        ({ shippingStrategies }: InternalCheckoutSelectors) => shippingStrategies.getSelectOptionError,\n        ({ consignments }: InternalCheckoutSelectors) => consignments.getUpdateShippingOptionError,\n        (getSelectOptionError, getUpdateShippingOptionError) => (consignmentId?: string) => {\n            return (\n                getSelectOptionError() ||\n                getUpdateShippingOptionError(consignmentId)\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreErrorSelector => {\n        const selector = {\n            getLoadCheckoutError: state.checkout.getLoadError,\n            getUpdateCheckoutError: state.checkout.getUpdateError,\n            getSubmitOrderError: state.paymentStrategies.getExecuteError,\n            getFinalizeOrderError: state.paymentStrategies.getFinalizeError,\n            getLoadOrderError: state.order.getLoadError,\n            getLoadCartError: state.cart.getLoadError,\n            getLoadBillingCountriesError: state.countries.getLoadError,\n            getLoadShippingCountriesError: state.shippingCountries.getLoadError,\n            getLoadPaymentMethodsError: state.paymentMethods.getLoadError,\n            getLoadPaymentMethodError: state.paymentMethods.getLoadMethodError,\n            getInitializePaymentError: state.paymentStrategies.getInitializeError,\n            getSignInError: state.customerStrategies.getSignInError,\n            getSignOutError: state.customerStrategies.getSignOutError,\n            getInitializeCustomerError: state.customerStrategies.getInitializeError,\n            getLoadShippingOptionsError: state.consignments.getLoadShippingOptionsError,\n            getSelectShippingOptionError: getSelectShippingOptionError(state),\n            getContinueAsGuestError: state.billingAddress.getContinueAsGuestError,\n            getUpdateBillingAddressError: state.billingAddress.getUpdateError,\n            getUpdateShippingAddressError: state.shippingStrategies.getUpdateAddressError,\n            getDeleteConsignmentError: state.consignments.getDeleteError,\n            getUpdateConsignmentError: state.consignments.getUpdateError,\n            getCreateConsignmentsError: state.consignments.getCreateError,\n            getInitializeShippingError: state.shippingStrategies.getInitializeError,\n            getApplyStoreCreditError: state.storeCredit.getApplyError,\n            getApplyCouponError: state.coupons.getApplyError,\n            getRemoveCouponError: state.coupons.getRemoveError,\n            getApplyGiftCertificateError: state.giftCertificates.getApplyError,\n            getRemoveGiftCertificateError: state.giftCertificates.getRemoveError,\n            getLoadInstrumentsError: state.instruments.getLoadError,\n            getDeleteInstrumentError: state.instruments.getDeleteError,\n            getLoadConfigError: state.config.getLoadError,\n        };\n\n        return {\n            getError: getError(selector),\n            ...selector,\n        };\n    });\n}\n","import { createSelector, createShallowEqualSelector } from '../common/selector';\nimport { Omit } from '../common/types';\nimport { memoizeOne } from '../common/utility';\n\nimport InternalCheckoutSelectors from './internal-checkout-selectors';\n\n/**\n * Responsible for checking the statuses of various asynchronous actions related\n * to checkout.\n *\n * This object has a set of getters that return true if an action is in\n * progress. For example, you can check whether a customer is submitting an\n * order and waiting for the request to complete.\n */\nexport default interface CheckoutStoreStatusSelector {\n    /**\n     * Checks whether any checkout action is pending.\n     *\n     * @returns True if there is a pending action, otherwise false.\n     */\n    isPending(): boolean;\n\n    /**\n     * Checks whether the current checkout is loading.\n     *\n     * @returns True if the current checkout is loading, otherwise false.\n     */\n    isLoadingCheckout(): boolean;\n\n    /**\n     * Checks whether the current checkout is being updated.\n     *\n     * @returns True if the current checkout is being updated, otherwise false.\n     */\n    isUpdatingCheckout(): boolean;\n\n    /**\n     * Checks whether the current order is submitting.\n     *\n     * @returns True if the current order is submitting, otherwise false.\n     */\n    isSubmittingOrder(): boolean;\n\n    /**\n     * Checks whether the current order is finalizing.\n     *\n     * @returns True if the current order is finalizing, otherwise false.\n     */\n    isFinalizingOrder(): boolean;\n\n    /**\n     * Checks whether the current order is loading.\n     *\n     * @returns True if the current order is loading, otherwise false.\n     */\n    isLoadingOrder(): boolean;\n\n    /**\n     * Checks whether the current cart is loading.\n     *\n     * @returns True if the current cart is loading, otherwise false.\n     */\n    isLoadingCart(): boolean;\n\n    /**\n     * Checks whether billing countries are loading.\n     *\n     * @returns True if billing countries are loading, otherwise false.\n     */\n    isLoadingBillingCountries(): boolean;\n\n    /**\n     * Checks whether shipping countries are loading.\n     *\n     * @returns True if shipping countries are loading, otherwise false.\n     */\n    isLoadingShippingCountries(): boolean;\n\n    /**\n     * Checks whether payment methods are loading.\n     *\n     * @returns True if payment methods are loading, otherwise false.\n     */\n    isLoadingPaymentMethods(): boolean;\n\n    /**\n     * Checks whether a specific or any payment method is loading.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is loading.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is loading, otherwise false.\n     */\n    isLoadingPaymentMethod(methodId?: string): boolean;\n\n    /**\n     * Checks whether a specific or any payment method is initializing.\n     *\n     * The method returns true if no ID is provided and at least one payment\n     * method is initializing.\n     *\n     * @param methodId - The identifier of the payment method to check.\n     * @returns True if the payment method is initializing, otherwise false.\n     */\n    isInitializingPayment(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is signing in.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing in using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing in the\n     * current customer.\n     * @returns True if the customer is signing in, otherwise false.\n     */\n    isSigningIn(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is signing out.\n     *\n     * If an ID is provided, the method also checks whether the customer is\n     * signing out using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for signing out the\n     * current customer.\n     * @returns True if the customer is signing out, otherwise false.\n     */\n    isSigningOut(methodId?: string): boolean;\n\n    /**\n     * Checks whether the customer step is initializing.\n     *\n     * If an ID is provided, the method also checks whether the customer step is\n     * initializing using a specific customer method with the same ID.\n     *\n     * @param methodId - The identifier of the method used for initializing the\n     * customer step of checkout.\n     * @returns True if the customer step is initializing, otherwise false.\n     */\n    isInitializingCustomer(methodId?: string): boolean;\n\n    /**\n     * Checks whether shipping options are loading.\n     *\n     * @returns True if shipping options are loading, otherwise false.\n     */\n    isLoadingShippingOptions(): boolean;\n\n    /**\n     * Checks whether a shipping option is being selected.\n     *\n     * A consignment ID should be provided when checking if a shipping option\n     * is being selected for a specific consignment, otherwise it will check\n     * for all consignments.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if selecting a shipping option, otherwise false.\n     */\n    isSelectingShippingOption(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether the billing address is being updated.\n     *\n     * @returns True if updating their billing address, otherwise false.\n     */\n    isUpdatingBillingAddress(): boolean;\n\n    /**\n     * Checks whether the shopper is continuing out as a guest.\n     *\n     * @returns True if continuing as guest, otherwise false.\n     */\n    isContinuingAsGuest(): boolean;\n\n    /**\n     * Checks the shipping address is being updated.\n     *\n     * @returns True if updating their shipping address, otherwise false.\n     */\n    isUpdatingShippingAddress(): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if updating consignment(s), otherwise false.\n     */\n    isUpdatingConsignment(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being deleted.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @param consignmentId - The identifier of the consignment to be checked.\n     * @returns True if deleting consignment(s), otherwise false.\n     */\n    isDeletingConsignment(consignmentId?: string): boolean;\n\n    /**\n     * Checks whether a given/any consignment is being updated.\n     *\n     * A consignment ID should be provided when checking for a specific consignment,\n     * otherwise it will check for any consignment.\n     *\n     * @returns True if creating consignments, otherwise false.\n     */\n    isCreatingConsignments(): boolean;\n\n    /**\n     * Checks whether the shipping step of a checkout process is initializing.\n     *\n     * If an identifier is provided, the method also checks whether the shipping\n     * step is initializing using a specific shipping method with the same\n     * identifier.\n     *\n     * @param methodId - The identifer of the initialization method to check.\n     * @returns True if the shipping step is initializing, otherwise false.\n     */\n    isInitializingShipping(methodId?: string): boolean;\n\n    /**\n     * Checks whether the current customer is applying a coupon code.\n     *\n     * @returns True if applying a coupon code, otherwise false.\n     */\n    isApplyingCoupon(): boolean;\n\n    /**\n     * Checks whether the current customer is applying store credit.\n     *\n     * @returns True if applying store credit, otherwise false.\n     */\n    isApplyingStoreCredit(): boolean;\n\n    /**\n     * Checks whether the current customer is removing a coupon code.\n     *\n     * @returns True if removing a coupon code, otherwise false.\n     */\n    isRemovingCoupon(): boolean;\n\n    /**\n     * Checks whether the current customer is applying a gift certificate.\n     *\n     * @returns True if applying a gift certificate, otherwise false.\n     */\n    isApplyingGiftCertificate(): boolean;\n\n    /**\n     * Checks whether the current customer is removing a gift certificate.\n     *\n     * @returns True if removing a gift certificate, otherwise false.\n     */\n    isRemovingGiftCertificate(): boolean;\n\n    /**\n     * Checks whether the current customer's payment instruments are loading.\n     *\n     * @returns True if payment instruments are loading, otherwise false.\n     */\n    isLoadingInstruments(): boolean;\n\n    /**\n     * Checks whether the current customer is deleting a payment instrument.\n     *\n     * @returns True if deleting a payment instrument, otherwise false.\n     */\n    isDeletingInstrument(instrumentId?: string): boolean;\n\n    /**\n     * Checks whether the checkout configuration of a store is loading.\n     *\n     * @returns True if the configuration is loading, otherwise false.\n     */\n    isLoadingConfig(): boolean;\n\n    /**\n     * Checks whether the customer step of a checkout is in a pending state.\n     *\n     * The customer step is considered to be pending if it is in the process of\n     * initializing, signing in, signing out, and/or interacting with a customer\n     * widget.\n     *\n     * @returns True if the customer step is pending, otherwise false.\n     */\n    isCustomerStepPending(): boolean;\n\n    /**\n     * Checks whether the payment step of a checkout is in a pending state.\n     *\n     * The payment step is considered to be pending if it is in the process of\n     * initializing, submitting an order, finalizing an order, and/or\n     * interacting with a payment widget.\n     *\n     * @returns True if the payment step is pending, otherwise false.\n     */\n    isPaymentStepPending(): boolean;\n}\n\nexport type CheckoutStoreStatusSelectorFactory = (state: InternalCheckoutSelectors) => CheckoutStoreStatusSelector;\n\nexport function createCheckoutStoreStatusSelectorFactory(): CheckoutStoreStatusSelectorFactory {\n    const isPending = createShallowEqualSelector(\n        (selector: Omit<CheckoutStoreStatusSelector, 'isPending'>) => selector,\n        selector => () => {\n            return (Object.keys(selector) as Array<keyof Omit<CheckoutStoreStatusSelector, 'isPending'>>)\n                .some(key => selector[key]());\n        }\n    );\n\n    const isSelectingShippingOption = createSelector(\n        ({ shippingStrategies }: InternalCheckoutSelectors) => shippingStrategies.isSelectingOption,\n        ({ consignments }: InternalCheckoutSelectors) => consignments.isUpdatingShippingOption,\n        (isSelectingOption, isUpdatingShippingOption) => (consignmentId?: string) => {\n            return (\n                isSelectingOption() ||\n                isUpdatingShippingOption(consignmentId)\n            );\n        }\n    );\n\n    const isCustomerStepPending = createSelector(\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isInitializing,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isSigningIn,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isSigningOut,\n        ({ customerStrategies }: InternalCheckoutSelectors) => customerStrategies.isWidgetInteracting,\n        (isInitializing, isSigningIn, isSigningOut, isWidgetInteracting) => (methodId?: string) => {\n            return (\n                isInitializing(methodId) ||\n                isSigningIn(methodId) ||\n                isSigningOut(methodId) ||\n                isWidgetInteracting(methodId)\n            );\n        }\n    );\n\n    const isPaymentStepPending = createSelector(\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isInitializing,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isExecuting,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isFinalizing,\n        ({ paymentStrategies }: InternalCheckoutSelectors) => paymentStrategies.isWidgetInteracting,\n        (isInitializing, isExecuting, isFinalizing, isWidgetInteracting) => (methodId?: string) => {\n            return (\n                isInitializing(methodId) ||\n                isExecuting(methodId) ||\n                isFinalizing(methodId) ||\n                isWidgetInteracting(methodId)\n            );\n        }\n    );\n\n    return memoizeOne((\n        state: InternalCheckoutSelectors\n    ): CheckoutStoreStatusSelector => {\n        const selector = {\n            isLoadingCheckout: state.checkout.isLoading,\n            isUpdatingCheckout: state.checkout.isUpdating,\n            isSubmittingOrder: state.paymentStrategies.isExecuting,\n            isFinalizingOrder: state.paymentStrategies.isFinalizing,\n            isLoadingOrder: state.order.isLoading,\n            isLoadingCart: state.cart.isLoading,\n            isLoadingBillingCountries: state.countries.isLoading,\n            isLoadingShippingCountries: state.shippingCountries.isLoading,\n            isLoadingPaymentMethods: state.paymentMethods.isLoading,\n            isLoadingPaymentMethod: state.paymentMethods.isLoadingMethod,\n            isInitializingPayment: state.paymentStrategies.isInitializing,\n            isSigningIn: state.customerStrategies.isSigningIn,\n            isSigningOut: state.customerStrategies.isSigningOut,\n            isInitializingCustomer: state.customerStrategies.isInitializing,\n            isLoadingShippingOptions: state.consignments.isLoadingShippingOptions,\n            isSelectingShippingOption: isSelectingShippingOption(state),\n            isUpdatingBillingAddress: state.billingAddress.isUpdating,\n            isContinuingAsGuest: state.billingAddress.isContinuingAsGuest,\n            isUpdatingShippingAddress: state.shippingStrategies.isUpdatingAddress,\n            isUpdatingConsignment: state.consignments.isUpdating,\n            isDeletingConsignment: state.consignments.isDeleting,\n            isCreatingConsignments: state.consignments.isCreating,\n            isInitializingShipping: state.shippingStrategies.isInitializing,\n            isApplyingStoreCredit: state.storeCredit.isApplying,\n            isApplyingCoupon: state.coupons.isApplying,\n            isRemovingCoupon: state.coupons.isRemoving,\n            isApplyingGiftCertificate: state.giftCertificates.isApplying,\n            isRemovingGiftCertificate: state.giftCertificates.isRemoving,\n            isLoadingInstruments: state.instruments.isLoading,\n            isDeletingInstrument: state.instruments.isDeleting,\n            isLoadingConfig: state.config.isLoading,\n            isCustomerStepPending: isCustomerStepPending(state),\n            isPaymentStepPending: isPaymentStepPending(state),\n        };\n\n        return {\n            isPending: isPending(selector),\n            ...selector,\n        };\n    });\n}\n","import { toSingleLine } from '../utility';\n\nexport default class ErrorMessageTransformer<TError extends Error = Error> {\n    constructor(\n        private _messageCustomizer: (type: TError) => string\n    ) {}\n\n    transform(error: TError): TError {\n        error.message = toSingleLine(this._messageCustomizer(error));\n\n        return error;\n    }\n}\n","export default function toSingleLine(input?: string) {\n    if (!input) {\n        return '';\n    }\n\n    return input.split(/(?:\\r\\n|\\n|\\r)/)\n        .map(line => line.replace(/^\\s+/gm, ''))\n        .join(' ')\n        .trim();\n}\n","import { Action, ThunkAction } from '@bigcommerce/data-store';\nimport { Observable } from 'rxjs';\n\nimport { AddressRequestBody } from '../address';\nimport { BillingAddressActionCreator, BillingAddressRequestBody } from '../billing';\nimport { createDataStoreProjection, DataStoreProjection } from '../common/data-store';\nimport { ErrorActionCreator, ErrorMessageTransformer } from '../common/error';\nimport { RequestOptions } from '../common/http-request';\nimport { bindDecorator as bind } from '../common/utility';\nimport { ConfigActionCreator } from '../config';\nimport { CouponActionCreator, GiftCertificateActionCreator } from '../coupon';\nimport { CustomerCredentials, CustomerInitializeOptions, CustomerRequestOptions, CustomerStrategyActionCreator, GuestCredentials } from '../customer';\nimport { CountryActionCreator } from '../geography';\nimport { OrderActionCreator, OrderRequestBody } from '../order';\nimport { SpamProtectionActionCreator, SpamProtectionOptions } from '../order/spam-protection';\nimport { PaymentInitializeOptions, PaymentMethodActionCreator, PaymentRequestOptions, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator } from '../payment/instrument';\nimport { ConsignmentsRequestBody, ConsignmentActionCreator, ShippingCountryActionCreator, ShippingInitializeOptions, ShippingRequestOptions, ShippingStrategyActionCreator } from '../shipping';\nimport { ConsignmentAssignmentRequestBody, ConsignmentUpdateRequestBody } from '../shipping/consignment';\nimport StoreCreditActionCreator from '../store-credit/store-credit-action-creator';\n\nimport { CheckoutRequestBody } from './checkout';\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutParams from './checkout-params';\nimport CheckoutSelectors from './checkout-selectors';\nimport CheckoutStore from './checkout-store';\nimport { createCheckoutSelectorsFactory, CheckoutSelectorsFactory } from './create-checkout-selectors';\nimport createCheckoutServiceErrorTransformer from './create-checkout-service-error-transformer';\n\n/**\n * Responsible for completing the checkout process for the current customer.\n *\n * This object can be used to collect all information that is required for\n * checkout, such as shipping and billing information. It can also be used to\n * retrieve the current checkout state and subscribe to its changes.\n */\n@bind\nexport default class CheckoutService {\n    private _storeProjection: DataStoreProjection<CheckoutSelectors>;\n    private _errorTransformer: ErrorMessageTransformer;\n    private _selectorsFactory: CheckoutSelectorsFactory;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _store: CheckoutStore,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _checkoutActionCreator: CheckoutActionCreator,\n        private _configActionCreator: ConfigActionCreator,\n        private _consignmentActionCreator: ConsignmentActionCreator,\n        private _countryActionCreator: CountryActionCreator,\n        private _couponActionCreator: CouponActionCreator,\n        private _customerStrategyActionCreator: CustomerStrategyActionCreator,\n        private _errorActionCreator: ErrorActionCreator,\n        private _giftCertificateActionCreator: GiftCertificateActionCreator,\n        private _instrumentActionCreator: InstrumentActionCreator,\n        private _orderActionCreator: OrderActionCreator,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _paymentStrategyActionCreator: PaymentStrategyActionCreator,\n        private _shippingCountryActionCreator: ShippingCountryActionCreator,\n        private _shippingStrategyActionCreator: ShippingStrategyActionCreator,\n        private _spamProtectionActionCreator: SpamProtectionActionCreator,\n        private _storeCreditActionCreator: StoreCreditActionCreator\n    ) {\n        this._errorTransformer = createCheckoutServiceErrorTransformer();\n        this._selectorsFactory = createCheckoutSelectorsFactory();\n        this._storeProjection = createDataStoreProjection(this._store, this._selectorsFactory);\n    }\n\n    /**\n     * Returns a snapshot of the current checkout state.\n     *\n     * The method returns a new instance every time there is a change in the\n     * checkout state. You can query the state by calling any of its getter\n     * methods.\n     *\n     * ```js\n     * const state = service.getState();\n     *\n     * console.log(state.data.getOrder());\n     * console.log(state.errors.getSubmitOrderError());\n     * console.log(state.statuses.isSubmittingOrder());\n     * ```\n     *\n     * @returns The current customer's checkout state\n     */\n    getState(): CheckoutSelectors {\n        return this._storeProjection.getState();\n    }\n\n    /**\n     * Notifies all subscribers with the current state.\n     *\n     * When this method gets called, the subscribers get called regardless if\n     * they have any filters applied.\n     */\n    notifyState(): void {\n        this._storeProjection.notifyState();\n    }\n\n    /**\n     * Subscribes to any changes to the current state.\n     *\n     * The method registers a callback function and executes it every time there\n     * is a change in the checkout state.\n     *\n     * ```js\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart());\n     * });\n     * ```\n     *\n     * The method can be configured to notify subscribers only regarding\n     * relevant changes, by providing a filter function.\n     *\n     * ```js\n     * const filter = state => state.data.getCart();\n     *\n     * // Only trigger the subscriber when the cart changes.\n     * service.subscribe(state => {\n     *     console.log(state.data.getCart())\n     * }, filter);\n     * ```\n     *\n     * @param subscriber - The function to subscribe to state changes.\n     * @param filters - One or more functions to filter out irrelevant state\n     * changes. If more than one function is provided, the subscriber will only\n     * be triggered if all conditions are met.\n     * @returns A function, if called, will unsubscribe the subscriber.\n     */\n    subscribe(\n        subscriber: (state: CheckoutSelectors) => void,\n        ...filters: Array<(state: CheckoutSelectors) => any>\n    ): () => void {\n        return this._storeProjection.subscribe(subscriber, ...filters);\n    }\n\n    /**\n     * Loads the current checkout.\n     *\n     * This method can only be called if there is an active checkout. Also, it\n     * can only retrieve data that belongs to the current customer. When it is\n     * successfully executed, you can retrieve the data by calling\n     * `CheckoutStoreSelector#getCheckout`.\n     *\n     * ```js\n     * const state = await service.loadCheckout('0cfd6c06-57c3-4e29-8d7a-de55cc8a9052');\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param id - The identifier of the checkout to load, or the default checkout if not provided.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    loadCheckout(id?: string, options?: RequestOptions<CheckoutParams>): Promise<CheckoutSelectors> {\n        return this._dispatch(id ?\n            this._checkoutActionCreator.loadCheckout(id, options) :\n            this._checkoutActionCreator.loadDefaultCheckout(options)\n        );\n    }\n\n    /**\n     * Updates specific properties of the current checkout.\n     *\n     * ```js\n     * const state = await service.updateCheckout(checkout);\n     *\n     * console.log(state.data.getCheckout());\n     * ```\n     *\n     * @param payload - The checkout properties to be updated.\n     * @param options - Options for loading the current checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    updateCheckout(payload: CheckoutRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._checkoutActionCreator.updateCheckout(payload, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads an order by an id.\n     *\n     * The method can only retrieve an order if the order belongs to the current\n     * customer. If it is successfully executed, the data can be retrieved by\n     * calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.loadOrder(123);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param orderId - The identifier of the order to load.\n     * @param options - Options for loading the order.\n     * @returns A promise that resolves to the current state.\n     */\n    loadOrder(orderId: number, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const loadCheckoutAction = this._orderActionCreator.loadOrder(orderId, options);\n        const loadConfigAction = this._configActionCreator.loadConfig(options);\n\n        return Promise.all([\n            this._dispatch(loadCheckoutAction),\n            this._dispatch(loadConfigAction, { queueId: 'config' }),\n        ])\n            .then(() => this.getState());\n    }\n\n    /**\n     * Submits an order, thereby completing a checkout process.\n     *\n     * Before you can submit an order, you must initialize the payment method\n     * chosen by the customer by calling `CheckoutService#initializePayment`.\n     *\n     * ```js\n     * await service.initializePayment({ methodId: 'braintree' });\n     * await service.submitOrder({\n     *     payment: {\n     *         methodId: 'braintree',\n     *         paymentData: {\n     *             ccExpiry: { month: 10, year: 20 },\n     *             ccName: 'BigCommerce',\n     *             ccNumber: '4111111111111111',\n     *             ccCvv: 123,\n     *         },\n     *     },\n     * });\n     * ```\n     *\n     * You are not required to include `paymentData` if the order does not\n     * require additional payment details. For example, the customer has already\n     * entered their payment details on the cart page using one of the hosted\n     * payment methods, such as PayPal. Or the customer has applied a gift\n     * certificate that exceeds the grand total amount.\n     *\n     * If the order is submitted successfully, you can retrieve the newly\n     * created order by calling `CheckoutStoreSelector#getOrder`.\n     *\n     * ```js\n     * const state = await service.submitOrder(payload);\n     *\n     * console.log(state.data.getOrder());\n     * ```\n     *\n     * @param payload - The request payload to submit for the current order.\n     * @param options - Options for submitting the current order.\n     * @returns A promise that resolves to the current state.\n     */\n    submitOrder(payload: OrderRequestBody, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.execute(payload, options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Finalizes the submission process for an order.\n     *\n     * This method is only required for certain hosted payment methods that\n     * require a customer to enter their credit card details on their website.\n     * You need to call this method once the customer has redirected back to\n     * checkout in order to complete the checkout process.\n     *\n     * If the method is called before order finalization is required or for a\n     * payment method that does not require order finalization, an error will be\n     * thrown. Conversely, if the method is called successfully, you should\n     * immediately redirect the customer to the order confirmation page.\n     *\n     * ```js\n     * try {\n     *     await service.finalizeOrderIfNeeded();\n     *\n     *     window.location.assign('/order-confirmation');\n     * } catch (error) {\n     *     if (error.type !== 'order_finalization_not_required') {\n     *         throw error;\n     *     }\n     * }\n     * ```\n     *\n     * @param options - Options for finalizing the current order.\n     * @returns A promise that resolves to the current state.\n     * @throws `OrderFinalizationNotRequiredError` error if order finalization\n     * is not required for the current order at the time of execution.\n     */\n    finalizeOrderIfNeeded(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.finalize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of payment methods available for checkout.\n     *\n     * If a customer enters their payment details before navigating to the\n     * checkout page (i.e.: using PayPal checkout button on the cart page), only\n     * one payment method will be available for the customer - the selected\n     * payment method. Otherwise, by default, all payment methods configured by\n     * the merchant will be available for the customer.\n     *\n     * Once the method is executed successfully, you can call\n     * `CheckoutStoreSelector#getPaymentMethods` to retrieve the list of payment\n     * methods.\n     *\n     * ```js\n     * const state = service.loadPaymentMethods();\n     *\n     * console.log(state.data.getPaymentMethods());\n     * ```\n     *\n     * @param options - Options for loading the payment methods that are\n     * available to the current customer.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethods(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethods(options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Loads a payment method by an id.\n     *\n     * This method does not work with multi-option payment providers. Due to its\n     * limitation, it is deprecated and will be removed in the future.\n     *\n     * @deprecated\n     * @internal\n     * @param methodId - The identifier for the payment method to load.\n     * @param options - Options for loading the payment method.\n     * @returns A promise that resolves to the current state.\n     */\n    loadPaymentMethod(methodId: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentMethodActionCreator.loadPaymentMethod(methodId, options);\n\n        return this._dispatch(action, { queueId: 'paymentMethods' });\n    }\n\n    /**\n     * Initializes the payment step of a checkout process.\n     *\n     * Before a payment method can accept payment details, it must first be\n     * initialized. Some payment methods require you to provide additional\n     * initialization options. For example, Amazon requires a container ID in\n     * order to initialize their payment widget.\n     *\n     * ```js\n     * await service.initializePayment({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'walletWidget',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializePayment(options: PaymentInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * De-initializes the payment step of a checkout process.\n     *\n     * The method should be called once you no longer require a payment method\n     * to be initialized. It can perform any necessary clean-up behind the\n     * scene, i.e.: remove DOM nodes or event handlers that are attached as a\n     * result of payment initialization.\n     *\n     * ```js\n     * await service.deinitializePayment({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the payment step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializePayment(options: PaymentRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._paymentStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'paymentStrategy' });\n    }\n\n    /**\n     * Loads a list of countries available for billing.\n     *\n     * Once you make a successful request, you will be able to retrieve the list\n     * of countries by calling `CheckoutStoreSelector#getBillingCountries`.\n     *\n     * ```js\n     * const state = await service.loadBillingCountries();\n     *\n     * console.log(state.data.getBillingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available billing countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._countryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'billingCountries' });\n    }\n\n    /**\n     * Loads a list of countries available for shipping.\n     *\n     * The list is determined based on the shipping zones configured by a\n     * merchant. Once you make a successful call, you will be able to retrieve\n     * the list of available shipping countries by calling\n     * `CheckoutStoreSelector#getShippingCountries`.\n     *\n     * ```js\n     * const state = await service.loadShippingCountries();\n     *\n     * console.log(state.data.getShippingCountries());\n     * ```\n     *\n     * @param options - Options for loading the available shipping countries.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingCountries(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingCountryActionCreator.loadCountries(options);\n\n        return this._dispatch(action, { queueId: 'shippingCountries' });\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their billing address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getBillingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadBillingAddressFields();\n     *\n     * console.log(state.data.getBillingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the billing address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadBillingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadBillingCountries(options);\n    }\n\n    /**\n     * Loads a set of form fields that should be presented to customers in order\n     * to capture their shipping address.\n     *\n     * Once the method has been executed successfully, you can call\n     * `CheckoutStoreSelector#getShippingAddressFields` to retrieve the set of\n     * form fields.\n     *\n     * ```js\n     * const state = service.loadShippingAddressFields();\n     *\n     * console.log(state.data.getShippingAddressFields('US'));\n     * ```\n     *\n     * @param options - Options for loading the shipping address form fields.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingAddressFields(options?: RequestOptions): Promise<CheckoutSelectors> {\n        return this.loadShippingCountries(options);\n    }\n\n    /**\n     * Initializes the sign-in step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, have their own sign-in flow. In\n     * order to support them, this method must be called.\n     *\n     * ```js\n     * await service.initializeCustomer({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'signInButton',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeCustomer(options?: CustomerInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * De-initializes the sign-in step of a checkout process.\n     *\n     * It should be called once you no longer want to prompt customers to sign\n     * in. It can perform any necessary clean-up behind the scene, i.e.: remove\n     * DOM nodes or event handlers that are attached as a result of customer\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeCustomer({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the customer step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Continues to check out as a guest.\n     *\n     * The customer is required to provide their email address in order to\n     * continue. Once they provide their email address, it will be stored as a\n     * part of their billing address.\n     *\n     * @param credentials - The guest credentials to use.\n     * @param options - Options for continuing as a guest.\n     * @returns A promise that resolves to the current state.\n     */\n    continueAsGuest(credentials: GuestCredentials, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.continueAsGuest(credentials, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Signs into a customer's registered account.\n     *\n     * Once the customer is signed in successfully, the checkout state will be\n     * populated with information associated with the customer, such as their\n     * saved addresses. You can call `CheckoutStoreSelector#getCustomer` to\n     * retrieve the data.\n     *\n     * ```js\n     * const state = await service.signInCustomer({\n     *     email: 'foo@bar.com',\n     *     password: 'password123',\n     * });\n     *\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param credentials - The credentials to be used for signing in the customer.\n     * @param options - Options for signing in the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signInCustomer(credentials: CustomerCredentials, options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signIn(credentials, options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Signs out the current customer if they are previously signed in.\n     *\n     * Once the customer is successfully signed out, the checkout state will be\n     * reset automatically.\n     *\n     * ```js\n     * const state = await service.signOutCustomer();\n     *\n     * // The returned object should not contain information about the previously signed-in customer.\n     * console.log(state.data.getCustomer());\n     * ```\n     *\n     * @param options - Options for signing out the customer.\n     * @returns A promise that resolves to the current state.\n     */\n    signOutCustomer(options?: CustomerRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._customerStrategyActionCreator.signOut(options);\n\n        return this._dispatch(action, { queueId: 'customerStrategy' });\n    }\n\n    /**\n     * Loads a list of shipping options available for checkout.\n     *\n     * Available shipping options can only be determined once a customer\n     * provides their shipping address. If the method is executed successfully,\n     * `CheckoutStoreSelector#getShippingOptions` can be called to retrieve the\n     * list of shipping options.\n     *\n     * ```js\n     * const state = await service.loadShippingOptions();\n     *\n     * console.log(state.data.getShippingOptions());\n     * ```\n     *\n     * @param options - Options for loading the available shipping options.\n     * @returns A promise that resolves to the current state.\n     */\n    loadShippingOptions(options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.loadShippingOptions(options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the shipping step of a checkout process.\n     *\n     * Some payment methods, such as Amazon, can provide shipping information to\n     * be used for checkout. In order to support them, this method must be\n     * called.\n     *\n     * ```js\n     * await service.initializeShipping({\n     *     methodId: 'amazon',\n     *     amazon: {\n     *         container: 'addressBook',\n     *     },\n     * });\n     * ```\n     *\n     * @param options - Options for initializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeShipping(options?: ShippingInitializeOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * De-initializes the shipping step of a checkout process.\n     *\n     * It should be called once you no longer need to collect shipping details.\n     * It can perform any necessary clean-up behind the scene, i.e.: remove DOM\n     * nodes or event handlers that are attached as a result of shipping\n     * initialization.\n     *\n     * ```js\n     * await service.deinitializeShipping({\n     *     methodId: 'amazon',\n     * });\n     * ```\n     *\n     * @param options - Options for deinitializing the shipping step of checkout.\n     * @returns A promise that resolves to the current state.\n     */\n    deinitializeShipping(options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.deinitialize(options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for the current address.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectShippingOption('address-id', 'shipping-option-id');\n     *\n     * console.log(state.data.getSelectedShippingOption());\n     * ```\n     *\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectShippingOption(shippingOptionId: string, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.selectOption(shippingOptionId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the shipping address for the current checkout.\n     *\n     * When a customer updates their shipping address for an order, they will\n     * see an updated list of shipping options and the cost for each option,\n     * unless no options are available. If the update is successful, you can\n     * call `CheckoutStoreSelector#getShippingAddress` to retrieve the address.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateShippingAddress(address);\n     *\n     * console.log(state.data.getShippingAddress());\n     * ```\n     *\n     * @param address - The address to be used for shipping.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateShippingAddress(address: Partial<AddressRequestBody>, options?: ShippingRequestOptions): Promise<CheckoutSelectors> {\n        const action = this._shippingStrategyActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Creates consignments given a list.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddress`.\n     *\n     * When consignments are created, an updated list of shipping options will\n     * become available for each consignment, unless no options are available.\n     * If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve the updated list of\n     * consignments.'\n     *\n     * Beware that if a consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.createConsignments(consignments);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignments - The list of consignments to be created.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    createConsignments(\n        consignments: ConsignmentsRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.createConsignments(consignments, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Deletes a consignment\n     *\n     * ```js\n     * const state = await service.deleteConsignment('55c96cda6f04c');\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The ID of the consignment to be deleted\n     * @param options - Options for the consignment delete request\n     * @returns A promise that resolves to the current state.\n     */\n    deleteConsignment(\n        consignmentId: string,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.deleteConsignment(consignmentId, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates a specific consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#selectShippingOption`.\n     *\n     * When a shipping address for a consignment is updated, an updated list of\n     * shipping options will become available for the consignment, unless no\n     * options are available. If the update is successful, you can call\n     * `CheckoutStoreSelector#getConsignments` to retrieve updated list of\n     * consignments.\n     *\n     * Beware that if the updated consignment includes all line items from another\n     * consignment, that consignment will be deleted as a valid consignment must\n     * include at least one valid line item.\n     *\n     * If the shipping address changes and the selected shipping option becomes\n     * unavailable for the updated address, the shipping option will be\n     * deselected.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateConsignment(consignment);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for updating the shipping address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateConsignment(\n        consignment: ConsignmentUpdateRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateConsignment(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that assigns items to be shipped to a specific address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and assigns the provided items. If no consignment matches the address, a new one\n     * will be created.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    assignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.assignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Convenience method that unassigns items from a specific shipping address.\n     *\n     * Note: this method finds an existing consignment that matches the provided address\n     * and unassigns the specified items. If the consignment ends up with no line items\n     * after the unassignment, it will be deleted.\n     *\n     * @param consignment - The consignment data that will be used.\n     * @param options - Options for the request\n     * @returns A promise that resolves to the current state.\n     */\n    unassignItemsToAddress(\n        consignment: ConsignmentAssignmentRequestBody,\n        options?: RequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.unassignItemsByAddress(consignment, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Selects a shipping option for a given consignment.\n     *\n     * Note: this is used when items need to be shipped to multiple addresses,\n     * for single shipping address, use `CheckoutService#updateShippingAddres`.\n     *\n     * If a shipping option has an additional cost, the quote for the current\n     * order will be adjusted once the option is selected.\n     *\n     * ```js\n     * const state = await service.selectConsignmentShippingOption(consignmentId, optionId);\n     *\n     * console.log(state.data.getConsignments());\n     * ```\n     *\n     * @param consignmentId - The identified of the consignment to be updated.\n     * @param shippingOptionId - The identifier of the shipping option to\n     * select.\n     * @param options - Options for selecting the shipping option.\n     * @returns A promise that resolves to the current state.\n     */\n    selectConsignmentShippingOption(\n        consignmentId: string,\n        shippingOptionId: string,\n        options?: ShippingRequestOptions\n    ): Promise<CheckoutSelectors> {\n        const action = this._consignmentActionCreator.updateShippingOption({\n            id: consignmentId,\n            shippingOptionId,\n        }, options);\n\n        return this._dispatch(action, { queueId: 'shippingStrategy' });\n    }\n\n    /**\n     * Updates the billing address for the current checkout.\n     *\n     * A customer must provide their billing address before they can proceed to\n     * pay for their order.\n     *\n     * You can submit an address that is partially complete. The address does\n     * not get validated until you submit the order.\n     *\n     * ```js\n     * const state = await service.updateBillingAddress(address);\n     *\n     * console.log(state.data.getBillingAddress());\n     * ```\n     *\n     * @param address - The address to be used for billing.\n     * @param options - Options for updating the billing address.\n     * @returns A promise that resolves to the current state.\n     */\n    updateBillingAddress(address: Partial<BillingAddressRequestBody>, options: RequestOptions = {}): Promise<CheckoutSelectors> {\n        const action = this._billingAddressActionCreator.updateAddress(address, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies or removes customer's store credit code to the current checkout.\n     *\n     * Once the store credit gets applied, the outstanding balance will be adjusted accordingly.\n     *\n     * ```js\n     * const state = await service.applyStoreCredit(true);\n     *\n     * console.log(state.data.getCheckout().outstandingBalance);\n     * ```\n     *\n     * @param options - Options for applying store credit.\n     * @returns A promise that resolves to the current state.\n     */\n    applyStoreCredit(useStoreCredit: boolean, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._storeCreditActionCreator.applyStoreCredit(useStoreCredit, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a coupon code to the current checkout.\n     *\n     * Once the coupon code gets applied, the quote for the current checkout will\n     * be adjusted accordingly. The same coupon code cannot be applied more than\n     * once.\n     *\n     * ```js\n     * await service.applyCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to apply to the current checkout.\n     * @param options - Options for applying the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    applyCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.applyCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a coupon code from the current checkout.\n     *\n     * Once the coupon code gets removed, the quote for the current checkout will\n     * be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeCoupon('COUPON');\n     * ```\n     *\n     * @param code - The coupon code to remove from the current checkout.\n     * @param options - Options for removing the coupon code.\n     * @returns A promise that resolves to the current state.\n     */\n    removeCoupon(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._couponActionCreator.removeCoupon(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Applies a gift certificate to the current checkout.\n     *\n     * Once the gift certificate gets applied, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.applyGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to apply to the current checkout.\n     * @param options - Options for applying the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    applyGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.applyGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Removes a gift certificate from an order.\n     *\n     * Once the gift certificate gets removed, the quote for the current\n     * checkout will be adjusted accordingly.\n     *\n     * ```js\n     * await service.removeGiftCertificate('GIFT_CERTIFICATE');\n     * ```\n     *\n     * @param code - The gift certificate to remove from the current checkout.\n     * @param options - Options for removing the gift certificate.\n     * @returns A promise that resolves to the current state.\n     */\n    removeGiftCertificate(code: string, options?: RequestOptions): Promise<CheckoutSelectors> {\n        const action = this._giftCertificateActionCreator.removeGiftCertificate(code, options);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Loads a list of payment instruments associated with a customer.\n     *\n     * Once the method has been called successfully, you can retrieve the list\n     * of payment instruments by calling `CheckoutStoreSelector#getInstruments`.\n     * If the customer does not have any payment instruments on record, i.e.:\n     * credit card, you will get an empty list instead.\n     *\n     * ```js\n     * const state = service.loadInstruments();\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @returns A promise that resolves to the current state.\n     */\n    loadInstruments(): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.loadInstruments();\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Deletes a payment instrument by an id.\n     *\n     * Once an instrument gets removed, it can no longer be retrieved using\n     * `CheckoutStoreSelector#getInstruments`.\n     *\n     * ```js\n     * const state = service.deleteInstrument('123');\n     *\n     * console.log(state.data.getInstruments());\n     * ```\n     *\n     * @param instrumentId - The identifier of the payment instrument to delete.\n     * @returns A promise that resolves to the current state.\n     */\n    deleteInstrument(instrumentId: string): Promise<CheckoutSelectors> {\n        const action = this._instrumentActionCreator.deleteInstrument(instrumentId);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Clear errors that have been collected from previous calls.\n     *\n     * ```js\n     * const state = await service.clearError(error);\n     *\n     * console.log(state.errors.getError());\n     * ```\n     *\n     * @param error - Specific error object to clear\n     * @returns A promise that resolves to the current state.\n     */\n    clearError(error: Error): Promise<CheckoutSelectors> {\n        const action = this._errorActionCreator.clearError(error);\n\n        return this._dispatch(action);\n    }\n\n    /**\n     * Initializes the spam protection for order creation.\n     *\n     * With spam protection enabled, the customer has to be verified as\n     * a human. The order creation will fail if spam protection\n     * is enabled but verification fails.\n     *\n     * ```js\n     * await service.initializeSpamProtection({\n     *     containerId: 'spamProtectionContainer',\n     * });\n     * ```\n     *\n     * @param options - Options for initializing spam protection.\n     * @returns A promise that resolves to the current state.\n     */\n    initializeSpamProtection(options: SpamProtectionOptions): Promise<CheckoutSelectors> {\n        const action = this._spamProtectionActionCreator.initialize(options);\n\n        return this._dispatch(action, { queueId: 'spamProtection' });\n    }\n\n    /**\n     * Dispatches an action through the data store and returns the current state\n     * once the action is dispatched.\n     *\n     * @param action - The action to dispatch.\n     * @returns A promise that resolves to the current state.\n     */\n    private _dispatch(action: Action | Observable<Action> | ThunkAction<Action>, options?: { queueId?: string }): Promise<CheckoutSelectors> {\n        return this._store.dispatch(action, options)\n            .then(() => this.getState())\n            .catch(error => {\n                throw this._errorTransformer.transform(error);\n            });\n    }\n}\n","import { ErrorMessageTransformer } from '../common/error';\nimport { MissingDataError, MissingDataErrorType, NotInitializedError, NotInitializedErrorType } from '../common/error/errors';\nimport { getEnvironment } from '../common/utility';\n\nexport type CheckoutServiceErrorType = MissingDataError | NotInitializedError;\nexport type CheckoutServiceErrorTransformer = ErrorMessageTransformer<CheckoutServiceErrorType | Error>;\n\nexport default function createCheckoutServiceErrorTransformer(\n    isDevelopment: boolean = getEnvironment() === 'development'\n): CheckoutServiceErrorTransformer {\n    return new ErrorMessageTransformer(error => {\n        if (!isDevelopment || !isCheckoutServiceError(error)) {\n            return error.message;\n        }\n\n        switch (error.subtype || error.type) {\n        case MissingDataErrorType.MissingConsignments:\n            return `\n                ${error.message}\n                The data could be unavailable because no shipping address has been provided.\n                To fix this, create a consignment or update the shipping address before performing\n                the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCart:\n        case MissingDataErrorType.MissingCheckout:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadCheckout\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingCheckoutConfig:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you need to make sure \\`CheckoutService\\` is initialized\n                properly by calling \\`CheckoutService#loadCheckout\\` before performing any\n                other actions.\n            `;\n\n        case MissingDataErrorType.MissingOrder:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server yet.\n                To fix this issue, you can try calling \\`CheckoutService#loadOrder\\`\n                before performing the same action again.\n            `;\n\n        case MissingDataErrorType.MissingOrderId:\n            return `\n                ${error.message}\n                The data could be unavailable because no order has been created yet. You have\n                to first create the order before you can perform the action.\n            `;\n\n        case MissingDataErrorType.MissingPaymentMethod:\n            return `\n                ${error.message}\n                The data could be unavailable because it has not loaded from the server, or\n                configured by the merchant yet. To fix the former issue, you can try calling\n                \\`CheckoutService#loadPaymentMethods\\` before performing the same action again.\n            `;\n\n        case NotInitializedErrorType.CustomerNotInitialized:\n            return `\n                In order to initialize the customer step of checkout, you need to call\n                \\`CheckoutService#initializeCustomer\\`. Afterwards, you should be able to\n                submit customer details.\n            `;\n\n        case NotInitializedErrorType.PaymentNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the payment step of checkout, you need to call\n                \\`CheckoutService#initializePayment\\`. Afterwards, you should be able to\n                submit payment details.\n            `;\n\n        case NotInitializedErrorType.ShippingNotInitialized:\n            return `\n                ${error.message}\n                In order to initialize the shipping step of checkout, you need to call\n                \\`CheckoutService#initializeShipping\\`. Afterwards, you should be able to\n                submit shipping details.\n            `;\n\n        default:\n            return error.message;\n        }\n    });\n}\n\nfunction isCheckoutServiceError(error: any): error is CheckoutServiceErrorType {\n    return !!(error.subtype || error.type);\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { createScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../billing';\nimport { ErrorActionCreator } from '../common/error';\nimport { getDefaultLogger } from '../common/log';\nimport { getEnvironment } from '../common/utility';\nimport { ConfigActionCreator, ConfigRequestSender, ConfigState } from '../config';\nimport { CouponActionCreator, CouponRequestSender, GiftCertificateActionCreator, GiftCertificateRequestSender } from '../coupon';\nimport { createCustomerStrategyRegistry, CustomerStrategyActionCreator } from '../customer';\nimport { CountryActionCreator, CountryRequestSender } from '../geography';\nimport { OrderActionCreator, OrderRequestSender } from '../order';\nimport { createSpamProtection, SpamProtectionActionCreator } from '../order/spam-protection';\nimport { createPaymentClient, createPaymentStrategyRegistry, PaymentMethodActionCreator, PaymentMethodRequestSender, PaymentStrategyActionCreator } from '../payment';\nimport { InstrumentActionCreator, InstrumentRequestSender } from '../payment/instrument';\nimport { createShippingStrategyRegistry, ConsignmentActionCreator, ConsignmentRequestSender, ShippingCountryActionCreator, ShippingCountryRequestSender, ShippingStrategyActionCreator } from '../shipping';\nimport { StoreCreditActionCreator, StoreCreditRequestSender } from '../store-credit';\n\nimport CheckoutActionCreator from './checkout-action-creator';\nimport CheckoutRequestSender from './checkout-request-sender';\nimport CheckoutService from './checkout-service';\nimport CheckoutValidator from './checkout-validator';\nimport createCheckoutStore from './create-checkout-store';\n\n/**\n * Creates an instance of `CheckoutService`.\n *\n * @remarks\n * ```js\n * const service = createCheckoutService();\n *\n * service.subscribe(state => {\n *     console.log(state);\n * });\n *\n * service.loadCheckout();\n * ```\n *\n * @param options - A set of construction options.\n * @returns an instance of `CheckoutService`.\n */\nexport default function createCheckoutService(options?: CheckoutServiceOptions): CheckoutService {\n    if (document.location.protocol !== 'https:') {\n        getDefaultLogger().warn('The BigCommerce Checkout SDK should not be used on a non-HTTPS page');\n    }\n\n    if (getEnvironment() !== 'production') {\n        getDefaultLogger().warn('Note that the development build is not optimized. To create a production build, set process.env.NODE_ENV to `production`.');\n    }\n\n    const config: ConfigState = {\n        meta: {\n            externalSource: options && options.externalSource,\n        },\n        errors: {},\n        statuses: {},\n    };\n    const { locale = '', shouldWarnMutation = true } = options || {};\n    const requestSender = createRequestSender({ host: options && options.host });\n    const store = createCheckoutStore({ config }, { shouldWarnMutation });\n    const paymentClient = createPaymentClient(store);\n    const orderRequestSender = new OrderRequestSender(requestSender);\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const configActionCreator = new ConfigActionCreator(new ConfigRequestSender(requestSender));\n    const spamProtection = createSpamProtection(createScriptLoader());\n    const spamProtectionActionCreator = new SpamProtectionActionCreator(spamProtection);\n    const orderActionCreator = new OrderActionCreator(\n        orderRequestSender,\n        new CheckoutValidator(checkoutRequestSender),\n        spamProtectionActionCreator\n    );\n\n    return new CheckoutService(\n        store,\n        new BillingAddressActionCreator(new BillingAddressRequestSender(requestSender)),\n        new CheckoutActionCreator(checkoutRequestSender, configActionCreator),\n        configActionCreator,\n        new ConsignmentActionCreator(new ConsignmentRequestSender(requestSender), checkoutRequestSender),\n        new CountryActionCreator(new CountryRequestSender(requestSender, { locale })),\n        new CouponActionCreator(new CouponRequestSender(requestSender)),\n        new CustomerStrategyActionCreator(createCustomerStrategyRegistry(store, requestSender)),\n        new ErrorActionCreator(),\n        new GiftCertificateActionCreator(new GiftCertificateRequestSender(requestSender)),\n        new InstrumentActionCreator(new InstrumentRequestSender(paymentClient, requestSender)),\n        orderActionCreator,\n        new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n        new PaymentStrategyActionCreator(\n            createPaymentStrategyRegistry(store, paymentClient, requestSender, spamProtection),\n            orderActionCreator\n        ),\n        new ShippingCountryActionCreator(new ShippingCountryRequestSender(requestSender, { locale })),\n        new ShippingStrategyActionCreator(createShippingStrategyRegistry(store, requestSender)),\n        spamProtectionActionCreator,\n        new StoreCreditActionCreator(new StoreCreditRequestSender(requestSender))\n    );\n}\n\nexport interface CheckoutServiceOptions {\n    locale?: string;\n    host?: string;\n    shouldWarnMutation?: boolean;\n    externalSource?: string;\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { MutationObserverFactory } from '../../common/dom/mutation-observer';\n\nimport GoogleRecaptcha from './google-recaptcha';\nimport GoogleRecaptchaScriptLoader from './google-recaptcha-script-loader';\n\nexport default function createSpamProtection(scriptLoader: ScriptLoader) {\n    return new GoogleRecaptcha(\n        new GoogleRecaptchaScriptLoader(scriptLoader),\n        new MutationObserverFactory()\n    );\n}\n","// tslint:disable-next-line:no-reference\n/// <reference path=\"../payment/bigpay-client.d.ts\" />\nimport { createClient as createBigpayClient } from '@bigcommerce/bigpay-client';\n\nimport { CheckoutStore } from '../checkout';\n\nexport default function createPaymentClient(store: CheckoutStore) {\n    const paymentClient = createBigpayClient();\n\n    store.subscribe(\n        state => {\n            const config = state.config.getStoreConfig();\n\n            if (config) {\n                paymentClient.setHost(config.paymentSettings.bigpayBaseUrl);\n            }\n        },\n        state => state.config.getStoreConfig()\n    );\n\n    return paymentClient;\n}\n","import { createFormPoster } from '@bigcommerce/form-poster';\nimport { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutActionCreator, CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { ConfigActionCreator, ConfigRequestSender } from '../config';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport {\n    createBraintreeVisaCheckoutPaymentProcessor,\n    BraintreeScriptLoader,\n    BraintreeSDKCreator,\n    VisaCheckoutScriptLoader\n} from '../payment/strategies/braintree';\nimport { ChasePayScriptLoader } from '../payment/strategies/chasepay';\nimport { createGooglePayPaymentProcessor, GooglePayBraintreeInitializer, GooglePayStripeInitializer } from '../payment/strategies/googlepay';\nimport { MasterpassScriptLoader } from '../payment/strategies/masterpass';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport CustomerActionCreator from './customer-action-creator';\nimport CustomerRequestSender from './customer-request-sender';\nimport CustomerStrategyActionCreator from './customer-strategy-action-creator';\nimport { CustomerStrategy } from './strategies';\nimport { AmazonPayCustomerStrategy } from './strategies/amazon';\nimport { BraintreeVisaCheckoutCustomerStrategy } from './strategies/braintree';\nimport { ChasePayCustomerStrategy } from './strategies/chasepay';\nimport { DefaultCustomerStrategy } from './strategies/default';\nimport { GooglePayCustomerStrategy } from './strategies/googlepay';\nimport { MasterpassCustomerStrategy } from './strategies/masterpass';\nimport { SquareCustomerStrategy } from './strategies/square';\n\nexport default function createCustomerStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<CustomerStrategy> {\n    const registry = new Registry<CustomerStrategy>();\n    const scriptLoader = getScriptLoader();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const checkoutActionCreator = new CheckoutActionCreator(\n        checkoutRequestSender,\n        new ConfigActionCreator(new ConfigRequestSender(requestSender))\n    );\n    const formPoster = createFormPoster();\n    const paymentMethodActionCreator = new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender));\n    const remoteCheckoutRequestSender = new RemoteCheckoutRequestSender(requestSender);\n    const remoteCheckoutActionCreator = new RemoteCheckoutActionCreator(remoteCheckoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            remoteCheckoutRequestSender,\n            new AmazonPayScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('braintreevisacheckout', () =>\n        new BraintreeVisaCheckoutCustomerStrategy(\n            store,\n            checkoutActionCreator,\n            paymentMethodActionCreator,\n            new CustomerStrategyActionCreator(registry),\n            remoteCheckoutActionCreator,\n            createBraintreeVisaCheckoutPaymentProcessor(scriptLoader, requestSender),\n            new VisaCheckoutScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('chasepay', () =>\n        new ChasePayCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new ChasePayScriptLoader(scriptLoader),\n            requestSender,\n            formPoster\n        )\n    );\n\n    registry.register('squarev2', () =>\n        new SquareCustomerStrategy(\n            store,\n            new RemoteCheckoutActionCreator(remoteCheckoutRequestSender)\n        )\n    );\n\n    registry.register('masterpass', () =>\n        new MasterpassCustomerStrategy(\n            store,\n            paymentMethodActionCreator,\n            remoteCheckoutActionCreator,\n            new MasterpassScriptLoader(scriptLoader)\n        )\n    );\n\n    registry.register('googlepaybraintree', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayBraintreeInitializer(\n                    new BraintreeSDKCreator(\n                        new BraintreeScriptLoader(scriptLoader)\n                    )\n                )\n            ),\n            formPoster\n        )\n    );\n\n    registry.register('googlepaystripe', () =>\n        new GooglePayCustomerStrategy(\n            store,\n            remoteCheckoutActionCreator,\n            createGooglePayPaymentProcessor(\n                store,\n                new GooglePayStripeInitializer()\n            ),\n            formPoster\n    )\n);\n\n    registry.register('default', () =>\n        new DefaultCustomerStrategy(\n            store,\n            new CustomerActionCreator(\n                new CustomerRequestSender(requestSender),\n                checkoutActionCreator\n            )\n        )\n    );\n\n    return registry;\n}\n","import { RequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { CheckoutRequestSender, CheckoutStore } from '../checkout';\nimport { Registry } from '../common/registry';\nimport { PaymentMethodActionCreator, PaymentMethodRequestSender } from '../payment';\nimport { AmazonPayScriptLoader } from '../payment/strategies/amazon-pay';\nimport { RemoteCheckoutActionCreator, RemoteCheckoutRequestSender } from '../remote-checkout';\n\nimport ConsignmentActionCreator from './consignment-action-creator';\nimport ConsignmentRequestSender from './consignment-request-sender';\nimport { ShippingStrategy } from './strategies';\nimport { AmazonPayShippingStrategy } from './strategies/amazon';\nimport { DefaultShippingStrategy } from './strategies/default';\n\nexport default function createShippingStrategyRegistry(\n    store: CheckoutStore,\n    requestSender: RequestSender\n): Registry<ShippingStrategy> {\n    const registry = new Registry<ShippingStrategy>();\n    const checkoutRequestSender = new CheckoutRequestSender(requestSender);\n    const consignmentRequestSender = new ConsignmentRequestSender(requestSender);\n    const consignmentActionCreator = new ConsignmentActionCreator(consignmentRequestSender, checkoutRequestSender);\n\n    registry.register('amazon', () =>\n        new AmazonPayShippingStrategy(\n            store,\n            consignmentActionCreator,\n            new PaymentMethodActionCreator(new PaymentMethodRequestSender(requestSender)),\n            new RemoteCheckoutActionCreator(new RemoteCheckoutRequestSender(requestSender)),\n            new AmazonPayScriptLoader(getScriptLoader())\n        )\n    );\n\n    registry.register('default', () =>\n        new DefaultShippingStrategy(\n            store,\n            consignmentActionCreator\n        )\n    );\n\n    return registry;\n}\n","import { EmbeddedCheckoutFrameLoadedEvent } from '../embedded-checkout-events';\n\nexport default function handleFrameLoadedEvent(message: EmbeddedCheckoutFrameLoadedEvent): void {\n    if (!message.payload || !message.payload.contentId) {\n        return;\n    }\n\n    const body = document.getElementById(message.payload.contentId);\n\n    if (!body || body.hasAttribute('data-iframe-height')) {\n        return;\n    }\n\n    body.setAttribute('data-iframe-height', '');\n}\n","export default interface CustomError extends Error {\n    message: string;\n    type: string;\n    subtype?: string;\n}\n\nexport function isCustomError(error: any): error is CustomError {\n    return (\n        typeof error.message === 'string' &&\n        typeof error.type === 'string' &&\n        (typeof error.subtype === 'string' || !error.subtype) &&\n        error instanceof Error\n    );\n}\n","import { isCustomError, CustomError } from '../../common/error/errors';\nimport { bindDecorator as bind } from '../../common/utility';\nimport EmbeddedCheckoutError from '../embedded-checkout-error';\nimport {\n    EmbeddedCheckoutCompleteEvent,\n    EmbeddedCheckoutErrorEvent,\n    EmbeddedCheckoutEvent,\n    EmbeddedCheckoutEventMap,\n    EmbeddedCheckoutEventType,\n    EmbeddedCheckoutFrameErrorEvent,\n    EmbeddedCheckoutFrameLoadedEvent,\n    EmbeddedCheckoutLoadedEvent,\n    EmbeddedCheckoutSignedOutEvent,\n} from '../embedded-checkout-events';\nimport EmbeddedCheckoutStyles from '../embedded-checkout-styles';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport { EmbeddedContentEventMap, EmbeddedContentEventType } from './embedded-content-events';\nimport EmbeddedContentOptions from './embedded-content-options';\n\n@bind\nexport default class IframeEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    /**\n     * @internal\n     */\n    constructor(\n        private _messageListener: IframeEventListener<EmbeddedContentEventMap>,\n        private _messagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _untargetedMessagePoster: IframeEventPoster<EmbeddedCheckoutEvent>,\n        private _messageHandlers: EventCallbacks<EmbeddedCheckoutEventMap> = {}\n    ) {\n        this._messageListener.listen();\n    }\n\n    postComplete(): void {\n        const message: EmbeddedCheckoutCompleteEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutComplete,\n        };\n\n        this._postMessage(message);\n    }\n\n    postError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutErrorEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutError,\n            payload: this._transformError(payload),\n        };\n\n        this._postMessage(message);\n    }\n\n    postFrameError(payload: Error | CustomError): void {\n        const message: EmbeddedCheckoutFrameErrorEvent = {\n            type: EmbeddedCheckoutEventType.FrameError,\n            payload: this._transformError(payload),\n        };\n\n        // Ideally, all messages should be targeted at a specific origin.\n        // However, for `FrameError` message, we have to post it in an\n        // untargeted fashion. This is because the error could be caused by a\n        // missing cart. That makes it not possible to determine of site origin\n        // of the parent window. Nevertheless, we still want to notify the\n        // parent window about the error.\n        this._postMessage(message, { untargeted: true });\n    }\n\n    postFrameLoaded(payload?: EmbeddedContentOptions): void {\n        const message: EmbeddedCheckoutFrameLoadedEvent = {\n            type: EmbeddedCheckoutEventType.FrameLoaded,\n            payload,\n        };\n\n        this._postMessage(message);\n    }\n\n    postLoaded(): void {\n        const message: EmbeddedCheckoutLoadedEvent = {\n            type: EmbeddedCheckoutEventType.CheckoutLoaded,\n        };\n\n        this._postMessage(message);\n    }\n\n    postSignedOut(): void {\n        const message: EmbeddedCheckoutSignedOutEvent = {\n            type: EmbeddedCheckoutEventType.SignedOut,\n        };\n\n        this._postMessage(message);\n    }\n\n    receiveStyles(handler: (styles: EmbeddedCheckoutStyles) => void): void {\n        this._messageListener.addListener(EmbeddedContentEventType.StyleConfigured, ({ payload }) => {\n            handler(payload);\n        });\n    }\n\n    private _postMessage(message: EmbeddedCheckoutEvent, options?: { untargeted?: boolean }): void {\n        this._notifyMessageHandlers(message);\n\n        if (options && options.untargeted) {\n            return this._untargetedMessagePoster.post(message);\n        }\n\n        this._messagePoster.post(message);\n    }\n\n    private _notifyMessageHandlers(message: EmbeddedCheckoutEvent): void {\n        Object.keys(this._messageHandlers)\n            .forEach(key => {\n                const handler = this._messageHandlers[key as keyof EmbeddedCheckoutEventMap];\n\n                if (handler) {\n                    handler.call(null, message);\n                }\n            });\n    }\n\n    private _transformError(error: Error | CustomError): EmbeddedCheckoutError {\n        return {\n            message: error.message,\n            type: isCustomError(error) ? error.type : undefined,\n            subtype: isCustomError(error) ? error.subtype : undefined,\n        };\n    }\n}\n\nexport type EventCallbacks<TEventMap> = {\n    [key in keyof TEventMap]?: (event: TEventMap[key]) => void;\n};\n","import { bindDecorator as bind } from '../../common/utility';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\n\n@bind\nexport default class NoopEmbeddedCheckoutMessenger implements EmbeddedCheckoutMessenger {\n    postComplete(): void {}\n\n    postError(): void {}\n\n    postFrameError(): void {}\n\n    postFrameLoaded(): void {}\n\n    postLoaded(): void {}\n\n    postSignedOut(): void {}\n\n    receiveStyles(): void {}\n}\n","import { EmbeddedCheckoutEvent, EmbeddedCheckoutEventType } from '../embedded-checkout-events';\nimport IframeEventListener from '../iframe-event-listener';\nimport IframeEventPoster from '../iframe-event-poster';\n\nimport EmbeddedCheckoutMessenger from './embedded-checkout-messenger';\nimport EmbeddedCheckoutMessengerOptions from './embedded-checkout-messenger-options';\nimport { EmbeddedContentEventMap } from './embedded-content-events';\nimport handleFrameLoadedEvent from './handle-frame-loaded-event';\nimport IframeEmbeddedCheckoutMessenger from './iframe-embedded-checkout-messenger';\nimport NoopEmbeddedCheckoutMessenger from './noop-embedded-checkout-messenger';\n\n/**\n * Create an instance of `EmbeddedCheckoutMessenger`.\n *\n * @remarks\n * The object is responsible for posting messages to the parent window from the\n * iframe when certain events have occurred. For example, when the checkout\n * form is first loaded, you should notify the parent window about it.\n *\n * The iframe can only be embedded in domains that are allowed by the store.\n *\n * ```ts\n * const messenger = createEmbeddedCheckoutMessenger({\n *     parentOrigin: 'https://some/website',\n * });\n *\n * messenger.postFrameLoaded();\n * ```\n *\n * @alpha\n * Please note that this feature is currently in an early stage of development.\n * Therefore the API is unstable and not ready for public consumption.\n *\n * @param options - Options for creating `EmbeddedCheckoutMessenger`\n * @returns - An instance of `EmbeddedCheckoutMessenger`\n */\nexport default function createEmbeddedCheckoutMessenger(options: EmbeddedCheckoutMessengerOptions): EmbeddedCheckoutMessenger {\n    const parentWindow = options.parentWindow || window.parent;\n\n    // Return a No-op messenger if it is not called inside an iframe\n    if (window === parentWindow) {\n        return new NoopEmbeddedCheckoutMessenger();\n    }\n\n    return new IframeEmbeddedCheckoutMessenger(\n        new IframeEventListener<EmbeddedContentEventMap>(options.parentOrigin),\n        new IframeEventPoster<EmbeddedCheckoutEvent>(options.parentOrigin, parentWindow),\n        new IframeEventPoster<EmbeddedCheckoutEvent>('*', parentWindow),\n        { [EmbeddedCheckoutEventType.FrameLoaded]: handleFrameLoadedEvent }\n    );\n}\n","import { isObject, union } from 'lodash';\nimport * as MessageFormat from 'messageformat';\n\nimport Logger from '../common/log/logger';\nimport { bindDecorator as bind } from '../common/utility';\n\nimport LanguageConfig, { Locales, Translations } from './language-config';\n\nconst DEFAULT_LOCALE = 'en';\nconst KEY_PREFIX = 'optimized_checkout';\n\n/**\n * Responsible for getting language strings.\n *\n * This object can be used to retrieve language strings that are most\n * appropriate for a given locale.\n *\n * The language strings provided to the object should follow [ICU\n * MessageFormat](http://userguide.icu-project.org/formatparse/messages) syntax.\n */\n@bind\nexport default class LanguageService {\n    private _locale: string;\n    private _locales: Locales;\n    private _translations: Translations;\n    private _formatters: { [key: string]: any };\n\n    /**\n     * @internal\n     */\n    constructor(\n        config: Partial<LanguageConfig>,\n        private _logger: Logger\n    ) {\n        const { locale, locales, translations } = this._transformConfig(config);\n\n        this._locale = locale;\n        this._locales = locales;\n        this._translations = translations;\n        this._formatters = {};\n    }\n\n    /**\n     * Remaps a set of language strings with a different set of keys.\n     *\n     * ```js\n     * service.mapKeys({\n     *     'new_key': 'existing_key',\n     * });\n     *\n     * console.log(service.translate('new_key'));\n     * ```\n     *\n     * @param maps - The set of language strings.\n     */\n    mapKeys(maps: { [key: string]: string }): void {\n        Object.keys(maps).forEach(key => {\n            const translationKey = `${KEY_PREFIX}.${maps[key]}`;\n\n            this._translations[`${KEY_PREFIX}.${key}`] = this._translations[translationKey];\n        });\n    }\n\n    /**\n     * Gets the preferred locale of the current customer.\n     *\n     * @returns The preferred locale code.\n     */\n    getLocale(): string {\n        return this._hasTranslations() ? this._locale : DEFAULT_LOCALE;\n    }\n\n    /**\n     * Gets a language string by a key.\n     *\n     * ```js\n     * service.translate('language_key');\n     * ```\n     *\n     * If the language string contains a placeholder, you can replace it by\n     * providing a second argument.\n     *\n     * ```js\n     * service.translate('language_key', { placeholder: 'Hello' });\n     * ```\n     *\n     * @param key - The language key.\n     * @param data - Data for replacing placeholders in the language string.\n     * @returns The translated language string.\n     */\n    translate(key: string, data: TranslationData = {}): string {\n        const prefixedKey = `${KEY_PREFIX}.${key}`;\n\n        if (typeof this._translations[prefixedKey] !== 'string') {\n            this._logger.warn(`Translation key \"${prefixedKey}\" is missing`);\n\n            return prefixedKey;\n        }\n\n        if (!this._formatters[prefixedKey]) {\n            const messageFormat = new MessageFormat(this._locales[prefixedKey]);\n\n            this._formatters[prefixedKey] = messageFormat.compile(this._translations[prefixedKey] || '');\n        }\n\n        return this._formatters[prefixedKey](this._transformData(data));\n    }\n\n    private _transformConfig(config: Partial<LanguageConfig> = {}): LanguageConfig {\n        const output: LanguageConfig = {\n            defaultTranslations: {},\n            translations: {},\n            locales: {},\n            locale: config.locale || DEFAULT_LOCALE,\n        };\n\n        const locales = config.locales || {};\n        const translations = this._flattenObject(config.translations || {});\n        const defaultTranslations = this._flattenObject(config.defaultTranslations || {});\n        const translationKeys = union(Object.keys(defaultTranslations), Object.keys(translations));\n\n        translationKeys.forEach(key => {\n            if (translations && translations[key]) {\n                output.translations[key] = translations[key];\n                output.locales[key] = locales[key] || output.locale;\n            } else {\n                output.translations[key] = defaultTranslations[key];\n                output.locales[key] = DEFAULT_LOCALE;\n            }\n        });\n\n        return output;\n    }\n\n    private _flattenObject(object: Translations, result: Translations = {}, parentKey: string = ''): Translations {\n        try {\n            Object.keys(object).forEach(key => {\n                const value = object[key];\n                const resultKey = parentKey ? `${parentKey}.${key}` : key;\n\n                if (isObject(value)) {\n                    return this._flattenObject(value as Translations, result, resultKey);\n                }\n\n                result[resultKey] = value;\n            });\n        } catch (err) {\n            this._logger.warn(`Unable to parse object: ${err}`);\n        }\n\n        return result;\n    }\n\n    private _transformData(data: TranslationData): TranslationData {\n        return Object.keys(data).reduce((result, key) => {\n            const value = data[key];\n\n            result[key] = value === null || value === undefined ? '' : value;\n\n            return result;\n        }, {} as TranslationData);\n    }\n\n    private _hasTranslations(): boolean {\n        return Object.keys(this._locales).map(key => this._locales[key])\n            .filter(code => code.split('-')[0] === this._locale.split('-')[0])\n            .length > 0;\n    }\n}\n\nexport interface TranslationData {\n    [key: string]: string | number;\n}\n","import { getDefaultLogger } from '../common/log';\n\nimport LanguageConfig from './language-config';\nimport LanguageService from './language-service';\n\n/**\n * Creates an instance of `LanguageService`.\n *\n * @remarks\n * ```js\n * const language = {{{langJson 'optimized_checkout'}}}; // `langJson` is a Handlebars helper provided by BigCommerce's Stencil template engine.\n * const service = createLanguageService(language);\n *\n * console.log(service.translate('address.city_label'));\n * ```\n *\n * @param config - A configuration object.\n * @returns An instance of `LanguageService`.\n */\nexport default function createLanguageService(config: Partial<LanguageConfig> = {}): LanguageService {\n    return new LanguageService(\n        config,\n        getDefaultLogger()\n    );\n}\n","import { InvalidArgumentError } from '../common/error/errors';\n\nimport { CurrencyConfig } from './currency';\n\nexport default class CurrencyFormatter {\n    private _decimalPlaces: number;\n    private _symbolLocation: string;\n    private _symbol: string;\n    private _thousandsSeparator: string;\n    private _decimalSeparator: string;\n\n    constructor(\n        currencySettings: CurrencyConfig\n    ) {\n        if (!currencySettings) {\n            throw new Error('Currency settings missing');\n        }\n\n        const {\n            decimalPlaces,\n            symbolLocation,\n            symbol,\n            thousandsSeparator,\n            decimalSeparator,\n        } = currencySettings;\n\n        if (\n            typeof symbolLocation !== 'string' ||\n            typeof symbol !== 'string' ||\n            typeof thousandsSeparator !== 'string' ||\n            typeof decimalSeparator !== 'string' ||\n            typeof decimalPlaces !== 'string'\n        ) {\n            throw new InvalidArgumentError('Invalid currency settings provided');\n        }\n\n        this._decimalPlaces = parseInt(decimalPlaces, 10);\n        this._symbolLocation = symbolLocation;\n        this._symbol = symbol;\n        this._thousandsSeparator = thousandsSeparator;\n        this._decimalSeparator = decimalSeparator;\n    }\n\n    format(amount?: number): string {\n        if (typeof amount !== 'number') {\n            throw new InvalidArgumentError('Invalid amount provided');\n        }\n\n        const formattedNumber = this._formatNumber(amount);\n\n        const formattedCurrency = this._formatCurrency(formattedNumber);\n\n        return amount < 0 ?\n            `-${formattedCurrency}` :\n            formattedCurrency;\n    }\n\n    private _formatNumber(amount: number): string {\n        const positiveAmount = Math.abs(amount);\n        const [ integerAmount, decimalAmount = '' ] = (this._toFixed(positiveAmount, this._decimalPlaces)).split('.');\n        const parsedIntegerAmount = integerAmount.replace(/\\B(?=(\\d{3})+(?!\\d))/g, this._thousandsSeparator);\n\n        if (this._decimalPlaces < 1) {\n            return parsedIntegerAmount;\n        }\n\n        return [\n            parsedIntegerAmount,\n            decimalAmount,\n        ].join(this._decimalSeparator);\n    }\n\n    private _formatCurrency(formattedNumber: string): string {\n        return (this._symbolLocation.toLowerCase() === 'left') ?\n            `${this._symbol}${formattedNumber}` :\n            `${formattedNumber}${this._symbol}`;\n    }\n\n    private _toFixed(value: number, precision: number): string {\n        return (+(Math.round(+(value + 'e' + precision)) + 'e' + -precision)).toFixed(precision);\n    }\n}\n","import { bindDecorator as bind } from '../common/utility';\nimport { StoreConfig } from '../config';\n\nimport CurrencyFormatter from './currency-formatter';\n\n/**\n * Responsible for formatting and converting currencies.\n */\n@bind\nexport default class CurrencyService {\n    private _customerFormatter: CurrencyFormatter;\n    private _storeFormatter: CurrencyFormatter;\n\n    /**\n     * @internal\n     */\n    constructor(\n        private _storeConfig: StoreConfig\n    ) {\n        this._customerFormatter = new CurrencyFormatter(this._storeConfig.shopperCurrency);\n        this._storeFormatter = new CurrencyFormatter(this._storeConfig.currency);\n    }\n\n    toCustomerCurrency(amount: number): string {\n        const exchangeRate = this._storeConfig.shopperCurrency.exchangeRate;\n\n        return this._customerFormatter.format(amount * exchangeRate);\n    }\n\n    toStoreCurrency(amount: number): string {\n        return this._storeFormatter.format(amount);\n    }\n}\n","import { StoreConfig } from '../config';\n\nimport CurrencyService from './currency-service';\n\n/**\n * Creates an instance of `CurrencyService`.\n *\n * @remarks\n * ```js\n * const { data } = checkoutService.getState();\n * const config = data.getConfig();\n * const checkout = data.getCheckout();\n * const currencyService = createCurrencyService(config);\n *\n * currencyService.toStoreCurrency(checkout.grandTotal);\n * currencyService.toCustomerCurrency(checkout.grandTotal);\n * ```\n *\n * @alpha\n * Please note that `CurrencyService` is currently in an early stage\n * of development. Therefore the API is unstable and not ready for public\n * consumption.\n *\n * @param config - The config object containing the currency configuration\n * @returns an instance of `CurrencyService`.\n */\nexport default function createCurrencyService(\n    config: StoreConfig\n): CurrencyService {\n    return new CurrencyService(config);\n}\n","export { createTimeout } from '@bigcommerce/request-sender';\n\nexport { createCheckoutService } from './checkout';\nexport { createCheckoutButtonInitializer } from './checkout-buttons';\nexport { embedCheckout } from './embedded-checkout';\nexport { createEmbeddedCheckoutMessenger } from './embedded-checkout/iframe-content';\nexport { createLanguageService } from './locale';\nexport { createCurrencyService } from './currency';\n","import { Checkout } from '../../../checkout';\nimport PaymentMethod from '../../payment-method';\nimport { BraintreeModuleCreator, GooglePayBraintreeSDK } from '../braintree';\n\nexport type EnvironmentType = 'PRODUCTION' | 'TEST';\ntype TokenizeType = 'AndroidPayCard' | 'CreditCard';\n\nexport interface GooglePayInitializer {\n    initialize(checkout: Checkout, paymentMethod: PaymentMethod, hasShippingAddress: boolean, publishableKey?: string): Promise<GooglePayPaymentDataRequestV2>;\n    teardown(): Promise<void>;\n    parseResponse(paymentData: GooglePaymentData): TokenizePayload;\n}\n\nexport interface GooglePayCreator extends BraintreeModuleCreator<GooglePayBraintreeSDK> {}\n\nexport interface GooglePayPaymentOptions {\n    environment: EnvironmentType;\n}\n\nexport interface GooglePayIsReadyToPayResponse {\n    result: boolean;\n    paymentMethodPresend?: boolean;\n}\n\nexport interface GooglePaySDK {\n    payments: {\n        api: {\n            PaymentsClient: new(options: GooglePayPaymentOptions) => GooglePayClient;\n        };\n    };\n}\n\nexport interface GooglePayClient {\n    isReadyToPay(options: object): Promise<GooglePayIsReadyToPayResponse>;\n    loadPaymentData(paymentDataRequest: GooglePayPaymentDataRequestV2): Promise<GooglePaymentData>;\n    createButton(options: { [key: string]: string | object }): HTMLElement;\n}\n\nexport interface GooglePayHostWindow extends Window {\n    google?: GooglePaySDK;\n}\n\nexport interface TokenizePayload {\n    nonce: string;\n    details: {\n        cardType: string;\n        lastFour: string;\n        lastTwo?: string;\n    };\n    description?: string;\n    type: TokenizeType;\n    binData?: {\n        commercial: string;\n        countryOfIssuance: string;\n        debit: string;\n        durbinRegulated: string;\n        healthcare: string;\n        issuingBank: string;\n        payroll: string;\n        prepaid: string;\n        productId: string;\n    };\n}\n\nexport interface GooglePaymentData {\n    apiVersion: number;\n    apiVersionMinor: number;\n    paymentMethodData: {\n        description: string;\n        info: {\n            cardDetails: string;\n            cardNetwork: string;\n            billingAddress: GooglePayAddress;\n        };\n        tokenizationData: {\n            token: string;\n            type: string;\n        };\n        type: string;\n    };\n    shippingAddress: GooglePayAddress;\n    email: string;\n}\n\nexport interface GooglePayAddress {\n    address1: string;\n    address2: string;\n    address3: string;\n    administrativeArea: string;\n    companyName: string;\n    countryCode: string;\n    locality: string;\n    name: string;\n    postalCode: string;\n    sortingCode: string;\n    phoneNumber: string;\n}\n\nexport interface GooglePaymentsError {\n    statusCode: string;\n    statusMessage?: string;\n}\n\nexport interface PaymentMethodData {\n    methodId: string;\n    paymentData: {\n        method: string;\n        nonce: string;\n        cardInformation: {\n            type: string;\n            number: string;\n        };\n    };\n}\n\nexport enum ButtonType {\n    Long = 'long',\n    Short = 'short',\n}\nexport enum ButtonColor {\n    Default = 'default',\n    Black = 'black',\n    White = 'white',\n}\n\nexport interface GooglePayPaymentDataRequestV2 {\n    apiVersion: number;\n    apiVersionMinor: number;\n    merchantInfo: {\n        authJwt?: string;\n        merchantId?: string;\n        merchantName?: string;\n    };\n    allowedPaymentMethods: [{\n        type: string;\n        parameters: {\n            allowedAuthMethods: string[];\n            allowedCardNetworks: string[];\n            allowPrepaidCards?: boolean;\n            billingAddressRequired?: boolean;\n            billingAddressParameters?: {\n                format?: string;\n                phoneNumberRequired?: boolean;\n            };\n        };\n        tokenizationSpecification?: {\n            type: string;\n            parameters: {\n                gateway: string;\n                gatewayMerchantId?: string;\n                'braintree:apiVersion'?: string;\n                'braintree:clientKey'?: string;\n                'braintree:merchantId'?: string;\n                'braintree:sdkVersion'?: string;\n                'braintree:authorizationFingerprint'?: string;\n                'stripe:version'?: string;\n                'stripe:publishableKey'?: string;\n            };\n        };\n    }];\n    transactionInfo: {\n        currencyCode: string;\n        totalPriceStatus: string;\n        totalPrice?: string;\n        checkoutOption?: string;\n    };\n    emailRequired?: boolean;\n    shippingAddressRequired?: boolean;\n    shippingAddressParameters?: {\n        allowedCountryCodes?: string[];\n        phoneNumberRequired?: boolean;\n    };\n}\n","import { RequestSender, Response } from '@bigcommerce/request-sender';\n\nimport { AddressRequestBody } from '../../../address';\nimport { BillingAddressActionCreator, BillingAddressUpdateRequestBody } from '../../../billing';\nimport { CheckoutStore, InternalCheckoutSelectors } from '../../../checkout';\nimport {\n    MissingDataError,\n    MissingDataErrorType,\n    NotInitializedError,\n    NotInitializedErrorType,\n} from '../../../common/error/errors';\nimport { RemoteCheckoutSynchronizationError } from '../../../remote-checkout/errors';\nimport { ConsignmentActionCreator } from '../../../shipping';\nimport PaymentMethodInvalidError from '../../errors/payment-method-invalid-error';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\n\nimport {\n    ButtonColor,\n    ButtonType,\n    EnvironmentType,\n    GooglePaymentData,\n    GooglePayAddress,\n    GooglePayClient,\n    GooglePayInitializer,\n    GooglePayPaymentDataRequestV2,\n    GooglePaySDK,\n    TokenizePayload\n} from './googlepay';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default class GooglePayPaymentProcessor {\n    private _googlePayClient?: GooglePayClient;\n    private _methodId?: string;\n    private _paymentDataRequest?: GooglePayPaymentDataRequestV2;\n\n    constructor(\n        private _store: CheckoutStore,\n        private _paymentMethodActionCreator: PaymentMethodActionCreator,\n        private _googlePayScriptLoader: GooglePayScriptLoader,\n        private _googlePayInitializer: GooglePayInitializer,\n        private _billingAddressActionCreator: BillingAddressActionCreator,\n        private _consigmentActionCreator: ConsignmentActionCreator,\n        private _requestSender: RequestSender\n    ) {}\n\n    initialize(methodId: string): Promise<void> {\n        this._methodId = methodId;\n\n        return this._configureWallet();\n    }\n\n    deinitialize(): Promise<void> {\n        return this._googlePayInitializer.teardown();\n    }\n\n    createButton(\n        onClick: (event: Event) => Promise<void>,\n        buttonType: ButtonType = ButtonType.Short,\n        buttonColor: ButtonColor = ButtonColor.Default\n    ): HTMLElement {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.createButton({\n            buttonColor,\n            buttonType,\n            onClick,\n        });\n    }\n\n    displayWallet(): Promise<GooglePaymentData> {\n        if (!this._googlePayClient) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._googlePayClient.loadPaymentData(this._getPaymentDataRequest());\n    }\n\n    handleSuccess(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        return this._postForm(this._googlePayInitializer.parseResponse(paymentData))\n            .then(() => this._updateBillingAddress(paymentData));\n    }\n\n    updateShippingAddress(shippingAddress: GooglePayAddress): Promise<InternalCheckoutSelectors> {\n        return this._store.dispatch(\n            this._consigmentActionCreator.updateAddress(this._mapGooglePayAddressToShippingAddress(shippingAddress))\n        );\n    }\n\n    private _configureWallet(): Promise<void> {\n        const methodId = this._getMethodId();\n\n        return this._store.dispatch(this._paymentMethodActionCreator.loadPaymentMethod(methodId))\n            .then(state => {\n                const paymentMethod = state.paymentMethods.getPaymentMethod(methodId);\n                const checkout = state.checkout.getCheckout();\n                const hasShippingAddress = !!state.shippingAddress.getShippingAddress();\n\n                if (!paymentMethod) {\n                    throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n                }\n\n                if (!checkout) {\n                    throw new MissingDataError(MissingDataErrorType.MissingCheckout);\n                }\n\n                const { testMode } = paymentMethod.config;\n\n                return Promise.all([\n                    this._googlePayScriptLoader.load(),\n                    this._googlePayInitializer.initialize(checkout, paymentMethod, hasShippingAddress),\n                ]).then(([googlePay, paymentDataRequest]) => {\n                    this._googlePayClient = this._getGooglePayClient(googlePay, testMode);\n                    this._paymentDataRequest = paymentDataRequest;\n\n                    return this._googlePayClient.isReadyToPay({\n                        allowedPaymentMethods: [\n                            {\n                                type: paymentDataRequest.allowedPaymentMethods[0].type,\n                                parameters: {\n                                    allowedAuthMethods: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedAuthMethods,\n                                    allowedCardNetworks: paymentDataRequest.allowedPaymentMethods[0].parameters.allowedCardNetworks,\n                                },\n                            },\n                        ],\n                        apiVersion: paymentDataRequest.apiVersion,\n                        apiVersionMinor: paymentDataRequest.apiVersionMinor,\n                    }).then(response => {\n                        if (response.result) {\n                            return;\n                        }\n\n                        throw new PaymentMethodInvalidError();\n                    });\n                });\n            });\n    }\n\n    private _getCardInformation(cardInformation: { cardType: string; lastFour: string }) {\n        return {\n            type: cardInformation.cardType,\n            number: cardInformation.lastFour,\n        };\n    }\n\n    private _getPaymentDataRequest(): GooglePayPaymentDataRequestV2 {\n        if (!this._paymentDataRequest) {\n            throw new RemoteCheckoutSynchronizationError();\n        }\n\n        return this._paymentDataRequest;\n    }\n\n    private _getGooglePayClient(google: GooglePaySDK, testMode?: boolean): GooglePayClient {\n        if (testMode === undefined) {\n            throw new MissingDataError(MissingDataErrorType.MissingPaymentMethod);\n        }\n\n        const environment: EnvironmentType = testMode ? 'TEST' : 'PRODUCTION';\n\n        return new google.payments.api.PaymentsClient({ environment });\n    }\n\n    private _getMethodId(): string {\n        if (!this._methodId) {\n            throw new NotInitializedError(NotInitializedErrorType.PaymentNotInitialized);\n        }\n\n        return this._methodId;\n    }\n\n    private _mapGooglePayAddressToBillingAddress(paymentData: GooglePaymentData, id: string): BillingAddressUpdateRequestBody {\n        return {\n            id,\n            firstName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(0, -1).join(' '),\n            lastName: paymentData.paymentMethodData.info.billingAddress.name.split(' ').slice(-1).join(' '),\n            company: paymentData.paymentMethodData.info.billingAddress.companyName,\n            address1: paymentData.paymentMethodData.info.billingAddress.address1,\n            address2: paymentData.paymentMethodData.info.billingAddress.address2 + paymentData.paymentMethodData.info.billingAddress.address3,\n            city: paymentData.paymentMethodData.info.billingAddress.locality,\n            stateOrProvince: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            stateOrProvinceCode: paymentData.paymentMethodData.info.billingAddress.administrativeArea,\n            postalCode: paymentData.paymentMethodData.info.billingAddress.postalCode,\n            countryCode: paymentData.paymentMethodData.info.billingAddress.countryCode,\n            phone: paymentData.paymentMethodData.info.billingAddress.phoneNumber,\n            customFields: [],\n            email: paymentData.email,\n        };\n    }\n\n    private _mapGooglePayAddressToShippingAddress(address: GooglePayAddress): AddressRequestBody {\n        return {\n            firstName: address.name.split(' ').slice(0, -1).join(' '),\n            lastName: address.name.split(' ').slice(-1).join(' '),\n            company: address.companyName,\n            address1: address.address1,\n            address2: address.address2 + address.address3,\n            city: address.locality,\n            stateOrProvince: address.administrativeArea,\n            stateOrProvinceCode: address.administrativeArea,\n            postalCode: address.postalCode,\n            countryCode: address.countryCode,\n            phone: address.phoneNumber,\n            customFields: [],\n        };\n    }\n\n    private _postForm(postPaymentData: TokenizePayload): Promise<Response<void>> {\n        const cardInformation = postPaymentData.details;\n\n        return this._requestSender.post('/checkout.php', {\n            headers: {\n                Accept: 'text/html',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            body: {\n                payment_type: postPaymentData.type,\n                nonce: postPaymentData.nonce,\n                provider: this._getMethodId(),\n                action: 'set_external_checkout',\n                card_information: this._getCardInformation(cardInformation),\n            },\n        });\n    }\n\n    private _updateBillingAddress(paymentData: GooglePaymentData): Promise<InternalCheckoutSelectors> {\n        const remoteBillingAddress = this._store.getState().billingAddress.getBillingAddress();\n\n        if (!remoteBillingAddress) {\n            throw new MissingDataError(MissingDataErrorType.MissingBillingAddress);\n        }\n\n        const googlePayAddressMapped = this._mapGooglePayAddressToBillingAddress(paymentData, remoteBillingAddress.id);\n\n        return this._store.dispatch(\n            this._billingAddressActionCreator.updateAddress(googlePayAddressMapped)\n        );\n    }\n}\n","import { ScriptLoader } from '@bigcommerce/script-loader';\n\nimport { StandardError } from '../../../common/error/errors';\n\nimport { GooglePayHostWindow, GooglePaySDK } from './googlepay';\n\nexport default class GooglePayScriptLoader {\n    constructor(\n        private _scriptLoader: ScriptLoader,\n        private _window: GooglePayHostWindow = window\n    ) {}\n\n    load(): Promise<GooglePaySDK> {\n        return this._scriptLoader\n            .loadScript('https://pay.google.com/gp/p/js/pay.js')\n            .then(() => {\n                if (!this._window.google) {\n                    throw new StandardError();\n                }\n\n                return this._window.google;\n            });\n    }\n}\n","import { createRequestSender } from '@bigcommerce/request-sender';\nimport { getScriptLoader } from '@bigcommerce/script-loader';\n\nimport { BillingAddressActionCreator, BillingAddressRequestSender } from '../../../billing';\nimport { CheckoutRequestSender, CheckoutStore } from '../../../checkout';\nimport { ConsignmentActionCreator, ConsignmentRequestSender } from '../../../shipping';\nimport PaymentMethodActionCreator from '../../payment-method-action-creator';\nimport PaymentMethodRequestSender from '../../payment-method-request-sender';\n\nimport { GooglePayInitializer } from './googlepay';\nimport GooglePayPaymentProcessor from './googlepay-payment-processor';\nimport GooglePayScriptLoader from './googlepay-script-loader';\n\nexport default function createGooglePayPaymentProcessor(store: CheckoutStore, initializer: GooglePayInitializer): GooglePayPaymentProcessor {\n    const requestSender = createRequestSender();\n    const scriptLoader = getScriptLoader();\n\n    return new GooglePayPaymentProcessor(\n        store,\n        new PaymentMethodActionCreator(\n            new PaymentMethodRequestSender(requestSender)\n        ),\n        new GooglePayScriptLoader(scriptLoader),\n        initializer,\n        new BillingAddressActionCreator(\n            new BillingAddressRequestSender(requestSender)\n        ),\n        new ConsignmentActionCreator(\n            new ConsignmentRequestSender(requestSender),\n            new CheckoutRequestSender(requestSender)\n        ),\n        requestSender\n    );\n}\n","import { keyBy, reduce, some } from 'lodash';\n\nimport { Checkout } from '../checkout';\nimport { AmountTransformer } from '../common/utility';\nimport { mapToInternalCoupon, mapToInternalGiftCertificate } from '../coupon';\nimport { mapToDiscountNotifications } from '../promotion';\n\nimport InternalCart from './internal-cart';\nimport mapToInternalLineItems from './map-to-internal-line-items';\n\n/**\n * @deprecated This mapper is only for internal use only. It is required during\n * the transition period as we are moving to adopt the new storefront API object\n * schema.\n */\nexport default function mapToInternalCart(checkout: Checkout): InternalCart {\n    const decimalPlaces = checkout.cart.currency.decimalPlaces;\n    const amountTransformer = new AmountTransformer(decimalPlaces);\n\n    return {\n        id: checkout.cart.id,\n        items: mapToInternalLineItems(checkout.cart.lineItems, decimalPlaces),\n        currency: checkout.cart.currency.code,\n        coupon: {\n            discountedAmount: reduce(checkout.cart.coupons, (sum, coupon) => {\n                return sum + coupon.discountedAmount;\n            }, 0),\n            coupons: checkout.cart.coupons.map(mapToInternalCoupon),\n        },\n        discount: {\n            amount: checkout.cart.discountAmount,\n            integerAmount: amountTransformer.toInteger(checkout.cart.discountAmount),\n        },\n        discountNotifications: mapToDiscountNotifications(checkout.promotions),\n        giftCertificate: {\n            totalDiscountedAmount: reduce(checkout.giftCertificates, (sum, certificate) => {\n                return sum + certificate.used;\n            }, 0),\n            appliedGiftCertificates: keyBy(checkout.giftCertificates.map(mapToInternalGiftCertificate), 'code'),\n        },\n        shipping: {\n            amount: checkout.shippingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.shippingCostTotal),\n            amountBeforeDiscount: checkout.shippingCostBeforeDiscount,\n            integerAmountBeforeDiscount: amountTransformer.toInteger(checkout.shippingCostBeforeDiscount),\n            required: some(checkout.cart.lineItems.physicalItems, lineItem => lineItem.isShippingRequired),\n        },\n        subtotal: {\n            amount: checkout.subtotal,\n            integerAmount: amountTransformer.toInteger(checkout.subtotal),\n        },\n        storeCredit: {\n            amount: checkout.customer ? checkout.customer.storeCredit : 0,\n        },\n        taxSubtotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        taxes: checkout.taxes,\n        taxTotal: {\n            amount: checkout.taxTotal,\n            integerAmount: amountTransformer.toInteger(checkout.taxTotal),\n        },\n        handling: {\n            amount: checkout.handlingCostTotal,\n            integerAmount: amountTransformer.toInteger(checkout.handlingCostTotal),\n        },\n        grandTotal: {\n            amount: checkout.grandTotal,\n            integerAmount: amountTransformer.toInteger(checkout.grandTotal),\n        },\n    };\n}\n","import { DiscountNotification } from '../discount';\n\nimport { Promotion } from '.';\n\nexport default function mapToDiscountNotifications(promotions?: Promotion[]): DiscountNotification[] {\n    const notifications: DiscountNotification[] = [];\n\n    (promotions || []).forEach(promotion => {\n        (promotion.banners || []).forEach(banner => {\n            notifications.push({\n                placeholders: [],\n                discountType: null,\n                message: '',\n                messageHtml: banner.text,\n            });\n        });\n    });\n\n    return notifications;\n}\n"],"sourceRoot":""}